{
  "message": "Add feature-level tests for mission CLI command",
  "updatedFile01Filepath": "sandbox/tests/mission.test.js",
  "updatedFile01Contents": "import { describe, test, expect, beforeEach, afterEach } from \"vitest\";\nimport { execSync } from \"child_process\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport os from \"os\";\n\nconst cli = \"node sandbox/source/main.js\";\n\ndescribe(\"mission command\", () => {\n  const tempDir = path.join(os.tmpdir(), \"mission-tests\");\n\n  beforeEach(() => {\n    fs.rmSync(tempDir, { recursive: true, force: true });\n    fs.mkdirSync(tempDir, { recursive: true });\n  });\n\n  afterEach(() => {\n    fs.rmSync(tempDir, { recursive: true, force: true });\n  });\n\n  test(\"success case: prints mission statement\", () => {\n    const missionContent = \"# Mission Statement\\nThis is a test mission.\\nDetails here.\";\n    const missionPath = path.join(tempDir, \"MISSION.md\");\n    fs.writeFileSync(missionPath, missionContent);\n    const output = execSync(`${cli} mission`, { encoding: \"utf-8\", cwd: tempDir });\n    expect(output).toContain(\"# Mission Statement\");\n    expect(output).toContain(\"This is a test mission.\");\n    const expected = fs.readFileSync(missionPath, \"utf-8\");\n    expect(output).toContain(expected);\n  });\n\n  test(\"error case: missing MISSION.md errors out\", () => {\n    let error;\n    try {\n      execSync(`${cli} mission`, { encoding: \"utf-8\", cwd: tempDir, stdio: \"pipe\" });\n    } catch (e) {\n      error = e;\n    }\n    expect(error).toBeDefined();\n    expect(error.status).toBe(1);\n    expect(error.stderr).toContain(\"Error reading mission:\");\n  });\n});",
  "updatedFile02Filepath": "unused",
  "updatedFile02Contents": "unused",
  "updatedFile03Filepath": "unused",
  "updatedFile03Contents": "unused",
  "updatedFile04Filepath": "unused",
  "updatedFile04Contents": "unused",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}