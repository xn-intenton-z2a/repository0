{
  "message": "Implement --env CLI option to load .env and expose environment variables",
  "updatedFile01Filepath": "sandbox/source/main.js",
  "updatedFile01Contents": "#!/usr/bin/env node\n/* eslint-disable sonarjs/cognitive-complexity */\nimport { fileURLToPath } from \"url\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport minimist from \"minimist\";\nimport ejs from \"ejs\";\nimport yaml from \"js-yaml\";\nimport dotenv from \"dotenv\";\n\n// Load .env file silently\nconst dotenvResult = dotenv.config({ path: path.resolve(\".env\") });\nconst loadedEnv = dotenvResult.parsed || {};\n\n/**\n * Main entrypoint for CLI commands.\n * Dispatches commands to dedicated handlers.\n * @param {string[]} argv - Command-line arguments (excluding node and script path).\n */\nexport async function main(argv) {\n  const args = minimist(argv, {\n    boolean: [\"help\", \"mission\", \"version\", \"render\", \"features\"],\n    alias: { h: \"help\", m: \"mission\", f: \"features\", e: \"env\" },\n    string: [\"env\"],\n  });\n\n  // Handle environment variables option\n  if (args.env !== undefined) {\n    handleEnv(args.env);\n    return;\n  }\n\n  if (args.help) {\n    return printHelp();\n  }\n  if (args.mission) {\n    return printMission();\n  }\n  if (args.version) {\n    return printVersion();\n  }\n  if (args.features) {\n    return listFeatures();\n  }\n  if (args.render) {\n    return renderTemplate(args);\n  }\n  if (args._.length > 0 && args._[0] === \"echo\") {\n    return echoMessage(args._);\n  }\n\n  // Default to help when no known command is provided\n  return printHelp();\n}\n\n/**\n * Handle --env and -e option.\n * @param {boolean|string} envArg - The argument passed to --env.\n */\nfunction handleEnv(envArg) {\n  // Print all loaded env vars when no name is provided\n  if (envArg === true || envArg === \"\") {\n    console.log(JSON.stringify(loadedEnv, null, 2));\n    process.exit(0);\n  }\n  const varName = envArg;\n  const value = loadedEnv[varName];\n  if (value === undefined) {\n    console.error(`Missing environment variable: ${varName}`);\n    process.exit(1);\n  }\n  console.log(value);\n  process.exit(0);\n}\n\n/**\n * Print usage instructions and summary of commands.\n */\nfunction printHelp() {\n  const cmd = path.basename(process.argv[1]);\n  console.log(\n    `Usage: ${cmd} [--help] [-m|--mission] [--version] [-f|--features] [--render <template> <data>] [--env <VAR_NAME>] [echo <message>...]`\n  );\n  console.log(\"\");\n  console.log(\"Commands:\");\n  console.log(\"  --help                      Display usage instructions\");\n  console.log(\"  -m, --mission               Print mission statement\");\n  console.log(\"  --version                   Print version\");\n  console.log(\"  -f, --features              List available features\");\n  console.log(\"  --render <template> <data>  Render EJS template with data (JSON or YAML)\");\n  console.log(\"  -e, --env <VAR_NAME>        Print a specific environment variable\");\n  console.log(\"  -e, --env                   Print all loaded environment variables as JSON\");\n  console.log(\"  echo <message>              Echo message\");\n}\n\n/**\n * Print the mission statement from MISSION.md.\n */\nasync function printMission() {\n  const mission = await fs.readFile(path.resolve(\"MISSION.md\"), \"utf-8\");\n  console.log(mission);\n}\n\n/**\n * Print the version from package.json.\n */\nasync function printVersion() {\n  const pkg = JSON.parse(\n    await fs.readFile(path.resolve(\"package.json\"), \"utf-8\")\n  );\n  console.log(pkg.version);\n}\n\n/**\n * List available features by reading markdown files.\n */\nasync function listFeatures() {\n  const missionText = await fs.readFile(path.resolve(\"MISSION.md\"), \"utf-8\");\n  console.log(missionText);\n\n  try {\n    const dirPath = path.resolve(\"sandbox/features\");\n    const files = await fs.readdir(dirPath);\n    const mdFiles = files.filter((f) => f.endsWith(\".md\"));\n    const featuresList = [];\n\n    for (const file of mdFiles) {\n      const content = await fs.readFile(path.join(dirPath, file), \"utf-8\");\n      // Extract title\n      // eslint-disable-next-line sonarjs/slow-regex\n      const titleMatch = content.match(/^#\\s+(.*)$/m);\n      const title = titleMatch ? titleMatch[1].trim() : \"\";\n      // Extract description: first non-heading paragraph\n      // eslint-disable-next-line sonarjs/slow-regex\n      const afterHeading = content.replace(/^#\\s+.*$/m, \"\").trim();\n      let description = \"\";\n      if (afterHeading) {\n        const lines = afterHeading.split(/\\r?\\n/);\n        const descLines = [];\n        for (const line of lines) {\n          if (line.trim() === \"\") break;\n          descLines.push(line.trim());\n        }\n        description = descLines.join(\" \");\n      }\n      featuresList.push({ title, description });\n    }\n\n    console.log(JSON.stringify(featuresList, null, 2));\n    process.exit(0);\n  } catch (e) {\n    console.error(`Error: ${e.message}`);\n    process.exit(1);\n  }\n}\n\n/**\n * Render an EJS template with provided JSON or YAML data.\n */\nasync function renderTemplate(args) {\n  const [templatePath, dataPath] = args._;\n  if (!templatePath || !dataPath) {\n    console.error(\"Error: --render requires <templatePath> and <dataPath>\");\n    process.exit(1);\n  }\n  const tpl = await fs.readFile(path.resolve(templatePath), \"utf-8\");\n  const dataRaw = await fs.readFile(path.resolve(dataPath), \"utf-8\");\n  let data;\n  if (dataPath.endsWith(\".json\")) {\n    data = JSON.parse(dataRaw);\n  } else if (dataPath.endsWith(\".yaml\") || dataPath.endsWith(\".yml\")) {\n    data = yaml.load(dataRaw);\n  } else {\n    data = JSON.parse(dataRaw);\n  }\n  const output = ejs.render(tpl, data);\n  console.log(output);\n}\n\n/**\n * Echo message arguments to stdout.\n */\nfunction echoMessage(args) {\n  console.log(args.slice(1).join(\" \"));\n}\n\n// If the script is run directly, invoke main with process arguments\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  main(process.argv.slice(2));\n}\n",
  "updatedFile02Filepath": "sandbox/tests/env.test.js",
  "updatedFile02Contents": "import { describe, test, expect, afterEach } from \"vitest\";\nimport path from \"path\";\nimport { spawnSync } from \"child_process\";\nimport fs from \"fs\";\n\nconst envPath = path.resolve(\".env\");\n\ndescribe(\"--env CLI option\", () => {\n  afterEach(() => {\n    if (fs.existsSync(envPath)) {\n      fs.unlinkSync(envPath);\n    }\n  });\n\n  test(\"prints value of known variable and exits 0\", () => {\n    fs.writeFileSync(envPath, \"API_KEY=abc123\");\n    const result = spawnSync(\"node\", [\"sandbox/source/main.js\", \"--env\", \"API_KEY\"], {\n      encoding: \"utf-8\",\n    });\n    expect(result.stdout.trim()).toBe(\"abc123\");\n    expect(result.status).toBe(0);\n  });\n\n  test(\"alias -e works the same\", () => {\n    fs.writeFileSync(envPath, \"KEY=val\");\n    const result = spawnSync(\"node\", [\"sandbox/source/main.js\", \"-e\", \"KEY\"], {\n      encoding: \"utf-8\",\n    });\n    expect(result.stdout.trim()).toBe(\"val\");\n    expect(result.status).toBe(0);\n  });\n\n  test(\"prints all loaded variables as JSON and exits 0\", () => {\n    fs.writeFileSync(envPath, \"ONE=1\\nTWO=2\");\n    const result = spawnSync(\"node\", [\"sandbox/source/main.js\", \"--env\"], {\n      encoding: \"utf-8\",\n    });\n    const expected = JSON.stringify({ ONE: \"1\", TWO: \"2\" }, null, 2);\n    expect(result.stdout.trim()).toBe(expected);\n    expect(result.status).toBe(0);\n  });\n\n  test(\"missing variable prints error to stderr and exits 1\", () => {\n    fs.writeFileSync(envPath, \"A=1\");\n    const result = spawnSync(\"node\", [\"sandbox/source/main.js\", \"--env\", \"B\"], {\n      encoding: \"utf-8\",\n    });\n    expect(result.stderr.trim()).toBe(\"Missing environment variable: B\");\n    expect(result.status).toBe(1);\n  });\n});\n",
  "updatedFile03Filepath": "sandbox/docs/README.md",
  "updatedFile03Contents": "# CLI Demo of Agentic Workflows\n\nA simple CLI demonstration of agentic workflows integrated with GitHub Actions. This tool provides basic commands to showcase **help**, **mission**, **version**, **features**, **echo**, **render**, and **env** functionality.\n\n## Links\n\n- [Mission Statement](../../MISSION.md)\n- [Contributing Guidelines](../../CONTRIBUTING.md)\n- [License](../../LICENSE.md)\n- [intent√Øon agentic-lib](https://github.com/xn-intenton-z2a/agentic-lib)\n\n## Commands\n\n- `--help`  \n  : Displays usage instructions and a summary of available commands.\n\n- `-m, --mission`  \n  : Reads and prints the mission statement from `MISSION.md` (alias -m).\n\n- `--version`  \n  : Reads and prints the version from `package.json`.\n\n- `-f, --features`  \n  : Prints the mission statement from `MISSION.md` then lists available features by reading markdown files in `sandbox/features/` and printing a JSON array of objects containing `title` and `description` for each feature.\n\n- `--render <templatePath> <dataPath>`  \n  : Renders the specified EJS template with data provided in a JSON or YAML file and prints the result to stdout.\n\n- `echo` _<message>..._  \n  : Prints any additional arguments passed after the `echo` command.\n\n- `-e, --env <VAR_NAME>`  \n  : Prints the value of the specified environment variable loaded from `.env`. Exits with code 0 if defined, or prints an error and exits with code 1 if undefined.\n\n- `-e, --env`  \n  : Prints all loaded environment variables as a JSON object. Exits with code 0.\n\n## Usage Examples\n\n```bash\n# Display help text\nnpm run start -- --help\n\n# Display mission statement\nnpm run start -- --mission\n\n# Display mission statement using alias\nnpm run start -- -m\n\n# Display current version\nnpm run start -- --version\n\n# List features\nnpm run start -- --features\n# List features using alias\nnpm run start -- -f\n\n# Print value of API_KEY\nnpm run start -- --env API_KEY\n\n# Alias -e works the same\nnpm run start -- -e API_KEY\n\n# Print all loaded environment variables\nnpm run start -- --env\n```",
  "updatedFile04Filepath": "unused",
  "updatedFile04Contents": "unused",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}