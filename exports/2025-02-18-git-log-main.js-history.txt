commit 72a43c1279fa1c84470d4e60b3784458225a45f1
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Tue Feb 18 00:33:52 2025 +0000

    Updated the README style comment block at the top with refreshed documentation. https://github.com/xn-intenton-z2a/repository0/issues/149 (#153)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 12cfd3f..fbc81d1 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -8,40 +8,33 @@
  * =============================================================================
  *
  * Overview:
- *   A lightweight library for generating plots of mathematical equations. It supports
- *   multiple plot types including quadratic, linear, sine, polar, exponential, and
- *   logarithmic graphs. The plots can be exported in SVG, HTML, JSON, CSV, ASCII, and
- *   plain text formats.
+ *   The Equation Plotter Library is a versatile tool for generating plots of
+ *   mathematical equations. It supports various plot types such as quadratic, linear,
+ *   sine, polar, exponential, and logarithmic graphs, and outputs them in multiple
+ *   formats including SVG, HTML, JSON, CSV, and ASCII.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both algebraic and
- *     prefixed input formats (e.g., "quad:" or "quadratic:").
- *   - Linear Plot: Generates data for y = m*x + b with support for both prefixed and
- *     standard algebraic formats (e.g., "linear:" or "y=2x+3").
- *   - Sine Plot: Plots y = A*sin(B*x + C) with customizable amplitude, frequency, and phase.
- *   - Polar Plot: Generates plots for r = scale * |sin(multiplier*θ)| implementing polar coordinates.
- *   - Exponential Plot: Works with formulas of the form y = a * e^(b*x) with optional algebraic
- *     parsing (e.g., "exp:" or "y=2*e^(0.5x)").
- *   - Logarithmic Plot: Plots y = a * log_b(x) with options for base specification (also supported
- *     via "ln:" for natural logarithm).
- *   - Export Options: Supports output as SVG, HTML embedding, JSON data for plots, CSV for tabular
- *     data, ASCII art for console viewing, and plain text summaries.
- *   - Customizable Visuals: Include grid overlays, axes, and a dealer's choice random color palette
- *     for unique styling.
+ *   - Generate plots for Quadratic (y = ax² + bx + c), Linear (y = m*x + b), Sine (y = A*sin(B*x + C)),
+ *     Polar (r = scale * |sin(multiplier * θ)|), Exponential (y = a * e^(b*x)), and
+ *     Logarithmic (y = a * log_b(x)) equations.
+ *   - Accepts both prefixed input strings (e.g., "quad:", "sine:", "polar:") and standard
+ *     algebraic forms (e.g., "y=2x+3", "x^2+y-1=0").
+ *   - Multiple output formats: SVG (scalable vector graphics), HTML, JSON, CSV, ASCII art, and plain text.
+ *   - Customizable plotting options including grid overlays and randomized color palettes.
  *
- * Usage Examples (CLI):
+ * Usage (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
- * API Usage Example:
+ * API (Importing Functions):
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * Installation:
- *   Install via npm. Refer to package.json for full dependency details.
+ *   Install via npm. See package.json for version and dependency details.
  *
  * Version: 0.1.1-72
  * License: MIT

commit dae30f5a1efbf6d20acc47138054d753fde32e28
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Mon Feb 17 23:31:57 2025 +0000

    Refreshed the top-level README style comment block with updated documentation. https://github.com/xn-intenton-z2a/repository0/issues/151 (#152)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 838a4de..12cfd3f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,49 +3,50 @@
 "use strict";
 
 /**
+ * =============================================================================
  * Equation Plotter Library
+ * =============================================================================
  *
- * Description:
- *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
- *   It supports different mathematical functions including quadratic, sine, polar, linear, exponential, and logarithmic equations.
+ * Overview:
+ *   A lightweight library for generating plots of mathematical equations. It supports
+ *   multiple plot types including quadratic, linear, sine, polar, exponential, and
+ *   logarithmic graphs. The plots can be exported in SVG, HTML, JSON, CSV, ASCII, and
+ *   plain text formats.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'
- *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
- *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
- *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
- *   - Exponential Plot: Generates data for y = a * e^(b*x) with control over coefficients and x range. Accepts formulas in the format "exponential:a,b,xMin,xMax,step" or shortened as "exp:".
- *   - Logarithmic Plot: Generates data for y = a*log_b(x) with control over coefficient, base, and x range. Accepts formulas in the format "log:a,base,xMin,xMax,step" or "ln:" (for natural logarithm with base e).
- *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
- *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
- *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
- *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
- *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
- *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
- *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots. (Dealer's Choice: each plot series gets its own random color)
+ *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both algebraic and
+ *     prefixed input formats (e.g., "quad:" or "quadratic:").
+ *   - Linear Plot: Generates data for y = m*x + b with support for both prefixed and
+ *     standard algebraic formats (e.g., "linear:" or "y=2x+3").
+ *   - Sine Plot: Plots y = A*sin(B*x + C) with customizable amplitude, frequency, and phase.
+ *   - Polar Plot: Generates plots for r = scale * |sin(multiplier*θ)| implementing polar coordinates.
+ *   - Exponential Plot: Works with formulas of the form y = a * e^(b*x) with optional algebraic
+ *     parsing (e.g., "exp:" or "y=2*e^(0.5x)").
+ *   - Logarithmic Plot: Plots y = a * log_b(x) with options for base specification (also supported
+ *     via "ln:" for natural logarithm).
+ *   - Export Options: Supports output as SVG, HTML embedding, JSON data for plots, CSV for tabular
+ *     data, ASCII art for console viewing, and plain text summaries.
+ *   - Customizable Visuals: Include grid overlays, axes, and a dealer's choice random color palette
+ *     for unique styling.
  *
- * CLI Usage Examples:
+ * Usage Examples (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
- *   $ node src/lib/main.js output.svg "linear:1,0,-10,10,1" "x^2+y-1=0" "sine:1,1,0,0,360,10" "polar:200,2,5"
- *   $ node src/lib/main.js output.svg "exp:1,0.1,-10,10,1" "quad:x^2+y-1=0"
- *   $ node src/lib/main.js output.svg "log:1,10,1,100,1" "quad:x^2+y-1=0"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * Installation:
- *   Install via npm with the required dependencies. See package.json for more details.
+ *   Install via npm. Refer to package.json for full dependency details.
  *
+ * Version: 0.1.1-72
  * License: MIT
  *
- * Updated:
- *   Version flag updated to 0.1.1-72 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
- *   Added dealer's choice option to randomize SVG color palettes per '--dealers-choice' flag.
+ * =============================================================================
  */
 
 import { fileURLToPath } from "url";

commit 800a8cc9ea38461ffd199ed6c13162329bcd9fc2
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Mon Feb 17 23:15:13 2025 +0000

    Fixed dealers choice by generating unique random colors for each plot series. https://github.com/xn-intenton-z2a/repository0/issues/147 (#148)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 4f8151b..838a4de 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -147,7 +147,7 @@ function plotLogarithmic() {
 // ----------------------------------
 
 function parseQuadratic(formulaStr) {
-  const parts = formulaStr.split(":" );
+  const parts = formulaStr.split(":");
   if (parts.length < 2) throw new Error("Invalid quadratic formula string");
   const params = parts[1].split(",").map(Number);
   const [a, b, c, xMin, xMax, step] = params;
@@ -551,20 +551,27 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Dealers Choice Implementation: if dealersChoice is true, assign a unique random color for each plot series
   function randomColor() {
-    // Updated to use 16777216 to include full spectrum up to #ffffff
     return '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');
   }
 
+  function generateUniqueColors(n) {
+    const colors = new Set();
+    while (colors.size < n) {
+      colors.add(randomColor());
+    }
+    return Array.from(colors);
+  }
+
   // Define color palettes for each plot type
   let quadraticColors, linearColors, sineColors, polarColors, exponentialColors, logarithmicColors;
   if (dealersChoice) {
-    // For dealers choice, assign a random color to each individual plot series
-    quadraticColors = quadraticPlots.map(() => randomColor());
-    linearColors = linearPlots.map(() => randomColor());
-    sineColors = sinePlots.map(() => randomColor());
-    polarColors = polarPlots.map(() => randomColor());
-    exponentialColors = exponentialPlots.map(() => randomColor());
-    logarithmicColors = logarithmicPlots.map(() => randomColor());
+    // For dealers choice, assign a unique random color to each individual plot series
+    quadraticColors = generateUniqueColors(quadraticPlots.length);
+    linearColors = generateUniqueColors(linearPlots.length);
+    sineColors = generateUniqueColors(sinePlots.length);
+    polarColors = generateUniqueColors(polarPlots.length);
+    exponentialColors = generateUniqueColors(exponentialPlots.length);
+    logarithmicColors = generateUniqueColors(logarithmicPlots.length);
   } else {
     quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
     linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];

commit 1e9159826f5ce0717fc7d318c97c9cf606b70778
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 16:19:28 2025 +0000

    Removed stray default text from HTML output and resolved dealers choice option styling. https://github.com/xn-intenton-z2a/repository0/issues/145 (#146)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 35e902a..4f8151b 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -22,7 +22,7 @@
  *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
  *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
  *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
- *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots. (Dealers Choice: each plot series gets its own random color)
+ *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots. (Dealer's Choice: each plot series gets its own random color)
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -809,7 +809,19 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
 function plotToHtml({ formulas = [], grid = false, dealersChoice = false } = {}) {
   const svgContent = plotToSvg({ formulas, grid, dealersChoice });
-  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n\ndefault\n${svgContent}\n</body>\n</html>`;
+  return `<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8">
+  <title>Equation Plot</title>
+  <style>
+    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }
+  </style>
+</head>
+<body>
+${svgContent}
+</body>
+</html>`;
 }
 
 // ----------------------------------

commit b6a6aac55cb7b8a3d89598144fead5c51804c016
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 15:55:09 2025 +0000

    Fixed dealers choice by updating randomColor function and ensuring dealers choice flag is correctly propagated. https://github.com/xn-intenton-z2a/repository0/issues/142 (#144)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 24579a8..35e902a 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -551,7 +551,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Dealers Choice Implementation: if dealersChoice is true, assign a unique random color for each plot series
   function randomColor() {
-    return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
+    // Updated to use 16777216 to include full spectrum up to #ffffff
+    return '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');
   }
 
   // Define color palettes for each plot type
@@ -808,8 +809,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
 function plotToHtml({ formulas = [], grid = false, dealersChoice = false } = {}) {
   const svgContent = plotToSvg({ formulas, grid, dealersChoice });
-  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n
-default\n${svgContent}\n</body>\n</html>`;
+  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n\ndefault\n${svgContent}\n</body>\n</html>`;
 }
 
 // ----------------------------------

commit 1dc41ac1cbadd2c72853c6c6ba28c149b870523e
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 15:45:25 2025 +0000

    Added clarifying comment for dealers choice implementation and ensured random color generation is clearly handled when --dealers-choice flag is used. https://github.com/xn-intenton-z2a/repository0/issues/140 (#143)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index b2b2f1b..24579a8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -22,7 +22,7 @@
  *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
  *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
  *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
- *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots.
+ *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots. (Dealers Choice: each plot series gets its own random color)
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -147,7 +147,7 @@ function plotLogarithmic() {
 // ----------------------------------
 
 function parseQuadratic(formulaStr) {
-  const parts = formulaStr.split(":");
+  const parts = formulaStr.split(":" );
   if (parts.length < 2) throw new Error("Invalid quadratic formula string");
   const params = parts[1].split(",").map(Number);
   const [a, b, c, xMin, xMax, step] = params;
@@ -549,7 +549,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
 
-  // Function to generate a random color in hex format
+  // Dealers Choice Implementation: if dealersChoice is true, assign a unique random color for each plot series
   function randomColor() {
     return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
   }

commit 664cbd25ff58326ffee7442fb85bc92e8b674e64
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 15:35:28 2025 +0000

    Updated dealers choice logic to assign a random color to each plot series when --dealers-choice flag is used. https://github.com/xn-intenton-z2a/repository0/issues/140 (#141)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 33066b6..b2b2f1b 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -554,32 +554,23 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
   }
 
-  // Dealers Choice: generate a full random color palette if the flag is enabled
-  function generateColorPalette(count) {
-    const palette = [];
-    for (let i = 0; i < count; i++) {
-      palette.push(randomColor());
-    }
-    return palette;
-  }
-
   // Define color palettes for each plot type
   let quadraticColors, linearColors, sineColors, polarColors, exponentialColors, logarithmicColors;
-  if (!dealersChoice) {
+  if (dealersChoice) {
+    // For dealers choice, assign a random color to each individual plot series
+    quadraticColors = quadraticPlots.map(() => randomColor());
+    linearColors = linearPlots.map(() => randomColor());
+    sineColors = sinePlots.map(() => randomColor());
+    polarColors = polarPlots.map(() => randomColor());
+    exponentialColors = exponentialPlots.map(() => randomColor());
+    logarithmicColors = logarithmicPlots.map(() => randomColor());
+  } else {
     quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
     linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
     sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
     polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
     exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
     logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
-  } else {
-    // Dealers choice enabled: generate random color palettes for each plot based on the number of formulas, ensuring at least 5 colors
-    quadraticColors = generateColorPalette(Math.max(5, quadraticPlots.length));
-    linearColors = generateColorPalette(Math.max(5, linearPlots.length));
-    sineColors = generateColorPalette(Math.max(5, sinePlots.length));
-    polarColors = generateColorPalette(Math.max(5, polarPlots.length));
-    exponentialColors = generateColorPalette(Math.max(5, exponentialPlots.length));
-    logarithmicColors = generateColorPalette(Math.max(5, logarithmicPlots.length));
   }
 
   // Helper to draw grid for rectangular slots

commit 0bbda887b64001c63ef859baf212e7376e75d386
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 15:19:12 2025 +0000

    Fixed dealers choice by ensuring a minimum of 5 randomized colors are generated for each plot type when the --dealers-choice flag is used. https://github.com/xn-intenton-z2a/repository0/issues/138 (#139)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 840b9b7..33066b6 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -573,13 +573,13 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
     logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
   } else {
-    // Dealers choice enabled: generate random color palettes for each plot based on the number of formulas
-    quadraticColors = generateColorPalette(quadraticPlots.length);
-    linearColors = generateColorPalette(linearPlots.length);
-    sineColors = generateColorPalette(sinePlots.length);
-    polarColors = generateColorPalette(polarPlots.length);
-    exponentialColors = generateColorPalette(exponentialPlots.length);
-    logarithmicColors = generateColorPalette(logarithmicPlots.length);
+    // Dealers choice enabled: generate random color palettes for each plot based on the number of formulas, ensuring at least 5 colors
+    quadraticColors = generateColorPalette(Math.max(5, quadraticPlots.length));
+    linearColors = generateColorPalette(Math.max(5, linearPlots.length));
+    sineColors = generateColorPalette(Math.max(5, sinePlots.length));
+    polarColors = generateColorPalette(Math.max(5, polarPlots.length));
+    exponentialColors = generateColorPalette(Math.max(5, exponentialPlots.length));
+    logarithmicColors = generateColorPalette(Math.max(5, logarithmicPlots.length));
   }
 
   // Helper to draw grid for rectangular slots

commit 057ec5a6ca01d94481102274cf6182aa70d433da
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 14:55:15 2025 +0000

    Fixed dealers choice flag by adding a dedicated palette generator for randomized color palettes. https://github.com/xn-intenton-z2a/repository0/issues/135 (#137)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index d6bae2a..840b9b7 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -10,7 +10,7 @@
  *   It supports different mathematical functions including quadratic, sine, polar, linear, exponential, and logarithmic equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'.
+ *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
  *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
@@ -554,6 +554,15 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
   }
 
+  // Dealers Choice: generate a full random color palette if the flag is enabled
+  function generateColorPalette(count) {
+    const palette = [];
+    for (let i = 0; i < count; i++) {
+      palette.push(randomColor());
+    }
+    return palette;
+  }
+
   // Define color palettes for each plot type
   let quadraticColors, linearColors, sineColors, polarColors, exponentialColors, logarithmicColors;
   if (!dealersChoice) {
@@ -564,13 +573,13 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
     logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
   } else {
-    // Dealers choice enabled: generate random colors for each plot based on the number of plots
-    quadraticColors = quadraticPlots.map(() => randomColor());
-    linearColors = linearPlots.map(() => randomColor());
-    sineColors = sinePlots.map(() => randomColor());
-    polarColors = polarPlots.map(() => randomColor());
-    exponentialColors = exponentialPlots.map(() => randomColor());
-    logarithmicColors = logarithmicPlots.map(() => randomColor());
+    // Dealers choice enabled: generate random color palettes for each plot based on the number of formulas
+    quadraticColors = generateColorPalette(quadraticPlots.length);
+    linearColors = generateColorPalette(linearPlots.length);
+    sineColors = generateColorPalette(sinePlots.length);
+    polarColors = generateColorPalette(polarPlots.length);
+    exponentialColors = generateColorPalette(exponentialPlots.length);
+    logarithmicColors = generateColorPalette(logarithmicPlots.length);
   }
 
   // Helper to draw grid for rectangular slots

commit ea3abf8872ef4f5c422cb4778018b925da3bbc75
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 14:45:29 2025 +0000

    Fixed dealers choice option by adding clarifying comments and ensuring dynamic random color palettes are generated. https://github.com/xn-intenton-z2a/repository0/issues/133 (#136)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index d70cfa5..d6bae2a 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -564,7 +564,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
     logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
   } else {
-    // Use dynamic random colors based on the number of plots in each type
+    // Dealers choice enabled: generate random colors for each plot based on the number of plots
     quadraticColors = quadraticPlots.map(() => randomColor());
     linearColors = linearPlots.map(() => randomColor());
     sineColors = sinePlots.map(() => randomColor());

commit 28b592e53cc5c8d0c70dd3c2e002f86536b51a96
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 14:35:56 2025 +0000

    Fixed dealers choice option by dynamically generating random color palettes based on the number of plots. https://github.com/xn-intenton-z2a/repository0/issues/133 (#134)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 6be0421..d70cfa5 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -564,12 +564,13 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
     logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
   } else {
-    quadraticColors = Array.from({ length: 5 }, () => randomColor());
-    linearColors = Array.from({ length: 5 }, () => randomColor());
-    sineColors = Array.from({ length: 5 }, () => randomColor());
-    polarColors = Array.from({ length: 5 }, () => randomColor());
-    exponentialColors = Array.from({ length: 5 }, () => randomColor());
-    logarithmicColors = Array.from({ length: 5 }, () => randomColor());
+    // Use dynamic random colors based on the number of plots in each type
+    quadraticColors = quadraticPlots.map(() => randomColor());
+    linearColors = linearPlots.map(() => randomColor());
+    sineColors = sinePlots.map(() => randomColor());
+    polarColors = polarPlots.map(() => randomColor());
+    exponentialColors = exponentialPlots.map(() => randomColor());
+    logarithmicColors = logarithmicPlots.map(() => randomColor());
   }
 
   // Helper to draw grid for rectangular slots
@@ -807,7 +808,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
 function plotToHtml({ formulas = [], grid = false, dealersChoice = false } = {}) {
   const svgContent = plotToSvg({ formulas, grid, dealersChoice });
-  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
+  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n
+default\n${svgContent}\n</body>\n</html>`;
 }
 
 // ----------------------------------

commit 0d68efcbf1fe965f8f2fb4f6cdbbd7de817022fb
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 14:18:51 2025 +0000

    Added --dealers-choice flag for randomized SVG color palettes and updated related functions accordingly. https://github.com/xn-intenton-z2a/repository0/issues/131 (#132)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index cdfd603..6be0421 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -22,6 +22,7 @@
  *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
  *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
  *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
+ *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots.
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -44,6 +45,7 @@
  *
  * Updated:
  *   Version flag updated to 0.1.1-72 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
+ *   Added dealer's choice option to randomize SVG color palettes per '--dealers-choice' flag.
  */
 
 import { fileURLToPath } from "url";
@@ -538,7 +540,7 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots, logarithmicPlots, gridEnabled = false) {
+function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots, logarithmicPlots, gridEnabled = false, dealersChoice = false) {
   // New SVG with 6 plots arranged in separate slots
   const width = 800;
   const height = 1500;
@@ -547,13 +549,28 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
 
+  // Function to generate a random color in hex format
+  function randomColor() {
+    return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
+  }
+
   // Define color palettes for each plot type
-  const quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
-  const linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
-  const sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
-  const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
-  const exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
-  const logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
+  let quadraticColors, linearColors, sineColors, polarColors, exponentialColors, logarithmicColors;
+  if (!dealersChoice) {
+    quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
+    linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
+    sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
+    polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
+    exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
+    logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
+  } else {
+    quadraticColors = Array.from({ length: 5 }, () => randomColor());
+    linearColors = Array.from({ length: 5 }, () => randomColor());
+    sineColors = Array.from({ length: 5 }, () => randomColor());
+    polarColors = Array.from({ length: 5 }, () => randomColor());
+    exponentialColors = Array.from({ length: 5 }, () => randomColor());
+    logarithmicColors = Array.from({ length: 5 }, () => randomColor());
+  }
 
   // Helper to draw grid for rectangular slots
   function drawRectGrid(x, y, w, h, vCount, hCount) {
@@ -788,8 +805,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 // HTML Generation Function
 // ----------------------------------
 
-function plotToHtml({ formulas = [], grid = false } = {}) {
-  const svgContent = plotToSvg({ formulas, grid });
+function plotToHtml({ formulas = [], grid = false, dealersChoice = false } = {}) {
+  const svgContent = plotToSvg({ formulas, grid, dealersChoice });
   return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
 }
 
@@ -797,9 +814,9 @@ function plotToHtml({ formulas = [], grid = false } = {}) {
 // Exported API Functions
 // ----------------------------------
 
-function plotToSvg({ formulas = [], grid = false } = {}) {
+function plotToSvg({ formulas = [], grid = false, dealersChoice = false } = {}) {
   const { quadratic, linear, sine, polar, exponential, logarithmic } = getPlotsFromFormulas(formulas);
-  return generateSvg(quadratic, linear, sine, polar, exponential, logarithmic, grid);
+  return generateSvg(quadratic, linear, sine, polar, exponential, logarithmic, grid, dealersChoice);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
@@ -978,6 +995,7 @@ Options:
   --ascii          Generate output as ASCII art instead of SVG
   --grid           Overlay grid lines on SVG plots
   --debug          Output internal parsed plot data for debugging
+  --dealers-choice Use randomized color palette for SVG plots
   --version        Show version information
   (output file extension .html will generate HTML output)
 
@@ -1000,6 +1018,7 @@ Formula String Formats:
   let isAscii = args.includes("--ascii");
   let isDebug = args.includes("--debug");
   let gridEnabled = args.includes("--grid");
+  let isDealersChoice = args.includes("--dealers-choice");
 
   const nonFormulaArgs = args.filter(
     (arg) =>
@@ -1010,7 +1029,8 @@ Formula String Formats:
       arg !== "--version" &&
       arg !== "--ascii" &&
       arg !== "--debug" &&
-      arg !== "--grid"
+      arg !== "--grid" &&
+      arg !== "--dealers-choice"
   );
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
@@ -1046,11 +1066,11 @@ Formula String Formats:
   } else if (isCsv) {
     fileContent = plotToCsv({ formulas: formulasList });
   } else if (isHtml) {
-    fileContent = plotToHtml({ formulas: formulasList, grid: gridEnabled });
+    fileContent = plotToHtml({ formulas: formulasList, grid: gridEnabled, dealersChoice: isDealersChoice });
   } else if (isAscii) {
     fileContent = plotToAscii({ formulas: formulasList });
   } else {
-    fileContent = plotToSvg({ formulas: formulasList, grid: gridEnabled });
+    fileContent = plotToSvg({ formulas: formulasList, grid: gridEnabled, dealersChoice: isDealersChoice });
   }
 
   try {

commit 0b1b110ed462d1d7167b3268b13ff48d03fb1e4d
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:54:42 2025 +0000

    Updated version flag in main.js to 0.1.1-72 to match build version. https://github.com/xn-intenton-z2a/repository0/issues/128 (#130)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index e3f743e..cdfd603 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -43,7 +43,7 @@
  * License: MIT
  *
  * Updated:
- *   Version flag updated to 0.1.1-71 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
+ *   Version flag updated to 0.1.1-72 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
  */
 
 import { fileURLToPath } from "url";
@@ -963,7 +963,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-71");
+    console.log("Equation Plotter Library version 0.1.1-72");
     process.exit(0);
   }
 

commit 4d5a0f855fbfb02cbb3e9530affe471a54f94a77
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:44:45 2025 +0000

    Updated version to 0.1.1-71 and ensured generic quadratic and exponential parsing functions are exported. https://github.com/xn-intenton-z2a/repository0/issues/126 (#129)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 743195f..e3f743e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -43,7 +43,7 @@
  * License: MIT
  *
  * Updated:
- *   Version flag updated to 0.1.1-68 and documentation improved per issue-123.
+ *   Version flag updated to 0.1.1-71 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
  */
 
 import { fileURLToPath } from "url";
@@ -963,7 +963,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-68");
+    console.log("Equation Plotter Library version 0.1.1-71");
     process.exit(0);
   }
 

commit d6fd4f51555615c9e021c874372d5b3301b44b72
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:35:05 2025 +0000

    Exported generic quadratic and exponential parsing functions to extend library usage. https://github.com/xn-intenton-z2a/repository0/issues/126 (#127)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index d9fbb70..743195f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1083,5 +1083,7 @@ export {
   plotPolar,
   plotLinear,
   plotExponential,
-  plotLogarithmic
+  plotLogarithmic,
+  parseGenericQuadratic,
+  parseGenericExponential
 };

commit 26175cfa44f9bdabcc6b3eb8fcd055c0ccd348f3
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:24:14 2025 +0000

    Update version flag and documentation per issue-123 with minor improvements. https://github.com/xn-intenton-z2a/repository0/issues/123 (#125)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 3dbbbf8..d9fbb70 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -41,6 +41,9 @@
  *   Install via npm with the required dependencies. See package.json for more details.
  *
  * License: MIT
+ *
+ * Updated:
+ *   Version flag updated to 0.1.1-68 and documentation improved per issue-123.
  */
 
 import { fileURLToPath } from "url";

commit ceb3b6515b7f5afa56e24205f9a88c011e142c46
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:13:39 2025 +0000

    Updated version flag to align with package version 0.1.1-68 and made minor documentation improvements. https://github.com/xn-intenton-z2a/repository0/issues/123 (#124)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 74b296a..3dbbbf8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -324,7 +324,7 @@ function parseGenericQuadratic(formulaStr) {
   }
 }
 
-// New: Parse exponential formula string in the format "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step"
+// New: Parse exponential formula string in the format "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step" or in algebraic form
 function parseExponential(formulaStr) {
   const parts = formulaStr.split(":");
   if (parts.length < 2) throw new Error("Invalid exponential formula string");
@@ -960,7 +960,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-64");
+    console.log("Equation Plotter Library version 0.1.1-68");
     process.exit(0);
   }
 

commit 323eaff017f8adfc2612daad2c0e02d6db2e1781
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 13:03:57 2025 +0000

    Update version output to 0.1.1-64 for improved versioning and clarity. https://github.com/xn-intenton-z2a/repository0/issues/120 (#122)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 4fcaa75..74b296a 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -960,7 +960,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-63");
+    console.log("Equation Plotter Library version 0.1.1-64");
     process.exit(0);
   }
 

commit 2c55a5104dcf370cf9f13152a7c1106824a7480f
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 12:53:51 2025 +0000

    Added SVG preserveAspectRatio attribute and updated version string for improved scaling and versioning. https://github.com/xn-intenton-z2a/repository0/issues/119 (#121)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index dfed3a0..4fcaa75 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -23,17 +23,6 @@
  *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
  *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
  *
- * API Functions:
- *   - plotToSvg(options): Returns an SVG string of the plots.
- *   - plotToAscii(options): Returns an ASCII art string for the sine plot.
- *   - plotToText(options): Returns a textual representation of plot points.
- *   - plotToJson(options): Returns a JSON string containing the plot data.
- *   - plotToCsv(options): Returns a CSV string with plot points.
- *   - plotToHtml(options): Returns an HTML string that embeds the SVG plot.
- *   - plotToFile(options): Saves the generated output to a file and returns the path.
- *   - plotFromString(formulaStr): Parses a formula string to generate plot points.
- *   - plotQuadratic, plotSine, plotPolar, plotLinear, plotExponential, plotLogarithmic: Generate plots with default parameters.
- *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -247,7 +236,7 @@ function parseGenericLinear(formulaStr) {
   return plotLinearParam({ m, b, xMin, xMax, step });
 }
 
-// New: Parse a generic quadratic formula in standard algebraic form with optional range, e.g., "y=x^2+2x+1" or "y=x^2+2x+1:-10,10,1"
+// New: Parse a generic quadratic formula in standard algebraic form with optional range, e.g., "y=x^2+2*x+1" or "y=x^2+2*x+1:-10,10,1"
 function parseGenericQuadratic(formulaStr) {
   let parts = formulaStr.split(":");
   let mainPart = parts[0].replace(/\s+/g, "");
@@ -551,7 +540,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   const width = 800;
   const height = 1500;
   let svg = `<?xml version="1.0" encoding="UTF-8"?>\n`;
-  svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n`;
+  // Added preserveAspectRatio attribute for better SVG scaling
+  svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
 
   // Define color palettes for each plot type
@@ -970,7 +960,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-62");
+    console.log("Equation Plotter Library version 0.1.1-63");
     process.exit(0);
   }
 

commit da42c24927ecdcbe7b61c47b6f7e05cffd124c9d
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 12:20:57 2025 +0000

    Added support for logarithmic plots and updated SVG layout API outputs and help documentation to extend features. https://github.com/xn-intenton-z2a/repository0/issues/117 (#118)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 68555e6..dfed3a0 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,7 +7,7 @@
  *
  * Description:
  *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
- *   It supports different mathematical functions including quadratic, sine, polar, linear, and now exponential equations.
+ *   It supports different mathematical functions including quadratic, sine, polar, linear, exponential, and logarithmic equations.
  *
  * Features:
  *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'.
@@ -15,7 +15,7 @@
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
  *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
  *   - Exponential Plot: Generates data for y = a * e^(b*x) with control over coefficients and x range. Accepts formulas in the format "exponential:a,b,xMin,xMax,step" or shortened as "exp:".
- *     Additionally, it now supports generic algebraic exponential formulas such as "y=2*e^(0.5x)" or with range "y=2*e^(0.5x):-10,10,1".
+ *   - Logarithmic Plot: Generates data for y = a*log_b(x) with control over coefficient, base, and x range. Accepts formulas in the format "log:a,base,xMin,xMax,step" or "ln:" (for natural logarithm with base e).
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
@@ -32,7 +32,7 @@
  *   - plotToHtml(options): Returns an HTML string that embeds the SVG plot.
  *   - plotToFile(options): Saves the generated output to a file and returns the path.
  *   - plotFromString(formulaStr): Parses a formula string to generate plot points.
- *   - plotQuadratic, plotSine, plotPolar, plotLinear, plotExponential: Generate plots with default parameters.
+ *   - plotQuadratic, plotSine, plotPolar, plotLinear, plotExponential, plotLogarithmic: Generate plots with default parameters.
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -42,6 +42,7 @@
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.svg "linear:1,0,-10,10,1" "x^2+y-1=0" "sine:1,1,0,0,360,10" "polar:200,2,5"
  *   $ node src/lib/main.js output.svg "exp:1,0.1,-10,10,1" "quad:x^2+y-1=0"
+ *   $ node src/lib/main.js output.svg "log:1,10,1,100,1" "quad:x^2+y-1=0"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
@@ -111,6 +112,17 @@ function plotExponentialParam({ a = 1, b = 1, xMin = -10, xMax = 10, step = 1 }
   return points;
 }
 
+function plotLogarithmicParam({ a = 1, base = Math.E, xMin = 1, xMax = 10, step = 1 } = {}) {
+  const points = [];
+  for (let x = xMin; x <= xMax; x += step) {
+    // Ensure x is positive for logarithm
+    if (x > 0) {
+      points.push({ x, y: a * (Math.log(x) / Math.log(base)) });
+    }
+  }
+  return points;
+}
+
 // Backward compatible wrappers
 function plotQuadratic() {
   return plotQuadraticParam();
@@ -132,6 +144,10 @@ function plotExponential() {
   return plotExponentialParam();
 }
 
+function plotLogarithmic() {
+  return plotLogarithmicParam();
+}
+
 // ----------------------------------
 // Formula Parsing Functions
 // ----------------------------------
@@ -358,6 +374,21 @@ function parseGenericExponential(formulaStr) {
   }
 }
 
+// New: Parse logarithmic formula string in the format "log:a,base,xMin,xMax,step" or "ln:a,base,xMin,xMax,step"
+function parseLogarithmic(formulaStr) {
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid logarithmic formula string");
+  const params = parts[1].split(",").map(Number);
+  const [a, base, xMin, xMax, step] = params;
+  return plotLogarithmicParam({
+    a: isNaN(a) ? 1 : a,
+    base: isNaN(base) ? Math.E : base,
+    xMin: isNaN(xMin) ? 1 : xMin,
+    xMax: isNaN(xMax) ? 10 : xMax,
+    step: isNaN(step) ? 1 : step
+  });
+}
+
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, "");
@@ -409,6 +440,7 @@ function invertExpression(expr) {
 // Delegate plotting based on formula string content
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
+  if (lowerStr.startsWith("log:") || lowerStr.startsWith("ln:")) return parseLogarithmic(formulaStr);
   if (formulaStr.includes(":")) {
     if (lowerStr.startsWith("quadratic:") || lowerStr.startsWith("quad:")) return parseQuadratic(formulaStr);
     if (lowerStr.startsWith("sine:")) return parseSine(formulaStr);
@@ -426,6 +458,13 @@ function plotFromString(formulaStr) {
           console.error("Error parsing exponential formula:", e.message);
           return [];
         }
+      } else if (formulaStr.toLowerCase().includes("log(")) {
+        try {
+          return parseLogarithmic(formulaStr);
+        } catch (e) {
+          console.error("Error parsing logarithmic formula:", e.message);
+          return [];
+        }
       } else if (!formulaStr.includes("x^2")) {
         try {
           return parseGenericLinear(formulaStr);
@@ -462,6 +501,7 @@ function getPlotsFromFormulas(formulas = []) {
   const polar = [];
   const linear = [];
   const exponential = [];
+  const logarithmic = [];
   formulas.forEach((formula) => {
     const lower = formula.toLowerCase();
     try {
@@ -471,10 +511,12 @@ function getPlotsFromFormulas(formulas = []) {
         sine.push(plotFromString(formula));
       } else if (lower.startsWith("polar:")) {
         polar.push(plotFromString(formula));
-      } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2") && !formula.toLowerCase().includes("e^"))) {
+      } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2") && !formula.toLowerCase().includes("e^") && !formula.toLowerCase().includes("log("))) {
         linear.push(plotFromString(formula));
       } else if (lower.startsWith("exponential:") || lower.startsWith("exp:") || (lower.startsWith("y=") && formula.toLowerCase().includes("e^"))) {
         exponential.push(plotFromString(formula));
+      } else if (lower.startsWith("log:") || lower.startsWith("ln:") || (lower.startsWith("y=") && formula.toLowerCase().includes("log("))) {
+        logarithmic.push(plotFromString(formula));
       } else {
         console.error("Unrecognized formula: " + formula);
       }
@@ -487,7 +529,8 @@ function getPlotsFromFormulas(formulas = []) {
   if (sine.length === 0) sine.push(plotSine());
   if (polar.length === 0) polar.push(plotPolar());
   if (exponential.length === 0) exponential.push(plotExponential());
-  return { quadratic, linear, sine, polar, exponential };
+  if (logarithmic.length === 0) logarithmic.push(plotLogarithmic());
+  return { quadratic, linear, sine, polar, exponential, logarithmic };
 }
 
 // ----------------------------------
@@ -503,10 +546,10 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots, gridEnabled = false) {
-  // New SVG with 5 plots arranged in separate slots
+function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots, logarithmicPlots, gridEnabled = false) {
+  // New SVG with 6 plots arranged in separate slots
   const width = 800;
-  const height = 1300;
+  const height = 1500;
   let svg = `<?xml version="1.0" encoding="UTF-8"?>\n`;
   svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
@@ -517,6 +560,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   const sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
   const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
   const exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
+  const logarithmicColors = ["brown", "saddlebrown", "peru", "chocolate", "tan"];
 
   // Helper to draw grid for rectangular slots
   function drawRectGrid(x, y, w, h, vCount, hCount) {
@@ -708,6 +752,40 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
+  svg += `\n`;
+
+  // Slot 6: Logarithmic Plot (Area: y=1230 to 1410)
+  svg += `  <text x="${width / 2}" y="1210" font-size="16" text-anchor="middle">Logarithmic Plot: y = a * log_b(x)</text>\n`;
+  if (gridEnabled) {
+    svg += drawRectGrid(50, 1230, 700, 180, 10, 5);
+    svg += drawRectAxes(50, 1230, 700, 180, Math.min(...logarithmicPlots.flat().map(p => p.x)), Math.max(...logarithmicPlots.flat().map(p => p.x)), Math.min(...logarithmicPlots.flat().map(p => p.y)), Math.max(...logarithmicPlots.flat().map(p => p.y)));
+  }
+  const logAllPoints = logarithmicPlots.flat();
+  const logValues = logAllPoints.map((p) => p.y);
+  let logMinY = Math.min(...logValues);
+  let logMaxY = Math.max(...logValues);
+  if (logMinY === logMaxY) {
+    logMinY -= 10;
+    logMaxY += 10;
+  }
+  const logAllX = logAllPoints.map((p) => p.x);
+  let logMinX = Math.min(...logAllX);
+  let logMaxX = Math.max(...logAllX);
+  if (logMinX === logMaxX) {
+    logMinX -= 10;
+    logMaxX += 10;
+  }
+  logarithmicPlots.forEach((points, idx) => {
+    const color = logarithmicColors[idx % logarithmicColors.length];
+    const pts = points
+      .map((p) => {
+        const px = 50 + ((p.x - logMinX) / (logMaxX - logMinX)) * 700;
+        const py = 1410 - ((p.y - logMinY) / (logMaxY - logMinY)) * 180;
+        return `${formatNumber(px)},${formatNumber(py)}`;
+      })
+      .join(" ");
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
 
   svg += "</svg>";
   return svg;
@@ -727,8 +805,8 @@ function plotToHtml({ formulas = [], grid = false } = {}) {
 // ----------------------------------
 
 function plotToSvg({ formulas = [], grid = false } = {}) {
-  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
-  return generateSvg(quadratic, linear, sine, polar, exponential, grid);
+  const { quadratic, linear, sine, polar, exponential, logarithmic } = getPlotsFromFormulas(formulas);
+  return generateSvg(quadratic, linear, sine, polar, exponential, logarithmic, grid);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
@@ -756,7 +834,7 @@ function plotToAscii({ formulas = [] } = {}) {
 }
 
 function plotToText({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential, logarithmic } = getPlotsFromFormulas(formulas);
   let output = "";
   output +=
     "Quadratic Plot:\n" +
@@ -787,23 +865,30 @@ function plotToText({ formulas = [] } = {}) {
     exponential
       .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
+    "\n\n";
+  output +=
+    "Logarithmic Plot:\n" +
+    logarithmic
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
+      .join("\n") +
     "\n";
   return output;
 }
 
 function plotToJson({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential, logarithmic } = getPlotsFromFormulas(formulas);
   return {
     quadratic,
     linear,
     sine,
     polar,
-    exponential
+    exponential,
+    logarithmic
   };
 }
 
 function plotToCsv({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential, logarithmic } = getPlotsFromFormulas(formulas);
   const lines = [];
   lines.push("Plot, Formula, x, y");
   lines.push("--Quadratic Plot--");
@@ -840,6 +925,13 @@ function plotToCsv({ formulas = [] } = {}) {
       lines.push(`Exponential,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
+  lines.push("");
+  lines.push("--Logarithmic Plot--");
+  logarithmic.forEach((points, i) => {
+    points.forEach((p) => {
+      lines.push(`Logarithmic,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
+    });
+  });
   return lines.join("\n");
 }
 
@@ -902,6 +994,7 @@ Formula String Formats:
   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
   Polar:     "polar:scale,multiplier,step[,degMin,degMax]"
   Exponential: "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step" or in algebraic form like "y=2*e^(0.5x)" (optionally with range e.g., "y=2*e^(0.5x):-10,10,1")
+  Logarithmic: "log:a,base,xMin,xMax,step" or "ln:a,base,xMin,xMax,step" (for natural log, use base as e or omit value to default to e)
 `
     );
     process.exit(0);
@@ -945,7 +1038,7 @@ Formula String Formats:
 
   // NEW: Warn if no formulas are provided
   if (formulasList.length === 0) {
-    console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, polar, and exponential plots.");
+    console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, polar, exponential, and logarithmic plots.");
   }
 
   // NEW: If debug flag is present, output the internal parsed plot data
@@ -996,5 +1089,6 @@ export {
   plotSine,
   plotPolar,
   plotLinear,
-  plotExponential
+  plotExponential,
+  plotLogarithmic
 };

commit c5cfa6bc6c7340bb7d4a5bfcb50891a69fb5e3a1
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 11:54:41 2025 +0000

    Improved exponential formula parsing by updating the regex to better support optional multiplication symbol. https://github.com/xn-intenton-z2a/repository0/issues/114 (#116)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 55cf53e..68555e6 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -346,7 +346,8 @@ function parseGenericExponential(formulaStr) {
     if (rangeParams.length > 1 && !isNaN(rangeParams[1])) xMax = rangeParams[1];
     if (rangeParams.length > 2 && !isNaN(rangeParams[2])) step = rangeParams[2];
   }
-  let regex = /^y=([+-]?\d*\.?\d+)?\*?e\^\(?([+-]?\d*\.?\d+)\*?x\)?/i;
+  // Improved regex to allow optional multiplication symbol before x
+  let regex = /^y=([+-]?\d*\.?\d+)?\*?e\^\(?([+-]?\d*\.?\d+)(?:\*?x)\)?/i;
   let match = exprPart.match(regex);
   if (match) {
     let a = match[1] ? parseFloat(match[1]) : 1;
@@ -595,7 +596,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     lMinY -= 10;
     lMaxY += 10;
   }
-  const lAllX = lAllPoints.map((p) => p.x);
+  const lAllX = linearPlots.flat().map((p) => p.x);
   let lMinX = Math.min(...lAllX);
   let lMaxX = Math.max(...lAllX);
   if (lMinX === lMaxX) {
@@ -629,7 +630,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     sMinY -= 1;
     sMaxY += 1;
   }
-  const sAllX = sAllPoints.map((p) => p.x);
+  const sAllX = sinePlots.flat().map((p) => p.x);
   let sMinX = Math.min(...sAllX);
   let sMaxX = Math.max(...sAllX);
   if (sMinX === sMaxX) {
@@ -689,7 +690,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     expMinY -= 10;
     expMaxY += 10;
   }
-  const expAllX = expAllPoints.map((p) => p.x);
+  const expAllX = exponentialPlots.flat().map((p) => p.x);
   let expMinX = Math.min(...expAllX);
   let expMaxX = Math.max(...expAllX);
   if (expMinX === expMaxX) {
@@ -749,7 +750,7 @@ function plotToAscii({ formulas = [] } = {}) {
     for (let col = 0; col < cols; col++) {
       if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
+    result += header + grid.map((row) => row.join(" ")).join("\n") + "\n\n";
   });
   return result;
 }

commit 61810b8b1d53ed67c3616d497dc3e0abb54bc73c
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 11:44:27 2025 +0000

    Update version flag output to version 0.1.1-62 for version consistency. https://github.com/xn-intenton-z2a/repository0/issues/112 (#115)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 413d6d9..55cf53e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -877,7 +877,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-61");
+    console.log("Equation Plotter Library version 0.1.1-62");
     process.exit(0);
   }
 

commit bd82707e920caeec44781b59ae8fefc7cece19ac
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 11:34:39 2025 +0000

    Updated version string to 0.1.1-61 for better version consistency. https://github.com/xn-intenton-z2a/repository0/issues/112 (#113)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 648219e..413d6d9 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -877,7 +877,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-59");
+    console.log("Equation Plotter Library version 0.1.1-61");
     process.exit(0);
   }
 

commit 594562ca82e74bbcc6612932792ab93bac6ccaef
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 11:18:08 2025 +0000

    Added axes lines in SVG plots for better visualization when grid is enabled. https://github.com/xn-intenton-z2a/repository0/issues/110 (#111)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 37815e6..648219e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -21,6 +21,7 @@
  *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
  *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
  *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
+ *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
  *
  * API Functions:
  *   - plotToSvg(options): Returns an SVG string of the plots.
@@ -530,10 +531,27 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     return grid;
   }
 
+  // Helper to draw axes lines for rectangular slots
+  function drawRectAxes(x, y, w, h, minX, maxX, minY, maxY) {
+    let axes = "";
+    // Draw horizontal axis if 0 is within y range
+    if (0 >= minY && 0 <= maxY) {
+      let zeroY = y + h - ((0 - minY) / (maxY - minY)) * h;
+      axes += `  <line x1="${formatNumber(x)}" y1="${formatNumber(zeroY)}" x2="${formatNumber(x + w)}" y2="${formatNumber(zeroY)}" stroke="black" stroke-width="1" />\n`;
+    }
+    // Draw vertical axis if 0 is within x range
+    if (0 >= minX && 0 <= maxX) {
+      let zeroX = x + ((0 - minX) / (maxX - minX)) * w;
+      axes += `  <line x1="${formatNumber(zeroX)}" y1="${formatNumber(y)}" x2="${formatNumber(zeroX)}" y2="${formatNumber(y + h)}" stroke="black" stroke-width="1" />\n`;
+    }
+    return axes;
+  }
+
   // Slot 1: Quadratic Plot (Area: y=50 to 230)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
   if (gridEnabled) {
     svg += drawRectGrid(50, 50, 700, 180, 10, 5);
+    svg += drawRectAxes(50, 50, 700, 180, Math.min(...quadraticPlots.flat().map(p => p.x)), Math.max(...quadraticPlots.flat().map(p => p.x)), Math.min(...quadraticPlots.flat().map(p => p.y)), Math.max(...quadraticPlots.flat().map(p => p.y)));
   }
   const qAllPoints = quadraticPlots.flat();
   const qValues = qAllPoints.map((p) => p.y);
@@ -567,6 +585,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `  <text x="${width / 2}" y="250" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
   if (gridEnabled) {
     svg += drawRectGrid(50, 270, 700, 180, 10, 5);
+    svg += drawRectAxes(50, 270, 700, 180, Math.min(...linearPlots.flat().map(p => p.x)), Math.max(...linearPlots.flat().map(p => p.x)), Math.min(...linearPlots.flat().map(p => p.y)), Math.max(...linearPlots.flat().map(p => p.y)));
   }
   const lAllPoints = linearPlots.flat();
   const lValues = lAllPoints.map((p) => p.y);
@@ -600,6 +619,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `  <text x="${width / 2}" y="470" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
   if (gridEnabled) {
     svg += drawRectGrid(50, 490, 700, 180, 10, 5);
+    svg += drawRectAxes(50, 490, 700, 180, Math.min(...sinePlots.flat().map(p => p.x)), Math.max(...sinePlots.flat().map(p => p.x)), Math.min(...sinePlots.flat().map(p => p.y)), Math.max(...sinePlots.flat().map(p => p.y)));
   }
   const sAllPoints = sinePlots.flat();
   const sValues = sAllPoints.map((p) => p.y);
@@ -638,6 +658,9 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
     [50, 100, 150].forEach(r => {
       svg += `  <circle cx="${formatNumber(centerX)}" cy="${formatNumber(centerY)}" r="${r}" stroke="#eee" stroke-width="1" fill="none" />\n`;
     });
+    // Draw cross axes for polar plot
+    svg += `  <line x1="${formatNumber(centerX - 150)}" y1="${formatNumber(centerY)}" x2="${formatNumber(centerX + 150)}" y2="${formatNumber(centerY)}" stroke="black" stroke-width="1" />\n`;
+    svg += `  <line x1="${formatNumber(centerX)}" y1="${formatNumber(centerY - 150)}" x2="${formatNumber(centerX)}" y2="${formatNumber(centerY + 150)}" stroke="black" stroke-width="1" />\n`;
   }
   polarPlots.forEach((points, idx) => {
     const color = polarColors[idx % polarColors.length];
@@ -656,6 +679,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `  <text x="${width / 2}" y="1000" font-size="16" text-anchor="middle">Exponential Plot: y = a * e^(b*x)</text>\n`;
   if (gridEnabled) {
     svg += drawRectGrid(50, 1020, 700, 180, 10, 5);
+    svg += drawRectAxes(50, 1020, 700, 180, Math.min(...exponentialPlots.flat().map(p => p.x)), Math.max(...exponentialPlots.flat().map(p => p.x)), Math.min(...exponentialPlots.flat().map(p => p.y)), Math.max(...exponentialPlots.flat().map(p => p.y)));
   }
   const expAllPoints = exponentialPlots.flat();
   const expValues = expAllPoints.map((p) => p.y);

commit eb797a6efa8959ac777f70f2ef8ed3593b329149
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 10:55:00 2025 +0000

    Updated version flag output to 0.1.1-59 to match package version. https://github.com/xn-intenton-z2a/repository0/issues/107 (#109)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 95c6bda..37815e6 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -853,7 +853,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-39");
+    console.log("Equation Plotter Library version 0.1.1-59");
     process.exit(0);
   }
 

commit 5e17a983a24c7c964d5149ac02b2a94a05178605
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 10:45:10 2025 +0000

    Implemented dynamic x-axis scaling for SVG plots to use actual data ranges. https://github.com/xn-intenton-z2a/repository0/issues/106 (#108)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 4ba31b8..95c6bda 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -535,20 +535,27 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   if (gridEnabled) {
     svg += drawRectGrid(50, 50, 700, 180, 10, 5);
   }
-  const qPoints = quadraticPlots.flat();
-  const qValues = qPoints.map((p) => p.y);
+  const qAllPoints = quadraticPlots.flat();
+  const qValues = qAllPoints.map((p) => p.y);
   let qMinY = Math.min(...qValues);
   let qMaxY = Math.max(...qValues);
   if (qMinY === qMaxY) {
     qMinY -= 10;
     qMaxY += 10;
   }
+  const qAllX = qAllPoints.map((p) => p.x);
+  let qMinX = Math.min(...qAllX);
+  let qMaxX = Math.max(...qAllX);
+  if (qMinX === qMaxX) {
+    qMinX -= 10;
+    qMaxX += 10;
+  }
   quadraticPlots.forEach((points, idx) => {
     const color = quadraticColors[idx % quadraticColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + ((p.x + 10) / 20) * 700; // assuming x in [-10,10]
-        const py = 230 - ((p.y - qMinY) / (qMaxY - qMinY)) * 180; // mapping to [50,230]
+        const px = 50 + ((p.x - qMinX) / (qMaxX - qMinX)) * 700;
+        const py = 230 - ((p.y - qMinY) / (qMaxY - qMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
@@ -561,19 +568,26 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   if (gridEnabled) {
     svg += drawRectGrid(50, 270, 700, 180, 10, 5);
   }
-  const lPoints = linearPlots.flat();
-  const lValues = lPoints.map((p) => p.y);
+  const lAllPoints = linearPlots.flat();
+  const lValues = lAllPoints.map((p) => p.y);
   let lMinY = Math.min(...lValues);
   let lMaxY = Math.max(...lValues);
   if (lMinY === lMaxY) {
     lMinY -= 10;
     lMaxY += 10;
   }
+  const lAllX = lAllPoints.map((p) => p.x);
+  let lMinX = Math.min(...lAllX);
+  let lMaxX = Math.max(...lAllX);
+  if (lMinX === lMaxX) {
+    lMinX -= 10;
+    lMaxX += 10;
+  }
   linearPlots.forEach((points, idx) => {
     const color = linearColors[idx % linearColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + ((p.x + 10) / 20) * 700;
+        const px = 50 + ((p.x - lMinX) / (lMaxX - lMinX)) * 700;
         const py = 450 - ((p.y - lMinY) / (lMaxY - lMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
@@ -587,19 +601,26 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   if (gridEnabled) {
     svg += drawRectGrid(50, 490, 700, 180, 10, 5);
   }
-  const sPoints = sinePlots.flat();
-  const sValues = sPoints.map((p) => p.y);
+  const sAllPoints = sinePlots.flat();
+  const sValues = sAllPoints.map((p) => p.y);
   let sMinY = Math.min(...sValues);
   let sMaxY = Math.max(...sValues);
   if (sMinY === sMaxY) {
     sMinY -= 1;
     sMaxY += 1;
   }
+  const sAllX = sAllPoints.map((p) => p.x);
+  let sMinX = Math.min(...sAllX);
+  let sMaxX = Math.max(...sAllX);
+  if (sMinX === sMaxX) {
+    sMinX -= 10;
+    sMaxX += 10;
+  }
   sinePlots.forEach((points, idx) => {
     const color = sineColors[idx % sineColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + (p.x / 360) * 700; // assuming x in [0,360]
+        const px = 50 + ((p.x - sMinX) / (sMaxX - sMinX)) * 700;
         const py = 670 - ((p.y - sMinY) / (sMaxY - sMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
@@ -636,19 +657,26 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   if (gridEnabled) {
     svg += drawRectGrid(50, 1020, 700, 180, 10, 5);
   }
-  const expPoints = exponentialPlots.flat();
-  const expValues = expPoints.map((p) => p.y);
+  const expAllPoints = exponentialPlots.flat();
+  const expValues = expAllPoints.map((p) => p.y);
   let expMinY = Math.min(...expValues);
   let expMaxY = Math.max(...expValues);
   if (expMinY === expMaxY) {
     expMinY -= 10;
     expMaxY += 10;
   }
+  const expAllX = expAllPoints.map((p) => p.x);
+  let expMinX = Math.min(...expAllX);
+  let expMaxX = Math.max(...expAllX);
+  if (expMinX === expMaxX) {
+    expMinX -= 10;
+    expMaxX += 10;
+  }
   exponentialPlots.forEach((points, idx) => {
     const color = exponentialColors[idx % exponentialColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + ((p.x + 10) / 20) * 700;
+        const px = 50 + ((p.x - expMinX) / (expMaxX - expMinX)) * 700;
         const py = 1200 - ((p.y - expMinY) / (expMaxY - expMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })

commit 0572dcff6152386cbe0505f2bb7ec3b736a5d393
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 10:17:59 2025 +0000

    Added grid overlay feature to SVG plots via a new --grid flag and passed through updated API functions. https://github.com/xn-intenton-z2a/repository0/issues/104 (#105)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 970b244..4ba31b8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -20,6 +20,7 @@
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
  *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
+ *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
  *
  * API Functions:
  *   - plotToSvg(options): Returns an SVG string of the plots.
@@ -500,7 +501,7 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots) {
+function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots, gridEnabled = false) {
   // New SVG with 5 plots arranged in separate slots
   const width = 800;
   const height = 1300;
@@ -515,8 +516,25 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
   const exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
 
+  // Helper to draw grid for rectangular slots
+  function drawRectGrid(x, y, w, h, vCount, hCount) {
+    let grid = "";
+    for (let i = 0; i <= vCount; i++) {
+      let gx = x + i * (w / vCount);
+      grid += `  <line x1="${formatNumber(gx)}" y1="${formatNumber(y)}" x2="${formatNumber(gx)}" y2="${formatNumber(y + h)}" stroke="#eee" stroke-width="1" />\n`;
+    }
+    for (let i = 0; i <= hCount; i++) {
+      let gy = y + i * (h / hCount);
+      grid += `  <line x1="${formatNumber(x)}" y1="${formatNumber(gy)}" x2="${formatNumber(x + w)}" y2="${formatNumber(gy)}" stroke="#eee" stroke-width="1" />\n`;
+    }
+    return grid;
+  }
+
   // Slot 1: Quadratic Plot (Area: y=50 to 230)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
+  if (gridEnabled) {
+    svg += drawRectGrid(50, 50, 700, 180, 10, 5);
+  }
   const qPoints = quadraticPlots.flat();
   const qValues = qPoints.map((p) => p.y);
   let qMinY = Math.min(...qValues);
@@ -540,6 +558,9 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Slot 2: Linear Plot (Area: y=270 to 450)
   svg += `  <text x="${width / 2}" y="250" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
+  if (gridEnabled) {
+    svg += drawRectGrid(50, 270, 700, 180, 10, 5);
+  }
   const lPoints = linearPlots.flat();
   const lValues = lPoints.map((p) => p.y);
   let lMinY = Math.min(...lValues);
@@ -563,6 +584,9 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Slot 3: Sine Plot (Area: y=490 to 670)
   svg += `  <text x="${width / 2}" y="470" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
+  if (gridEnabled) {
+    svg += drawRectGrid(50, 490, 700, 180, 10, 5);
+  }
   const sPoints = sinePlots.flat();
   const sValues = sPoints.map((p) => p.y);
   let sMinY = Math.min(...sValues);
@@ -588,6 +612,12 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
   svg += `  <text x="${width / 2}" y="690" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
   const centerX = width / 2;
   const centerY = 750;
+  if (gridEnabled) {
+    // Draw concentric circles as grid
+    [50, 100, 150].forEach(r => {
+      svg += `  <circle cx="${formatNumber(centerX)}" cy="${formatNumber(centerY)}" r="${r}" stroke="#eee" stroke-width="1" fill="none" />\n`;
+    });
+  }
   polarPlots.forEach((points, idx) => {
     const color = polarColors[idx % polarColors.length];
     const pts = points
@@ -603,6 +633,9 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Slot 5: Exponential Plot (Area: y=1020 to 1200)
   svg += `  <text x="${width / 2}" y="1000" font-size="16" text-anchor="middle">Exponential Plot: y = a * e^(b*x)</text>\n`;
+  if (gridEnabled) {
+    svg += drawRectGrid(50, 1020, 700, 180, 10, 5);
+  }
   const expPoints = exponentialPlots.flat();
   const expValues = expPoints.map((p) => p.y);
   let expMinY = Math.min(...expValues);
@@ -631,8 +664,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 // HTML Generation Function
 // ----------------------------------
 
-function plotToHtml({ formulas = [] } = {}) {
-  const svgContent = plotToSvg({ formulas });
+function plotToHtml({ formulas = [], grid = false } = {}) {
+  const svgContent = plotToSvg({ formulas, grid });
   return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
 }
 
@@ -640,9 +673,9 @@ function plotToHtml({ formulas = [] } = {}) {
 // Exported API Functions
 // ----------------------------------
 
-function plotToSvg({ formulas = [] } = {}) {
+function plotToSvg({ formulas = [], grid = false } = {}) {
   const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
-  return generateSvg(quadratic, linear, sine, polar, exponential);
+  return generateSvg(quadratic, linear, sine, polar, exponential, grid);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
@@ -805,6 +838,7 @@ Options:
   --json           Generate output as JSON instead of SVG
   --csv            Generate output as CSV instead of SVG
   --ascii          Generate output as ASCII art instead of SVG
+  --grid           Overlay grid lines on SVG plots
   --debug          Output internal parsed plot data for debugging
   --version        Show version information
   (output file extension .html will generate HTML output)
@@ -826,6 +860,7 @@ Formula String Formats:
   let isHtml = false;
   let isAscii = args.includes("--ascii");
   let isDebug = args.includes("--debug");
+  let gridEnabled = args.includes("--grid");
 
   const nonFormulaArgs = args.filter(
     (arg) =>
@@ -835,7 +870,8 @@ Formula String Formats:
       arg !== "--csv" &&
       arg !== "--version" &&
       arg !== "--ascii" &&
-      arg !== "--debug"
+      arg !== "--debug" &&
+      arg !== "--grid"
   );
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
@@ -871,11 +907,11 @@ Formula String Formats:
   } else if (isCsv) {
     fileContent = plotToCsv({ formulas: formulasList });
   } else if (isHtml) {
-    fileContent = plotToHtml({ formulas: formulasList });
+    fileContent = plotToHtml({ formulas: formulasList, grid: gridEnabled });
   } else if (isAscii) {
     fileContent = plotToAscii({ formulas: formulasList });
   } else {
-    fileContent = plotToSvg({ formulas: formulasList });
+    fileContent = plotToSvg({ formulas: formulasList, grid: gridEnabled });
   }
 
   try {

commit 3a0e02844ce65f7d9afa076b8fd91348c9f989f8
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 09:55:05 2025 +0000

    Extended exponential parsing to support generic algebraic form and updated help message accordingly. https://github.com/xn-intenton-z2a/repository0/issues/102 (#103)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 2af2a0c..970b244 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -15,6 +15,7 @@
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
  *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
  *   - Exponential Plot: Generates data for y = a * e^(b*x) with control over coefficients and x range. Accepts formulas in the format "exponential:a,b,xMin,xMax,step" or shortened as "exp:".
+ *     Additionally, it now supports generic algebraic exponential formulas such as "y=2*e^(0.5x)" or with range "y=2*e^(0.5x):-10,10,1".
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
@@ -331,6 +332,29 @@ function parseExponential(formulaStr) {
   });
 }
 
+// New: Parse a generic exponential formula in algebraic form, e.g., "y=2*e^(0.5x)" optionally with range e.g., "y=2*e^(0.5x):-10,10,1"
+function parseGenericExponential(formulaStr) {
+  let parts = formulaStr.split(":");
+  let exprPart = parts[0].replace(/\s+/g, "");
+  let rangePart = parts.length > 1 ? parts[1].trim() : "";
+  let xMin = -10, xMax = 10, step = 1;
+  if (rangePart) {
+    const rangeParams = rangePart.split(",").map(Number);
+    if (rangeParams.length > 0 && !isNaN(rangeParams[0])) xMin = rangeParams[0];
+    if (rangeParams.length > 1 && !isNaN(rangeParams[1])) xMax = rangeParams[1];
+    if (rangeParams.length > 2 && !isNaN(rangeParams[2])) step = rangeParams[2];
+  }
+  let regex = /^y=([+-]?\d*\.?\d+)?\*?e\^\(?([+-]?\d*\.?\d+)\*?x\)?/i;
+  let match = exprPart.match(regex);
+  if (match) {
+    let a = match[1] ? parseFloat(match[1]) : 1;
+    let b = parseFloat(match[2]);
+    return plotExponentialParam({ a, b, xMin, xMax, step });
+  } else {
+    throw new Error("Invalid generic exponential formula string");
+  }
+}
+
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, "");
@@ -391,13 +415,28 @@ function plotFromString(formulaStr) {
     console.error("Unknown prefixed formula type.");
     return [];
   } else if (formulaStr.includes("=")) {
-    // Added support for linear equations in algebraic form (e.g., "y=2x+3" or with range, "y=2x+3:-10,10,1") if no quadratic terms
-    if (lowerStr.startsWith("y=") && !formulaStr.includes("x^2")) {
-      try {
-        return parseGenericLinear(formulaStr);
-      } catch (e) {
-        console.error("Error parsing linear formula:", e.message);
-        return [];
+    if (lowerStr.startsWith("y=")) {
+      if (formulaStr.toLowerCase().includes("e^")) {
+        try {
+          return parseGenericExponential(formulaStr);
+        } catch (e) {
+          console.error("Error parsing exponential formula:", e.message);
+          return [];
+        }
+      } else if (!formulaStr.includes("x^2")) {
+        try {
+          return parseGenericLinear(formulaStr);
+        } catch (e) {
+          console.error("Error parsing linear formula:", e.message);
+          return [];
+        }
+      } else {
+        try {
+          return parseGenericQuadratic(formulaStr);
+        } catch (e) {
+          console.error("Error parsing generic quadratic formula:", e.message);
+          return [];
+        }
       }
     } else {
       try {
@@ -429,9 +468,9 @@ function getPlotsFromFormulas(formulas = []) {
         sine.push(plotFromString(formula));
       } else if (lower.startsWith("polar:")) {
         polar.push(plotFromString(formula));
-      } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2"))) {
+      } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2") && !formula.toLowerCase().includes("e^"))) {
         linear.push(plotFromString(formula));
-      } else if (lower.startsWith("exponential:") || lower.startsWith("exp:")) {
+      } else if (lower.startsWith("exponential:") || lower.startsWith("exp:") || (lower.startsWith("y=") && formula.toLowerCase().includes("e^"))) {
         exponential.push(plotFromString(formula));
       } else {
         console.error("Unrecognized formula: " + formula);
@@ -775,7 +814,7 @@ Formula String Formats:
   Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3" (or "y=2x+3:-10,10,1")
   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
   Polar:     "polar:scale,multiplier,step[,degMin,degMax]"
-  Exponential: "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step"
+  Exponential: "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step" or in algebraic form like "y=2*e^(0.5x)" (optionally with range e.g., "y=2*e^(0.5x):-10,10,1")
 `
     );
     process.exit(0);
@@ -820,8 +859,6 @@ Formula String Formats:
     console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, polar, and exponential plots.");
   }
 
-  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulasList);
-
   // NEW: If debug flag is present, output the internal parsed plot data
   if (isDebug) {
     console.log("\nDebug: Internal parsed plot data:");

commit 43c086504acf6319e4b18decb388cf3e34c816d6
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 09:34:40 2025 +0000

    Removed demo raw formula logs from main for cleaner CLI output. https://github.com/xn-intenton-z2a/repository0/issues/100 (#101)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 22c6e8f..2af2a0c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -822,33 +822,6 @@ Formula String Formats:
 
   const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulasList);
 
-  console.log("Demo: Raw formula strings and their parsed representations:");
-
-  const rawQuad = "x^2+y-1=0";
-  console.log(`Raw Formula: \"${rawQuad}\"`);
-  console.log("Parsed representation for Quadratic from Raw Formula:");
-  displayPlot("Quadratic from Raw Formula", plotFromString(rawQuad));
-
-  const rawLinear = "linear:1,0,-10,10,1";
-  console.log(`\nRaw Formula: \"${rawLinear}\"`);
-  console.log("Parsed representation for Linear from Raw Formula:");
-  displayPlot("Linear from Raw Formula", plotFromString(rawLinear));
-
-  const rawSine = "sine:1,1,0,0,360,10";
-  console.log(`\nRaw Formula: \"${rawSine}\"`);
-  console.log("Parsed ASCII Art for Sine:");
-  console.log(plotToAscii({ formulas: [rawSine] }));
-
-  const rawPolar = "polar:200,2,5";
-  console.log(`\nRaw Formula: \"${rawPolar}\"`);
-  console.log("Parsed representation for Polar from Raw Formula:");
-  displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
-
-  const rawExp = "exp:1,0.1,-10,10,1";
-  console.log(`\nRaw Formula: \"${rawExp}\"`);
-  console.log("Parsed representation for Exponential from Raw Formula:");
-  displayPlot("Exponential from Raw Formula", plotFromString(rawExp));
-
   // NEW: If debug flag is present, output the internal parsed plot data
   if (isDebug) {
     console.log("\nDebug: Internal parsed plot data:");

commit 6461efb084831dd8b1cef6ba122a0cdcfa78d3cb
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 09:18:32 2025 +0000

    Added --debug flag to output internal parsed plot data for improved debugging and feature extension. https://github.com/xn-intenton-z2a/repository0/issues/98 (#99)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 242b67f..22c6e8f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -18,6 +18,7 @@
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
+ *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
  *
  * API Functions:
  *   - plotToSvg(options): Returns an SVG string of the plots.
@@ -624,8 +625,7 @@ function plotToAscii({ formulas = [] } = {}) {
     for (let col = 0; col < cols; col++) {
       if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map((row) => row.join(""))
-      .join("\n") + "\n\n";
+    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
   });
   return result;
 }
@@ -766,6 +766,7 @@ Options:
   --json           Generate output as JSON instead of SVG
   --csv            Generate output as CSV instead of SVG
   --ascii          Generate output as ASCII art instead of SVG
+  --debug          Output internal parsed plot data for debugging
   --version        Show version information
   (output file extension .html will generate HTML output)
 
@@ -785,6 +786,7 @@ Formula String Formats:
   let isCsv = args.includes("--csv");
   let isHtml = false;
   let isAscii = args.includes("--ascii");
+  let isDebug = args.includes("--debug");
 
   const nonFormulaArgs = args.filter(
     (arg) =>
@@ -793,7 +795,8 @@ Formula String Formats:
       arg !== "--json" &&
       arg !== "--csv" &&
       arg !== "--version" &&
-      arg !== "--ascii"
+      arg !== "--ascii" &&
+      arg !== "--debug"
   );
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
@@ -846,6 +849,12 @@ Formula String Formats:
   console.log("Parsed representation for Exponential from Raw Formula:");
   displayPlot("Exponential from Raw Formula", plotFromString(rawExp));
 
+  // NEW: If debug flag is present, output the internal parsed plot data
+  if (isDebug) {
+    console.log("\nDebug: Internal parsed plot data:");
+    console.log(JSON.stringify(getPlotsFromFormulas(formulasList), null, 2));
+  }
+
   let fileContent = "";
   if (isJson) {
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);

commit 8ba5c63f1d0141ba4ae6c4ea08fa481c6938499c
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 08:54:53 2025 +0000

    Added exponential plotting feature and updated SVG layout and CLI help to support exponential plots. https://github.com/xn-intenton-z2a/repository0/issues/96 (#97)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 44b5906..242b67f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,16 +7,17 @@
  *
  * Description:
  *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
- *   It supports different mathematical functions including quadratic, sine, polar, and now linear equations.
+ *   It supports different mathematical functions including quadratic, sine, polar, linear, and now exponential equations.
  *
  * Features:
  *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'.
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
- *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Now supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
+ *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
+ *   - Exponential Plot: Generates data for y = a * e^(b*x) with control over coefficients and x range. Accepts formulas in the format "exponential:a,b,xMin,xMax,step" or shortened as "exp:".
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
- *   - Multiple Formulas per Plot Type: Now supports multiple formulas for each plot type, each rendered with a distinct color.
+ *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
  *
  * API Functions:
  *   - plotToSvg(options): Returns an SVG string of the plots.
@@ -27,7 +28,7 @@
  *   - plotToHtml(options): Returns an HTML string that embeds the SVG plot.
  *   - plotToFile(options): Saves the generated output to a file and returns the path.
  *   - plotFromString(formulaStr): Parses a formula string to generate plot points.
- *   - plotQuadratic, plotSine, plotPolar, plotLinear: Generate plots with default parameters.
+ *   - plotQuadratic, plotSine, plotPolar, plotLinear, plotExponential: Generate plots with default parameters.
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -36,6 +37,7 @@
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.svg "linear:1,0,-10,10,1" "x^2+y-1=0" "sine:1,1,0,0,360,10" "polar:200,2,5"
+ *   $ node src/lib/main.js output.svg "exp:1,0.1,-10,10,1" "quad:x^2+y-1=0"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
@@ -97,6 +99,14 @@ function plotLinearParam({ m = 1, b = 0, xMin = -10, xMax = 10, step = 1 } = {})
   return points;
 }
 
+function plotExponentialParam({ a = 1, b = 1, xMin = -10, xMax = 10, step = 1 } = {}) {
+  const points = [];
+  for (let x = xMin; x <= xMax; x += step) {
+    points.push({ x, y: a * Math.exp(b * x) });
+  }
+  return points;
+}
+
 // Backward compatible wrappers
 function plotQuadratic() {
   return plotQuadraticParam();
@@ -114,6 +124,10 @@ function plotLinear() {
   return plotLinearParam();
 }
 
+function plotExponential() {
+  return plotExponentialParam();
+}
+
 // ----------------------------------
 // Formula Parsing Functions
 // ----------------------------------
@@ -129,7 +143,7 @@ function parseQuadratic(formulaStr) {
     c: isNaN(c) ? 0 : c,
     xMin: isNaN(xMin) ? -10 : xMin,
     xMax: isNaN(xMax) ? 10 : xMax,
-    step: isNaN(step) ? 1 : step,
+    step: isNaN(step) ? 1 : step
   });
 }
 
@@ -144,7 +158,7 @@ function parseSine(formulaStr) {
     phase: isNaN(phase) ? 0 : phase,
     xMin: isNaN(xMin) ? 0 : xMin,
     xMax: isNaN(xMax) ? 360 : xMax,
-    step: isNaN(step) ? 10 : step,
+    step: isNaN(step) ? 10 : step
   });
 }
 
@@ -177,7 +191,7 @@ function parseLinear(formulaStr) {
     b: isNaN(b) ? 0 : b,
     xMin: isNaN(xMin) ? -10 : xMin,
     xMax: isNaN(xMax) ? 10 : xMax,
-    step: isNaN(step) ? 1 : step,
+    step: isNaN(step) ? 1 : step
   });
 }
 
@@ -213,55 +227,7 @@ function parseGenericLinear(formulaStr) {
   return plotLinearParam({ m, b, xMin, xMax, step });
 }
 
-// Extract quadratic coefficients from an expression of form ax^2+bx+c
-function extractQuadraticCoefficients(expr) {
-  expr = expr.replace(/\s+/g, "");
-  // New improvement: normalize expression by replacing '+-' with '-'
-  expr = expr.replace(/\+\-/g, "-");
-  let a = 0;
-  let b = 0;
-  let c = 0;
-
-  const aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
-  if (aMatch) {
-    const coeff = aMatch[1];
-    if (coeff === "" || coeff === "+") a = 1;
-    else if (coeff === "-") a = -1;
-    else a = parseFloat(coeff);
-    expr = expr.replace(aMatch[0], "");
-  }
-
-  const bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
-  if (bMatch) {
-    const coeff = bMatch[1];
-    if (coeff === "" || coeff === "+") b = 1;
-    else if (coeff === "-") b = -1;
-    else b = parseFloat(coeff);
-    expr = expr.replace(bMatch[0], "");
-  }
-
-  const constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
-  if (constantMatches) {
-    c = constantMatches.reduce((sum, numStr) => sum + parseFloat(numStr), 0);
-  }
-
-  return { a, b, c };
-}
-
-// Helper function to invert an algebraic expression consisting of additions and subtractions.
-function invertExpression(expr) {
-  const tokens = expr.match(/[+-]?[^+-]+/g) || [];
-  const inverted = tokens
-    .map((token) => {
-      token = token.trim();
-      if (token.startsWith("-")) return "+" + token.slice(1);
-      else return "-" + token;
-    })
-    .join("");
-  return inverted[0] === "+" ? inverted.slice(1) : inverted;
-}
-
-// Parse a generic quadratic formula in standard algebraic form with optional range, e.g., "y=x^2+2x+1" or "y=x^2+2x+1:-10,10,1"
+// New: Parse a generic quadratic formula in standard algebraic form with optional range, e.g., "y=x^2+2x+1" or "y=x^2+2x+1:-10,10,1"
 function parseGenericQuadratic(formulaStr) {
   let parts = formulaStr.split(":");
   let mainPart = parts[0].replace(/\s+/g, "");
@@ -294,7 +260,7 @@ function parseGenericQuadratic(formulaStr) {
       c: -coeffs.c / yCoeff,
       xMin,
       xMax,
-      step,
+      step
     });
   } else {
     const partsEq = mainPart.split("=");
@@ -319,7 +285,7 @@ function parseGenericQuadratic(formulaStr) {
         c: (constantRight - coeffs.c) / yCoeff,
         xMin,
         xMax,
-        step,
+        step
       });
     } else if (right.includes("y")) {
       const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
@@ -339,7 +305,7 @@ function parseGenericQuadratic(formulaStr) {
         c: (constantLeft - coeffs.c) / yCoeff,
         xMin,
         xMax,
-        step,
+        step
       });
     } else {
       const nonYPart = left;
@@ -349,6 +315,69 @@ function parseGenericQuadratic(formulaStr) {
   }
 }
 
+// New: Parse exponential formula string in the format "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step"
+function parseExponential(formulaStr) {
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid exponential formula string");
+  const params = parts[1].split(",").map(Number);
+  const [a, b, xMin, xMax, step] = params;
+  return plotExponentialParam({
+    a: isNaN(a) ? 1 : a,
+    b: isNaN(b) ? 1 : b,
+    xMin: isNaN(xMin) ? -10 : xMin,
+    xMax: isNaN(xMax) ? 10 : xMax,
+    step: isNaN(step) ? 1 : step
+  });
+}
+
+// Extract quadratic coefficients from an expression of form ax^2+bx+c
+function extractQuadraticCoefficients(expr) {
+  expr = expr.replace(/\s+/g, "");
+  // New improvement: normalize expression by replacing '+-' with '-'
+  expr = expr.replace(/\+\-/g, "-");
+  let a = 0;
+  let b = 0;
+  let c = 0;
+
+  const aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
+  if (aMatch) {
+    const coeff = aMatch[1];
+    if (coeff === "" || coeff === "+") a = 1;
+    else if (coeff === "-") a = -1;
+    else a = parseFloat(coeff);
+    expr = expr.replace(aMatch[0], "");
+  }
+
+  const bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
+  if (bMatch) {
+    const coeff = bMatch[1];
+    if (coeff === "" || coeff === "+") b = 1;
+    else if (coeff === "-") b = -1;
+    else b = parseFloat(coeff);
+    expr = expr.replace(bMatch[0], "");
+  }
+
+  const constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
+  if (constantMatches) {
+    c = constantMatches.reduce((sum, numStr) => sum + parseFloat(numStr), 0);
+  }
+
+  return { a, b, c };
+}
+
+// Helper function to invert an algebraic expression consisting of additions and subtractions.
+function invertExpression(expr) {
+  const tokens = expr.match(/[+-]?[^+-]+/g) || [];
+  const inverted = tokens
+    .map((token) => {
+      token = token.trim();
+      if (token.startsWith("-")) return "+" + token.slice(1);
+      else return "-" + token;
+    })
+    .join("");
+  return inverted[0] === "+" ? inverted.slice(1) : inverted;
+}
+
 // Delegate plotting based on formula string content
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
@@ -357,6 +386,7 @@ function plotFromString(formulaStr) {
     if (lowerStr.startsWith("sine:")) return parseSine(formulaStr);
     if (lowerStr.startsWith("polar:")) return parsePolar(formulaStr);
     if (lowerStr.startsWith("linear:")) return parseLinear(formulaStr);
+    if (lowerStr.startsWith("exponential:") || lowerStr.startsWith("exp:")) return parseExponential(formulaStr);
     console.error("Unknown prefixed formula type.");
     return [];
   } else if (formulaStr.includes("=")) {
@@ -388,6 +418,7 @@ function getPlotsFromFormulas(formulas = []) {
   const sine = [];
   const polar = [];
   const linear = [];
+  const exponential = [];
   formulas.forEach((formula) => {
     const lower = formula.toLowerCase();
     try {
@@ -399,6 +430,8 @@ function getPlotsFromFormulas(formulas = []) {
         polar.push(plotFromString(formula));
       } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2"))) {
         linear.push(plotFromString(formula));
+      } else if (lower.startsWith("exponential:") || lower.startsWith("exp:")) {
+        exponential.push(plotFromString(formula));
       } else {
         console.error("Unrecognized formula: " + formula);
       }
@@ -410,7 +443,8 @@ function getPlotsFromFormulas(formulas = []) {
   if (linear.length === 0) linear.push(plotLinear());
   if (sine.length === 0) sine.push(plotSine());
   if (polar.length === 0) polar.push(plotPolar());
-  return { quadratic, linear, sine, polar };
+  if (exponential.length === 0) exponential.push(plotExponential());
+  return { quadratic, linear, sine, polar, exponential };
 }
 
 // ----------------------------------
@@ -426,10 +460,10 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
-  // New SVG with 4 plots arranged in separate slots
+function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponentialPlots) {
+  // New SVG with 5 plots arranged in separate slots
   const width = 800;
-  const height = 1000;
+  const height = 1300;
   let svg = `<?xml version="1.0" encoding="UTF-8"?>\n`;
   svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
@@ -439,8 +473,9 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   const linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
   const sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
   const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
+  const exponentialColors = ["magenta", "darkmagenta", "violet", "indigo", "purple"];
 
-  // Quadratic Plot (Slot 1)
+  // Slot 1: Quadratic Plot (Area: y=50 to 230)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
   const qPoints = quadraticPlots.flat();
   const qValues = qPoints.map((p) => p.y);
@@ -450,13 +485,12 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
     qMinY -= 10;
     qMaxY += 10;
   }
-  // Slot for quadratic: y range mapped from 50 to 250
   quadraticPlots.forEach((points, idx) => {
     const color = quadraticColors[idx % quadraticColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + ((p.x + 10) / 20) * 700;
-        const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
+        const px = 50 + ((p.x + 10) / 20) * 700; // assuming x in [-10,10]
+        const py = 230 - ((p.y - qMinY) / (qMaxY - qMinY)) * 180; // mapping to [50,230]
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
@@ -464,8 +498,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Linear Plot (Slot 2)
-  svg += `  <text x="${width / 2}" y="260" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
+  // Slot 2: Linear Plot (Area: y=270 to 450)
+  svg += `  <text x="${width / 2}" y="250" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
   const lPoints = linearPlots.flat();
   const lValues = lPoints.map((p) => p.y);
   let lMinY = Math.min(...lValues);
@@ -479,7 +513,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
     const pts = points
       .map((p) => {
         const px = 50 + ((p.x + 10) / 20) * 700;
-        const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
+        const py = 450 - ((p.y - lMinY) / (lMaxY - lMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
@@ -487,8 +521,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Sine Plot (Slot 3)
-  svg += `  <text x="${width / 2}" y="490" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
+  // Slot 3: Sine Plot (Area: y=490 to 670)
+  svg += `  <text x="${width / 2}" y="470" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
   const sPoints = sinePlots.flat();
   const sValues = sPoints.map((p) => p.y);
   let sMinY = Math.min(...sValues);
@@ -501,8 +535,8 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
     const color = sineColors[idx % sineColors.length];
     const pts = points
       .map((p) => {
-        const px = 50 + (p.x / 360) * 700;
-        const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
+        const px = 50 + (p.x / 360) * 700; // assuming x in [0,360]
+        const py = 670 - ((p.y - sMinY) / (sMaxY - sMinY)) * 180;
         return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
@@ -510,10 +544,10 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Polar Plot (Slot 4: centered)
-  svg += `  <text x="${width / 2}" y="730" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
+  // Slot 4: Polar Plot (centered in slot, use center at (400,750))
+  svg += `  <text x="${width / 2}" y="690" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
   const centerX = width / 2;
-  const centerY = 850;
+  const centerY = 750;
   polarPlots.forEach((points, idx) => {
     const color = polarColors[idx % polarColors.length];
     const pts = points
@@ -525,6 +559,30 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
+  svg += `\n`;
+
+  // Slot 5: Exponential Plot (Area: y=1020 to 1200)
+  svg += `  <text x="${width / 2}" y="1000" font-size="16" text-anchor="middle">Exponential Plot: y = a * e^(b*x)</text>\n`;
+  const expPoints = exponentialPlots.flat();
+  const expValues = expPoints.map((p) => p.y);
+  let expMinY = Math.min(...expValues);
+  let expMaxY = Math.max(...expValues);
+  if (expMinY === expMaxY) {
+    expMinY -= 10;
+    expMaxY += 10;
+  }
+  exponentialPlots.forEach((points, idx) => {
+    const color = exponentialColors[idx % exponentialColors.length];
+    const pts = points
+      .map((p) => {
+        const px = 50 + ((p.x + 10) / 20) * 700;
+        const py = 1200 - ((p.y - expMinY) / (expMaxY - expMinY)) * 180;
+        return `${formatNumber(px)},${formatNumber(py)}`;
+      })
+      .join(" ");
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
+
   svg += "</svg>";
   return svg;
 }
@@ -543,8 +601,8 @@ function plotToHtml({ formulas = [] } = {}) {
 // ----------------------------------
 
 function plotToSvg({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
-  return generateSvg(quadratic, linear, sine, polar);
+  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
+  return generateSvg(quadratic, linear, sine, polar, exponential);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
@@ -573,7 +631,7 @@ function plotToAscii({ formulas = [] } = {}) {
 }
 
 function plotToText({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
   let output = "";
   output +=
     "Quadratic Plot:\n" +
@@ -598,22 +656,29 @@ function plotToText({ formulas = [] } = {}) {
     polar
       .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
+    "\n\n";
+  output +=
+    "Exponential Plot:\n" +
+    exponential
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
+      .join("\n") +
     "\n";
   return output;
 }
 
 function plotToJson({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
   return {
     quadratic,
     linear,
     sine,
     polar,
+    exponential
   };
 }
 
 function plotToCsv({ formulas = [] } = {}) {
-  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulas);
   const lines = [];
   lines.push("Plot, Formula, x, y");
   lines.push("--Quadratic Plot--");
@@ -643,6 +708,13 @@ function plotToCsv({ formulas = [] } = {}) {
       lines.push(`Polar,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
+  lines.push("");
+  lines.push("--Exponential Plot--");
+  exponential.forEach((points, i) => {
+    points.forEach((p) => {
+      lines.push(`Exponential,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
+    });
+  });
   return lines.join("\n");
 }
 
@@ -702,6 +774,7 @@ Formula String Formats:
   Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3" (or "y=2x+3:-10,10,1")
   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
   Polar:     "polar:scale,multiplier,step[,degMin,degMax]"
+  Exponential: "exponential:a,b,xMin,xMax,step" or "exp:a,b,xMin,xMax,step"
 `
     );
     process.exit(0);
@@ -741,10 +814,10 @@ Formula String Formats:
 
   // NEW: Warn if no formulas are provided
   if (formulasList.length === 0) {
-    console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, and polar plots.");
+    console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, polar, and exponential plots.");
   }
 
-  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulasList);
+  const { quadratic, linear, sine, polar, exponential } = getPlotsFromFormulas(formulasList);
 
   console.log("Demo: Raw formula strings and their parsed representations:");
 
@@ -768,6 +841,11 @@ Formula String Formats:
   console.log("Parsed representation for Polar from Raw Formula:");
   displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
 
+  const rawExp = "exp:1,0.1,-10,10,1";
+  console.log(`\nRaw Formula: \"${rawExp}\"`);
+  console.log("Parsed representation for Exponential from Raw Formula:");
+  displayPlot("Exponential from Raw Formula", plotFromString(rawExp));
+
   let fileContent = "";
   if (isJson) {
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);
@@ -810,4 +888,5 @@ export {
   plotSine,
   plotPolar,
   plotLinear,
+  plotExponential
 };

commit 53c778d459368a11fc92949890ad786002ab70f9
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 08:38:41 2025 +0000

    Added a warning message in the CLI when no formulas are provided to indicate default plots are used. https://github.com/xn-intenton-z2a/repository0/issues/94 (#95)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 930ce86..44b5906 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -738,6 +738,12 @@ Formula String Formats:
 
   // Collect formulas from arguments
   const formulasList = args.filter((arg) => arg.includes(":") || arg.includes("="));
+
+  // NEW: Warn if no formulas are provided
+  if (formulasList.length === 0) {
+    console.log("No formulas provided. Using default plot functions for quadratic, linear, sine, and polar plots.");
+  }
+
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulasList);
 
   console.log("Demo: Raw formula strings and their parsed representations:");

commit 69f2fbdedf0c04299130e723363dc48d22e86fc8
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 08:18:39 2025 +0000

    Improved quadratic coefficient extraction by normalizing - patterns to fix sign discrepancies in parsed equations. https://github.com/xn-intenton-z2a/repository0/issues/92 (#93)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index c24e61c..930ce86 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -216,6 +216,8 @@ function parseGenericLinear(formulaStr) {
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, "");
+  // New improvement: normalize expression by replacing '+-' with '-'
+  expr = expr.replace(/\+\-/g, "-");
   let a = 0;
   let b = 0;
   let c = 0;

commit 813d1ab22d86a6985b91e8f3bf7e8763346bcab8
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 07:54:35 2025 +0000

    Refactored formula classification in getPlotsFromFormulas and updated help text to support quad prefix for quadratic formulas. https://github.com/xn-intenton-z2a/repository0/issues/89 (#91)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9e66927..c24e61c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -10,7 +10,7 @@
  *   It supports different mathematical functions including quadratic, sine, polar, and now linear equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings.
+ *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'.
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
  *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Now supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
@@ -351,7 +351,7 @@ function parseGenericQuadratic(formulaStr) {
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
   if (formulaStr.includes(":")) {
-    if (lowerStr.startsWith("quadratic:")) return parseQuadratic(formulaStr);
+    if (lowerStr.startsWith("quadratic:") || lowerStr.startsWith("quad:")) return parseQuadratic(formulaStr);
     if (lowerStr.startsWith("sine:")) return parseSine(formulaStr);
     if (lowerStr.startsWith("polar:")) return parsePolar(formulaStr);
     if (lowerStr.startsWith("linear:")) return parseLinear(formulaStr);
@@ -389,17 +389,16 @@ function getPlotsFromFormulas(formulas = []) {
   formulas.forEach((formula) => {
     const lower = formula.toLowerCase();
     try {
-      if (lower.startsWith("quadratic:") || (!formula.includes(":") && formula.includes("=") && (formula.includes("x^2") || formula.includes("y") === false))) {
+      if (lower.startsWith("quad:") || lower.startsWith("quadratic:") || (formula.includes("x^2") && formula.includes("="))) {
         quadratic.push(plotFromString(formula));
       } else if (lower.startsWith("sine:")) {
         sine.push(plotFromString(formula));
       } else if (lower.startsWith("polar:")) {
         polar.push(plotFromString(formula));
-      } else if (lower.startsWith("linear:")) {
-        linear.push(plotFromString(formula));
-      } else if (formula.includes("=") && lower.startsWith("y=") && !formula.includes("x^2")) {
-        // Treat as generic linear equation
+      } else if (lower.startsWith("linear:") || (lower.startsWith("y=") && !formula.includes("x^2"))) {
         linear.push(plotFromString(formula));
+      } else {
+        console.error("Unrecognized formula: " + formula);
       }
     } catch (e) {
       console.error("Error parsing formula:", formula, e.message);
@@ -686,7 +685,22 @@ function main() {
 
   if (args.includes("--help") || args.includes("-h")) {
     console.log(
-      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0" (or with range e.g., "y=x^2+2*x+1:-10,10,1")\n  Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3" (or "y=2x+3:-10,10,1")\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]
+
+Options:
+  --help, -h       Show this help message
+  --json           Generate output as JSON instead of SVG
+  --csv            Generate output as CSV instead of SVG
+  --ascii          Generate output as ASCII art instead of SVG
+  --version        Show version information
+  (output file extension .html will generate HTML output)
+
+Formula String Formats:
+  Quadratic: "quad:y=x^2+2*x+1" or "quadratic:y=x^2+2*x+1" or "x^2+y-1=0" (or with range e.g., "y=x^2+2*x+1:-10,10,1")
+  Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3" (or "y=2x+3:-10,10,1")
+  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
+  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"
+`
     );
     process.exit(0);
   }
@@ -727,22 +741,22 @@ function main() {
   console.log("Demo: Raw formula strings and their parsed representations:");
 
   const rawQuad = "x^2+y-1=0";
-  console.log(`Raw Formula: "${rawQuad}"`);
+  console.log(`Raw Formula: \"${rawQuad}\"`);
   console.log("Parsed representation for Quadratic from Raw Formula:");
   displayPlot("Quadratic from Raw Formula", plotFromString(rawQuad));
 
   const rawLinear = "linear:1,0,-10,10,1";
-  console.log(`\nRaw Formula: "${rawLinear}"`);
+  console.log(`\nRaw Formula: \"${rawLinear}\"`);
   console.log("Parsed representation for Linear from Raw Formula:");
   displayPlot("Linear from Raw Formula", plotFromString(rawLinear));
 
   const rawSine = "sine:1,1,0,0,360,10";
-  console.log(`\nRaw Formula: "${rawSine}"`);
+  console.log(`\nRaw Formula: \"${rawSine}\"`);
   console.log("Parsed ASCII Art for Sine:");
   console.log(plotToAscii({ formulas: [rawSine] }));
 
   const rawPolar = "polar:200,2,5";
-  console.log(`\nRaw Formula: "${rawPolar}"`);
+  console.log(`\nRaw Formula: \"${rawPolar}\"`);
   console.log("Parsed representation for Polar from Raw Formula:");
   displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
 

commit a06752e59d62f38c0b106bc1d1d4b7e71af57908
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 07:44:24 2025 +0000

    Extend algebraic formula parsing to support optional range parameters in linear and quadratic formulas https://github.com/xn-intenton-z2a/repository0/issues/87 (#90)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 60dcac8..9e66927 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -181,7 +181,7 @@ function parseLinear(formulaStr) {
   });
 }
 
-// New: Parse a generic linear formula in standard algebraic form, e.g., "y=2x+3" with optional range parameters e.g., "y=2x+3:-10,10,1"
+// New: Parse a generic linear formula in standard algebraic form, e.g., "y=2x+3" with optional range parameters (e.g., "y=2x+3:-10,10,1")
 function parseGenericLinear(formulaStr) {
   let parts = formulaStr.split(":");
   let exprPart = parts[0].replace(/\s+/g, "");
@@ -565,7 +565,8 @@ function plotToAscii({ formulas = [] } = {}) {
     for (let col = 0; col < cols; col++) {
       if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
+    result += header + grid.map((row) => row.join(""))
+      .join("\n") + "\n\n";
   });
   return result;
 }

commit 990343ce09db06cea0e93f6105faa9175e0e07c7
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 07:34:23 2025 +0000

    Added support for optional range parameters in algebraic formulas linear and quadratic to extend feature set. https://github.com/xn-intenton-z2a/repository0/issues/87 (#88)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index b916603..60dcac8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -13,7 +13,7 @@
  *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings.
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
- *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Now supports both prefixed and standard algebraic formats (e.g., "y=2x+3").
+ *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Now supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Now supports multiple formulas for each plot type, each rendered with a distinct color.
@@ -181,13 +181,15 @@ function parseLinear(formulaStr) {
   });
 }
 
-// New: Parse a generic linear formula in standard algebraic form, e.g., "y=2x+3"
+// New: Parse a generic linear formula in standard algebraic form, e.g., "y=2x+3" with optional range parameters e.g., "y=2x+3:-10,10,1"
 function parseGenericLinear(formulaStr) {
-  const formula = formulaStr.replace(/\s+/g, "");
-  if (!formula.toLowerCase().startsWith("y=")) {
+  let parts = formulaStr.split(":");
+  let exprPart = parts[0].replace(/\s+/g, "");
+  let rangePart = parts.length > 1 ? parts[1].trim() : "";
+  if (!exprPart.toLowerCase().startsWith("y=")) {
     throw new Error("Linear formula must start with 'y='");
   }
-  let expr = formula.substring(2);
+  let expr = exprPart.substring(2);
   // Ensure it's linear by checking absence of x^2
   if (expr.includes("x^2")) {
     throw new Error("Detected quadratic term in what should be a linear formula");
@@ -201,7 +203,14 @@ function parseGenericLinear(formulaStr) {
   if (bMatch) {
     b = parseFloat(bMatch[1]);
   }
-  return plotLinearParam({ m, b, xMin: -10, xMax: 10, step: 1 });
+  let xMin = -10, xMax = 10, step = 1;
+  if (rangePart) {
+    const rangeParams = rangePart.split(",").map(Number);
+    if (rangeParams.length > 0 && !isNaN(rangeParams[0])) xMin = rangeParams[0];
+    if (rangeParams.length > 1 && !isNaN(rangeParams[1])) xMax = rangeParams[1];
+    if (rangeParams.length > 2 && !isNaN(rangeParams[2])) step = rangeParams[2];
+  }
+  return plotLinearParam({ m, b, xMin, xMax, step });
 }
 
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
@@ -250,14 +259,25 @@ function invertExpression(expr) {
   return inverted[0] === "+" ? inverted.slice(1) : inverted;
 }
 
-// Parse a generic quadratic formula in standard algebraic form
+// Parse a generic quadratic formula in standard algebraic form with optional range, e.g., "y=x^2+2x+1" or "y=x^2+2x+1:-10,10,1"
 function parseGenericQuadratic(formulaStr) {
-  const formula = formulaStr.replace(/\s+/g, "");
-  if (formula.toLowerCase().startsWith("y=")) {
-    const yExpr = formula.substring(2);
-    return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
-  } else if (formula.endsWith("=0")) {
-    const left = formula.split("=")[0];
+  let parts = formulaStr.split(":");
+  let mainPart = parts[0].replace(/\s+/g, "");
+  let rangePart = parts.length > 1 ? parts[1].trim() : "";
+  let xMin = -10, xMax = 10, step = 1;
+  if (rangePart) {
+    const rangeParams = rangePart.split(",").map(Number);
+    if (rangeParams.length > 0 && !isNaN(rangeParams[0])) xMin = rangeParams[0];
+    if (rangeParams.length > 1 && !isNaN(rangeParams[1])) xMax = rangeParams[1];
+    if (rangeParams.length > 2 && !isNaN(rangeParams[2])) step = rangeParams[2];
+  }
+
+  if (mainPart.toLowerCase().startsWith("y=")) {
+    const yExpr = mainPart.substring(2);
+    const coeffs = extractQuadraticCoefficients(yExpr);
+    return plotQuadraticParam({ ...coeffs, xMin, xMax, step });
+  } else if (mainPart.endsWith("=0")) {
+    const left = mainPart.split("=")[0];
     const yRegex = /([+-]?(?:\d*\.?\d*)?)y/;
     const yMatch = left.match(yRegex);
     if (!yMatch) throw new Error("No y term found in equation");
@@ -270,15 +290,15 @@ function parseGenericQuadratic(formulaStr) {
       a: -coeffs.a / yCoeff,
       b: -coeffs.b / yCoeff,
       c: -coeffs.c / yCoeff,
-      xMin: -10,
-      xMax: 10,
-      step: 1,
+      xMin,
+      xMax,
+      step,
     });
   } else {
-    const parts = formula.split("=");
-    if (parts.length !== 2) throw new Error("Unsupported formula format for quadratic parsing");
-    const left = parts[0];
-    const right = parts[1];
+    const partsEq = mainPart.split("=");
+    if (partsEq.length !== 2) throw new Error("Unsupported formula format for quadratic parsing");
+    const left = partsEq[0];
+    const right = partsEq[1] || "0";
     if (left.includes("y")) {
       const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
       let yCoeff = 1;
@@ -295,9 +315,9 @@ function parseGenericQuadratic(formulaStr) {
         a: -coeffs.a / yCoeff,
         b: -coeffs.b / yCoeff,
         c: (constantRight - coeffs.c) / yCoeff,
-        xMin: -10,
-        xMax: 10,
-        step: 1,
+        xMin,
+        xMax,
+        step,
       });
     } else if (right.includes("y")) {
       const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
@@ -315,14 +335,14 @@ function parseGenericQuadratic(formulaStr) {
         a: -coeffs.a / yCoeff,
         b: -coeffs.b / yCoeff,
         c: (constantLeft - coeffs.c) / yCoeff,
-        xMin: -10,
-        xMax: 10,
-        step: 1,
+        xMin,
+        xMax,
+        step,
       });
     } else {
       const nonYPart = left;
       const newExpr = (right || "0") + invertExpression(nonYPart);
-      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
+      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin, xMax, step });
     }
   }
 }
@@ -338,7 +358,7 @@ function plotFromString(formulaStr) {
     console.error("Unknown prefixed formula type.");
     return [];
   } else if (formulaStr.includes("=")) {
-    // Added support for linear equations in algebraic form (e.g., "y=2x+3") if no quadratic terms
+    // Added support for linear equations in algebraic form (e.g., "y=2x+3" or with range, "y=2x+3:-10,10,1") if no quadratic terms
     if (lowerStr.startsWith("y=") && !formulaStr.includes("x^2")) {
       try {
         return parseGenericLinear(formulaStr);
@@ -545,8 +565,7 @@ function plotToAscii({ formulas = [] } = {}) {
     for (let col = 0; col < cols; col++) {
       if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map((row) => row.join(""))
-      .join("\n") + "\n\n";
+    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
   });
   return result;
 }
@@ -666,7 +685,7 @@ function main() {
 
   if (args.includes("--help") || args.includes("-h")) {
     console.log(
-      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0" (or with range e.g., "y=x^2+2*x+1:-10,10,1")\n  Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3" (or "y=2x+3:-10,10,1")\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
     );
     process.exit(0);
   }

commit f10744a8281bc941ac23c0952d14d7f204e706fa
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 07:17:08 2025 +0000

    Improved algebraic quadratic parsing and updated version flag. https://github.com/xn-intenton-z2a/repository0/issues/85 (#86)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a92396c..b916603 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -257,13 +257,15 @@ function parseGenericQuadratic(formulaStr) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
   } else if (formula.endsWith("=0")) {
-    // Handle equations ending with =0
     const left = formula.split("=")[0];
-    const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
+    const yRegex = /([+-]?(?:\d*\.?\d*)?)y/;
+    const yMatch = left.match(yRegex);
     if (!yMatch) throw new Error("No y term found in equation");
-    const yCoeff = (yMatch[1] === "" || yMatch[1] === "+") ? 1 : yMatch[1] === "-" ? -1 : parseFloat(yMatch[1]);
-    const remaining = left.replace(yMatch[0], "");
-    const coeffs = extractQuadraticCoefficients(remaining);
+    const coeffStr = yMatch[1];
+    const yCoeff = (coeffStr === "" || coeffStr === "+") ? 1 : (coeffStr === "-") ? -1 : parseFloat(coeffStr);
+    const remaining = left.replace(yRegex, "");
+    const cleanedRemaining = remaining.replace(/^\+/, "");
+    const coeffs = extractQuadraticCoefficients(cleanedRemaining);
     return plotQuadraticParam({
       a: -coeffs.a / yCoeff,
       b: -coeffs.b / yCoeff,
@@ -658,7 +660,7 @@ function main() {
 
   // Added version flag support - version updated to match package version
   if (args.includes("--version")) {
-    console.log("Equation Plotter Library version 0.1.1-38");
+    console.log("Equation Plotter Library version 0.1.1-39");
     process.exit(0);
   }
 

commit 9ef719165568bc445fb414d857f9a9943e2eb1c0
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 07:04:13 2025 +0000

    Extended support for parsing standard algebraic linear equations and updated getPlotsFromFormulas accordingly. https://github.com/xn-intenton-z2a/repository0/issues/82 (#84)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index d80a067..a92396c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -705,22 +705,22 @@ function main() {
   console.log("Demo: Raw formula strings and their parsed representations:");
 
   const rawQuad = "x^2+y-1=0";
-  console.log(`Raw Formula: \"${rawQuad}\"`);
+  console.log(`Raw Formula: "${rawQuad}"`);
   console.log("Parsed representation for Quadratic from Raw Formula:");
   displayPlot("Quadratic from Raw Formula", plotFromString(rawQuad));
 
   const rawLinear = "linear:1,0,-10,10,1";
-  console.log(`\nRaw Formula: \"${rawLinear}\"`);
+  console.log(`\nRaw Formula: "${rawLinear}"`);
   console.log("Parsed representation for Linear from Raw Formula:");
   displayPlot("Linear from Raw Formula", plotFromString(rawLinear));
 
   const rawSine = "sine:1,1,0,0,360,10";
-  console.log(`\nRaw Formula: \"${rawSine}\"`);
+  console.log(`\nRaw Formula: "${rawSine}"`);
   console.log("Parsed ASCII Art for Sine:");
   console.log(plotToAscii({ formulas: [rawSine] }));
 
   const rawPolar = "polar:200,2,5";
-  console.log(`\nRaw Formula: \"${rawPolar}\"`);
+  console.log(`\nRaw Formula: "${rawPolar}"`);
   console.log("Parsed representation for Polar from Raw Formula:");
   displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
 

commit 5ea742c97117082b51f2e00f7653dd9aabf178be
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 06:54:32 2025 +0000

    Add support for parsing linear equations in standard algebraic form e.g. y2x3 and update getPlotsFromFormulas accordingly. https://github.com/xn-intenton-z2a/repository0/issues/82 (#83)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 3ae5647..d80a067 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -13,7 +13,7 @@
  *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings.
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
- *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range.
+ *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Now supports both prefixed and standard algebraic formats (e.g., "y=2x+3").
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *   - Multiple Formulas per Plot Type: Now supports multiple formulas for each plot type, each rendered with a distinct color.
@@ -181,6 +181,29 @@ function parseLinear(formulaStr) {
   });
 }
 
+// New: Parse a generic linear formula in standard algebraic form, e.g., "y=2x+3"
+function parseGenericLinear(formulaStr) {
+  const formula = formulaStr.replace(/\s+/g, "");
+  if (!formula.toLowerCase().startsWith("y=")) {
+    throw new Error("Linear formula must start with 'y='");
+  }
+  let expr = formula.substring(2);
+  // Ensure it's linear by checking absence of x^2
+  if (expr.includes("x^2")) {
+    throw new Error("Detected quadratic term in what should be a linear formula");
+  }
+  let m = 1, b = 0;
+  const mMatch = expr.match(/^([+-]?\d*\.?\d+)?\*?x/);
+  if (mMatch) {
+    m = (mMatch[1] === "" || mMatch[1] === undefined) ? 1 : parseFloat(mMatch[1]);
+  }
+  const bMatch = expr.match(/([+-]\d*\.?\d+)(?!\*?x)/);
+  if (bMatch) {
+    b = parseFloat(bMatch[1]);
+  }
+  return plotLinearParam({ m, b, xMin: -10, xMax: 10, step: 1 });
+}
+
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, "");
@@ -238,8 +261,8 @@ function parseGenericQuadratic(formulaStr) {
     const left = formula.split("=")[0];
     const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
     if (!yMatch) throw new Error("No y term found in equation");
-    const yCoeff = yMatch[1] === "" || yMatch[1] === "+" ? 1 : yMatch[1] === "-" ? -1 : parseFloat(yMatch[1]);
-    const remaining = left.replace(/([+-]?\d*\.?\d*)y/, "");
+    const yCoeff = (yMatch[1] === "" || yMatch[1] === "+") ? 1 : yMatch[1] === "-" ? -1 : parseFloat(yMatch[1]);
+    const remaining = left.replace(yMatch[0], "");
     const coeffs = extractQuadraticCoefficients(remaining);
     return plotQuadraticParam({
       a: -coeffs.a / yCoeff,
@@ -313,11 +336,21 @@ function plotFromString(formulaStr) {
     console.error("Unknown prefixed formula type.");
     return [];
   } else if (formulaStr.includes("=")) {
-    try {
-      return parseGenericQuadratic(formulaStr);
-    } catch (e) {
-      console.error("Error parsing generic quadratic formula:", e.message);
-      return [];
+    // Added support for linear equations in algebraic form (e.g., "y=2x+3") if no quadratic terms
+    if (lowerStr.startsWith("y=") && !formulaStr.includes("x^2")) {
+      try {
+        return parseGenericLinear(formulaStr);
+      } catch (e) {
+        console.error("Error parsing linear formula:", e.message);
+        return [];
+      }
+    } else {
+      try {
+        return parseGenericQuadratic(formulaStr);
+      } catch (e) {
+        console.error("Error parsing generic quadratic formula:", e.message);
+        return [];
+      }
     }
   } else {
     console.error("Formula string is not in a recognized format.");
@@ -334,7 +367,7 @@ function getPlotsFromFormulas(formulas = []) {
   formulas.forEach((formula) => {
     const lower = formula.toLowerCase();
     try {
-      if (lower.startsWith("quadratic:") || (!formula.includes(":") && formula.includes("="))) {
+      if (lower.startsWith("quadratic:") || (!formula.includes(":") && formula.includes("=") && (formula.includes("x^2") || formula.includes("y") === false))) {
         quadratic.push(plotFromString(formula));
       } else if (lower.startsWith("sine:")) {
         sine.push(plotFromString(formula));
@@ -342,6 +375,9 @@ function getPlotsFromFormulas(formulas = []) {
         polar.push(plotFromString(formula));
       } else if (lower.startsWith("linear:")) {
         linear.push(plotFromString(formula));
+      } else if (formula.includes("=") && lower.startsWith("y=") && !formula.includes("x^2")) {
+        // Treat as generic linear equation
+        linear.push(plotFromString(formula));
       }
     } catch (e) {
       console.error("Error parsing formula:", formula, e.message);
@@ -507,7 +543,8 @@ function plotToAscii({ formulas = [] } = {}) {
     for (let col = 0; col < cols; col++) {
       if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
+    result += header + grid.map((row) => row.join(""))
+      .join("\n") + "\n\n";
   });
   return result;
 }
@@ -627,7 +664,7 @@ function main() {
 
   if (args.includes("--help") || args.includes("-h")) {
     console.log(
-      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]" or algebraic form like "y=2x+3"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
     );
     process.exit(0);
   }
@@ -668,22 +705,22 @@ function main() {
   console.log("Demo: Raw formula strings and their parsed representations:");
 
   const rawQuad = "x^2+y-1=0";
-  console.log(`Raw Formula: "${rawQuad}"`);
+  console.log(`Raw Formula: \"${rawQuad}\"`);
   console.log("Parsed representation for Quadratic from Raw Formula:");
   displayPlot("Quadratic from Raw Formula", plotFromString(rawQuad));
 
   const rawLinear = "linear:1,0,-10,10,1";
-  console.log(`\nRaw Formula: "${rawLinear}"`);
+  console.log(`\nRaw Formula: \"${rawLinear}\"`);
   console.log("Parsed representation for Linear from Raw Formula:");
   displayPlot("Linear from Raw Formula", plotFromString(rawLinear));
 
   const rawSine = "sine:1,1,0,0,360,10";
-  console.log(`\nRaw Formula: "${rawSine}"`);
+  console.log(`\nRaw Formula: \"${rawSine}\"`);
   console.log("Parsed ASCII Art for Sine:");
   console.log(plotToAscii({ formulas: [rawSine] }));
 
   const rawPolar = "polar:200,2,5";
-  console.log(`\nRaw Formula: "${rawPolar}"`);
+  console.log(`\nRaw Formula: \"${rawPolar}\"`);
   console.log("Parsed representation for Polar from Raw Formula:");
   displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
 

commit 424d9aa7c3f8ea656c9451e005507497d232beaf
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 06:40:09 2025 +0000

    Enhanced parsePolar to support optional degMin and degMax parameters and updated help text accordingly. https://github.com/xn-intenton-z2a/repository0/issues/80 (#81)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index edd215e..3ae5647 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -152,12 +152,19 @@ function parsePolar(formulaStr) {
   const parts = formulaStr.split(":");
   if (parts.length < 2) throw new Error("Invalid polar formula string");
   const params = parts[1].split(",").map(Number);
-  const [scale, multiplier, step] = params;
-  return plotPolarParam({
-    scale: isNaN(scale) ? 200 : scale,
-    multiplier: isNaN(multiplier) ? 2 : multiplier,
-    step: isNaN(step) ? 5 : step,
-  });
+  const scale = isNaN(params[0]) ? 200 : params[0];
+  const multiplier = isNaN(params[1]) ? 2 : params[1];
+  let step = 5;
+  let degMin = 0;
+  let degMax = 360;
+  if (params.length >= 3) {
+    step = isNaN(params[2]) ? 5 : params[2];
+  }
+  if (params.length >= 5) {
+    degMin = isNaN(params[3]) ? 0 : params[3];
+    degMax = isNaN(params[4]) ? 360 : params[4];
+  }
+  return plotPolarParam({ scale, multiplier, step, degMin, degMax });
 }
 
 function parseLinear(formulaStr) {
@@ -620,7 +627,7 @@ function main() {
 
   if (args.includes("--help") || args.includes("-h")) {
     console.log(
-      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier,step[,degMin,degMax]"\n`
     );
     process.exit(0);
   }

commit e0a46a7ab6312bffe99fbd80cdcd401dae9ac077
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 06:17:40 2025 +0000

    Added formatNumber helper to improve number formatting and avoid negative zero representation in outputs. https://github.com/xn-intenton-z2a/repository0/issues/78 (#79)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 1174fb2..edd215e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -50,6 +50,12 @@
 import { fileURLToPath } from "url";
 import fs from "fs";
 
+// Helper function to format numbers to two decimals and avoid negative zero
+function formatNumber(n) {
+  let s = n.toFixed(2);
+  return s === "-0.00" ? "0.00" : s;
+}
+
 // ----------------------------------
 // Plotting Functions
 // ----------------------------------
@@ -347,7 +353,7 @@ function getPlotsFromFormulas(formulas = []) {
 
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
-  console.log(points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
+  console.log(points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "));
 }
 
 // ----------------------------------
@@ -385,7 +391,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
       .map((p) => {
         const px = 50 + ((p.x + 10) / 20) * 700;
         const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
-        return `${px.toFixed(2)},${py.toFixed(2)}`;
+        return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
@@ -408,7 +414,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
       .map((p) => {
         const px = 50 + ((p.x + 10) / 20) * 700;
         const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
-        return `${px.toFixed(2)},${py.toFixed(2)}`;
+        return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
@@ -431,7 +437,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
       .map((p) => {
         const px = 50 + (p.x / 360) * 700;
         const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
-        return `${px.toFixed(2)},${py.toFixed(2)}`;
+        return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
@@ -448,7 +454,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
       .map((p) => {
         const px = centerX + p.x;
         const py = centerY - p.y;
-        return `${px.toFixed(2)},${py.toFixed(2)}`;
+        return `${formatNumber(px)},${formatNumber(py)}`;
       })
       .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
@@ -505,25 +511,25 @@ function plotToText({ formulas = [] } = {}) {
   output +=
     "Quadratic Plot:\n" +
     quadratic
-      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
     "\n\n";
   output +=
     "Linear Plot:\n" +
     linear
-      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
     "\n\n";
   output +=
     "Sine Plot:\n" +
     sine
-      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
     "\n\n";
   output +=
     "Polar Plot:\n" +
     polar
-      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${formatNumber(p.x)}, ${formatNumber(p.y)})`).join(" "))
       .join("\n") +
     "\n";
   return output;
@@ -546,28 +552,28 @@ function plotToCsv({ formulas = [] } = {}) {
   lines.push("--Quadratic Plot--");
   quadratic.forEach((points, i) => {
     points.forEach((p) => {
-      lines.push(`Quadratic,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+      lines.push(`Quadratic,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
   lines.push("");
   lines.push("--Linear Plot--");
   linear.forEach((points, i) => {
     points.forEach((p) => {
-      lines.push(`Linear,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+      lines.push(`Linear,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
   lines.push("");
   lines.push("--Sine Plot--");
   sine.forEach((points, i) => {
     points.forEach((p) => {
-      lines.push(`Sine,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+      lines.push(`Sine,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
   lines.push("");
   lines.push("--Polar Plot--");
   polar.forEach((points, i) => {
     points.forEach((p) => {
-      lines.push(`Polar,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+      lines.push(`Polar,Formula ${i + 1},${formatNumber(p.x)},${formatNumber(p.y)}`);
     });
   });
   return lines.join("\n");
@@ -614,7 +620,7 @@ function main() {
 
   if (args.includes("--help") || args.includes("-h")) {
     console.log(
-      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`,
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`
     );
     process.exit(0);
   }
@@ -632,7 +638,7 @@ function main() {
       arg !== "--json" &&
       arg !== "--csv" &&
       arg !== "--version" &&
-      arg !== "--ascii",
+      arg !== "--ascii"
   );
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
@@ -689,9 +695,7 @@ function main() {
 
   try {
     fs.writeFileSync(outputFileName, fileContent, "utf8");
-    console.log(
-      `\n${isJson ? "JSON" : isCsv ? "CSV" : isHtml ? "HTML" : isAscii ? "ASCII" : "SVG"} file generated: ${outputFileName}`,
-    );
+    console.log(`\n${isJson ? "JSON" : isCsv ? "CSV" : isHtml ? "HTML" : isAscii ? "ASCII" : "SVG"} file generated: ${outputFileName}`);
   } catch (err) {
     console.error(`Error writing file:`, err.message);
     process.exit(1);

commit 5e128ddfa736d0a99bd911596b800665de0ba9a3
Author: GitHub Actions[bot] <action@github.com>
Date:   Sun Feb 16 06:07:07 2025 +0000

    Updated by `prettier --write`

diff --git a/src/lib/main.js b/src/lib/main.js
index 2c9b4e5..1174fb2 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,6 +1,6 @@
 #!/usr/bin/env node
 
-'use strict';
+"use strict";
 
 /**
  * Equation Plotter Library
@@ -47,8 +47,8 @@
  * License: MIT
  */
 
-import { fileURLToPath } from 'url';
-import fs from 'fs';
+import { fileURLToPath } from "url";
+import fs from "fs";
 
 // ----------------------------------
 // Plotting Functions
@@ -113,9 +113,9 @@ function plotLinear() {
 // ----------------------------------
 
 function parseQuadratic(formulaStr) {
-  const parts = formulaStr.split(':');
-  if (parts.length < 2) throw new Error('Invalid quadratic formula string');
-  const params = parts[1].split(',').map(Number);
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid quadratic formula string");
+  const params = parts[1].split(",").map(Number);
   const [a, b, c, xMin, xMax, step] = params;
   return plotQuadraticParam({
     a: isNaN(a) ? 1 : a,
@@ -123,14 +123,14 @@ function parseQuadratic(formulaStr) {
     c: isNaN(c) ? 0 : c,
     xMin: isNaN(xMin) ? -10 : xMin,
     xMax: isNaN(xMax) ? 10 : xMax,
-    step: isNaN(step) ? 1 : step
+    step: isNaN(step) ? 1 : step,
   });
 }
 
 function parseSine(formulaStr) {
-  const parts = formulaStr.split(':');
-  if (parts.length < 2) throw new Error('Invalid sine formula string');
-  const params = parts[1].split(',').map(Number);
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid sine formula string");
+  const params = parts[1].split(",").map(Number);
   const [amplitude, frequency, phase, xMin, xMax, step] = params;
   return plotSineParam({
     amplitude: isNaN(amplitude) ? 1 : amplitude,
@@ -138,57 +138,59 @@ function parseSine(formulaStr) {
     phase: isNaN(phase) ? 0 : phase,
     xMin: isNaN(xMin) ? 0 : xMin,
     xMax: isNaN(xMax) ? 360 : xMax,
-    step: isNaN(step) ? 10 : step
+    step: isNaN(step) ? 10 : step,
   });
 }
 
 function parsePolar(formulaStr) {
-  const parts = formulaStr.split(':');
-  if (parts.length < 2) throw new Error('Invalid polar formula string');
-  const params = parts[1].split(',').map(Number);
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid polar formula string");
+  const params = parts[1].split(",").map(Number);
   const [scale, multiplier, step] = params;
   return plotPolarParam({
     scale: isNaN(scale) ? 200 : scale,
     multiplier: isNaN(multiplier) ? 2 : multiplier,
-    step: isNaN(step) ? 5 : step
+    step: isNaN(step) ? 5 : step,
   });
 }
 
 function parseLinear(formulaStr) {
-  const parts = formulaStr.split(':');
-  if (parts.length < 2) throw new Error('Invalid linear formula string');
-  const params = parts[1].split(',').map(Number);
+  const parts = formulaStr.split(":");
+  if (parts.length < 2) throw new Error("Invalid linear formula string");
+  const params = parts[1].split(",").map(Number);
   const [m, b, xMin, xMax, step] = params;
   return plotLinearParam({
     m: isNaN(m) ? 1 : m,
     b: isNaN(b) ? 0 : b,
     xMin: isNaN(xMin) ? -10 : xMin,
     xMax: isNaN(xMax) ? 10 : xMax,
-    step: isNaN(step) ? 1 : step
+    step: isNaN(step) ? 1 : step,
   });
 }
 
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
-  expr = expr.replace(/\s+/g, '');
-  let a = 0, b = 0, c = 0;
+  expr = expr.replace(/\s+/g, "");
+  let a = 0;
+  let b = 0;
+  let c = 0;
 
   const aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
   if (aMatch) {
-    let coeff = aMatch[1];
-    if (coeff === '' || coeff === '+') a = 1;
-    else if (coeff === '-') a = -1;
+    const coeff = aMatch[1];
+    if (coeff === "" || coeff === "+") a = 1;
+    else if (coeff === "-") a = -1;
     else a = parseFloat(coeff);
-    expr = expr.replace(aMatch[0], '');
+    expr = expr.replace(aMatch[0], "");
   }
 
   const bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
   if (bMatch) {
-    let coeff = bMatch[1];
-    if (coeff === '' || coeff === '+') b = 1;
-    else if (coeff === '-') b = -1;
+    const coeff = bMatch[1];
+    if (coeff === "" || coeff === "+") b = 1;
+    else if (coeff === "-") b = -1;
     else b = parseFloat(coeff);
-    expr = expr.replace(bMatch[0], '');
+    expr = expr.replace(bMatch[0], "");
   }
 
   const constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
@@ -202,26 +204,29 @@ function extractQuadraticCoefficients(expr) {
 // Helper function to invert an algebraic expression consisting of additions and subtractions.
 function invertExpression(expr) {
   const tokens = expr.match(/[+-]?[^+-]+/g) || [];
-  const inverted = tokens.map(token => {
-    token = token.trim();
-    if (token.startsWith('-')) return '+' + token.slice(1);
-    else return '-' + token;
-  }).join('');
-  return inverted[0] === '+' ? inverted.slice(1) : inverted;
+  const inverted = tokens
+    .map((token) => {
+      token = token.trim();
+      if (token.startsWith("-")) return "+" + token.slice(1);
+      else return "-" + token;
+    })
+    .join("");
+  return inverted[0] === "+" ? inverted.slice(1) : inverted;
 }
 
 // Parse a generic quadratic formula in standard algebraic form
 function parseGenericQuadratic(formulaStr) {
-  let formula = formulaStr.replace(/\s+/g, '');
-  if (formula.toLowerCase().startsWith('y=')) {
+  const formula = formulaStr.replace(/\s+/g, "");
+  if (formula.toLowerCase().startsWith("y=")) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
-  } else if (formula.endsWith('=0')) { // Handle equations ending with =0
-    const left = formula.split('=')[0];
+  } else if (formula.endsWith("=0")) {
+    // Handle equations ending with =0
+    const left = formula.split("=")[0];
     const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
-    if (!yMatch) throw new Error('No y term found in equation');
-    let yCoeff = (yMatch[1] === '' || yMatch[1] === '+') ? 1 : (yMatch[1] === '-' ? -1 : parseFloat(yMatch[1]));
-    let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
+    if (!yMatch) throw new Error("No y term found in equation");
+    const yCoeff = yMatch[1] === "" || yMatch[1] === "+" ? 1 : yMatch[1] === "-" ? -1 : parseFloat(yMatch[1]);
+    const remaining = left.replace(/([+-]?\d*\.?\d*)y/, "");
     const coeffs = extractQuadraticCoefficients(remaining);
     return plotQuadraticParam({
       a: -coeffs.a / yCoeff,
@@ -229,42 +234,56 @@ function parseGenericQuadratic(formulaStr) {
       c: -coeffs.c / yCoeff,
       xMin: -10,
       xMax: 10,
-      step: 1
+      step: 1,
     });
   } else {
-    const parts = formula.split('=');
-    if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
-    let left = parts[0];
-    let right = parts[1];
-    if (left.includes('y')) {
+    const parts = formula.split("=");
+    if (parts.length !== 2) throw new Error("Unsupported formula format for quadratic parsing");
+    const left = parts[0];
+    const right = parts[1];
+    if (left.includes("y")) {
       const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
       let yCoeff = 1;
       if (yMatch) {
         const coeffStr = yMatch[1];
-        if (coeffStr === '' || coeffStr === '+') yCoeff = 1;
-        else if (coeffStr === '-') yCoeff = -1;
+        if (coeffStr === "" || coeffStr === "+") yCoeff = 1;
+        else if (coeffStr === "-") yCoeff = -1;
         else yCoeff = parseFloat(coeffStr);
       }
-      let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
+      const remaining = left.replace(/([+-]?\d*\.?\d*)y/, "");
       const constantRight = parseFloat(right) || 0;
       const coeffs = extractQuadraticCoefficients(remaining);
-      return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantRight - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
-    } else if (right.includes('y')) {
+      return plotQuadraticParam({
+        a: -coeffs.a / yCoeff,
+        b: -coeffs.b / yCoeff,
+        c: (constantRight - coeffs.c) / yCoeff,
+        xMin: -10,
+        xMax: 10,
+        step: 1,
+      });
+    } else if (right.includes("y")) {
       const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
       let yCoeff = 1;
       if (yMatch) {
         const coeffStr = yMatch[1];
-        if (coeffStr === '' || coeffStr === '+') yCoeff = 1;
-        else if (coeffStr === '-') yCoeff = -1;
+        if (coeffStr === "" || coeffStr === "+") yCoeff = 1;
+        else if (coeffStr === "-") yCoeff = -1;
         else yCoeff = parseFloat(coeffStr);
       }
-      let remaining = right.replace(/([+-]?\d*\.?\d*)y/, '');
+      const remaining = right.replace(/([+-]?\d*\.?\d*)y/, "");
       const constantLeft = parseFloat(left) || 0;
       const coeffs = extractQuadraticCoefficients(remaining);
-      return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantLeft - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
+      return plotQuadraticParam({
+        a: -coeffs.a / yCoeff,
+        b: -coeffs.b / yCoeff,
+        c: (constantLeft - coeffs.c) / yCoeff,
+        xMin: -10,
+        xMax: 10,
+        step: 1,
+      });
     } else {
-      let nonYPart = left;
-      const newExpr = (right || '0') + invertExpression(nonYPart);
+      const nonYPart = left;
+      const newExpr = (right || "0") + invertExpression(nonYPart);
       return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
     }
   }
@@ -273,22 +292,22 @@ function parseGenericQuadratic(formulaStr) {
 // Delegate plotting based on formula string content
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
-  if (formulaStr.includes(':')) {
-    if (lowerStr.startsWith('quadratic:')) return parseQuadratic(formulaStr);
-    if (lowerStr.startsWith('sine:')) return parseSine(formulaStr);
-    if (lowerStr.startsWith('polar:')) return parsePolar(formulaStr);
-    if (lowerStr.startsWith('linear:')) return parseLinear(formulaStr);
-    console.error('Unknown prefixed formula type.');
+  if (formulaStr.includes(":")) {
+    if (lowerStr.startsWith("quadratic:")) return parseQuadratic(formulaStr);
+    if (lowerStr.startsWith("sine:")) return parseSine(formulaStr);
+    if (lowerStr.startsWith("polar:")) return parsePolar(formulaStr);
+    if (lowerStr.startsWith("linear:")) return parseLinear(formulaStr);
+    console.error("Unknown prefixed formula type.");
     return [];
-  } else if (formulaStr.includes('=')) {
+  } else if (formulaStr.includes("=")) {
     try {
       return parseGenericQuadratic(formulaStr);
     } catch (e) {
-      console.error('Error parsing generic quadratic formula:', e.message);
+      console.error("Error parsing generic quadratic formula:", e.message);
       return [];
     }
   } else {
-    console.error('Formula string is not in a recognized format.');
+    console.error("Formula string is not in a recognized format.");
     return [];
   }
 }
@@ -299,20 +318,20 @@ function getPlotsFromFormulas(formulas = []) {
   const sine = [];
   const polar = [];
   const linear = [];
-  formulas.forEach(formula => {
+  formulas.forEach((formula) => {
     const lower = formula.toLowerCase();
     try {
-      if ((lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('=')))) {
+      if (lower.startsWith("quadratic:") || (!formula.includes(":") && formula.includes("="))) {
         quadratic.push(plotFromString(formula));
-      } else if (lower.startsWith('sine:')) {
+      } else if (lower.startsWith("sine:")) {
         sine.push(plotFromString(formula));
-      } else if (lower.startsWith('polar:')) {
+      } else if (lower.startsWith("polar:")) {
         polar.push(plotFromString(formula));
-      } else if (lower.startsWith('linear:')) {
+      } else if (lower.startsWith("linear:")) {
         linear.push(plotFromString(formula));
       }
     } catch (e) {
-      console.error('Error parsing formula:', formula, e.message);
+      console.error("Error parsing formula:", formula, e.message);
     }
   });
   if (quadratic.length === 0) quadratic.push(plotQuadratic());
@@ -328,7 +347,7 @@ function getPlotsFromFormulas(formulas = []) {
 
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
-  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
+  console.log(points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
 }
 
 // ----------------------------------
@@ -351,55 +370,70 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
 
   // Quadratic Plot (Slot 1)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
-  let qPoints = quadraticPlots.flat();
-  let qValues = qPoints.map(p => p.y);
+  const qPoints = quadraticPlots.flat();
+  const qValues = qPoints.map((p) => p.y);
   let qMinY = Math.min(...qValues);
   let qMaxY = Math.max(...qValues);
-  if(qMinY === qMaxY) { qMinY -= 10; qMaxY += 10; }
+  if (qMinY === qMaxY) {
+    qMinY -= 10;
+    qMaxY += 10;
+  }
   // Slot for quadratic: y range mapped from 50 to 250
   quadraticPlots.forEach((points, idx) => {
     const color = quadraticColors[idx % quadraticColors.length];
-    const pts = points.map(p => {
-      const px = 50 + ((p.x + 10) / 20) * 700;
-      const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
-      return `${px.toFixed(2)},${py.toFixed(2)}`;
-    }).join(' ');
+    const pts = points
+      .map((p) => {
+        const px = 50 + ((p.x + 10) / 20) * 700;
+        const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
+        return `${px.toFixed(2)},${py.toFixed(2)}`;
+      })
+      .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
   svg += `\n`;
 
   // Linear Plot (Slot 2)
   svg += `  <text x="${width / 2}" y="260" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
-  let lPoints = linearPlots.flat();
-  let lValues = lPoints.map(p => p.y);
+  const lPoints = linearPlots.flat();
+  const lValues = lPoints.map((p) => p.y);
   let lMinY = Math.min(...lValues);
   let lMaxY = Math.max(...lValues);
-  if(lMinY === lMaxY) { lMinY -= 10; lMaxY += 10; }
+  if (lMinY === lMaxY) {
+    lMinY -= 10;
+    lMaxY += 10;
+  }
   linearPlots.forEach((points, idx) => {
     const color = linearColors[idx % linearColors.length];
-    const pts = points.map(p => {
-      const px = 50 + ((p.x + 10) / 20) * 700;
-      const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
-      return `${px.toFixed(2)},${py.toFixed(2)}`;
-    }).join(' ');
+    const pts = points
+      .map((p) => {
+        const px = 50 + ((p.x + 10) / 20) * 700;
+        const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
+        return `${px.toFixed(2)},${py.toFixed(2)}`;
+      })
+      .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
   svg += `\n`;
 
   // Sine Plot (Slot 3)
   svg += `  <text x="${width / 2}" y="490" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
-  let sPoints = sinePlots.flat();
-  let sValues = sPoints.map(p => p.y);
+  const sPoints = sinePlots.flat();
+  const sValues = sPoints.map((p) => p.y);
   let sMinY = Math.min(...sValues);
   let sMaxY = Math.max(...sValues);
-  if(sMinY === sMaxY) { sMinY -= 1; sMaxY += 1; }
+  if (sMinY === sMaxY) {
+    sMinY -= 1;
+    sMaxY += 1;
+  }
   sinePlots.forEach((points, idx) => {
     const color = sineColors[idx % sineColors.length];
-    const pts = points.map(p => {
-      const px = 50 + (p.x / 360) * 700;
-      const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
-      return `${px.toFixed(2)},${py.toFixed(2)}`;
-    }).join(' ');
+    const pts = points
+      .map((p) => {
+        const px = 50 + (p.x / 360) * 700;
+        const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
+        return `${px.toFixed(2)},${py.toFixed(2)}`;
+      })
+      .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
   svg += `\n`;
@@ -410,14 +444,16 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   const centerY = 850;
   polarPlots.forEach((points, idx) => {
     const color = polarColors[idx % polarColors.length];
-    const pts = points.map(p => {
-      const px = centerX + p.x;
-      const py = centerY - p.y;
-      return `${px.toFixed(2)},${py.toFixed(2)}`;
-    }).join(' ');
+    const pts = points
+      .map((p) => {
+        const px = centerX + p.x;
+        const py = centerY - p.y;
+        return `${px.toFixed(2)},${py.toFixed(2)}`;
+      })
+      .join(" ");
     svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
   });
-  svg += '</svg>';
+  svg += "</svg>";
   return svg;
 }
 
@@ -441,35 +477,55 @@ function plotToSvg({ formulas = [] } = {}) {
 
 function plotToAscii({ formulas = [] } = {}) {
   const { sine } = getPlotsFromFormulas(formulas);
-  let result = '';
+  let result = "";
   sine.forEach((points, idx) => {
     const header = `ASCII Art of Sine Wave - Formula ${idx + 1}:\n`;
     const rows = 21;
     const cols = points.length;
-    const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+    const grid = Array.from({ length: rows }, () => new Array(cols).fill(" "));
 
     for (let col = 0; col < cols; col++) {
       const { y } = points[col];
-      const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
-      grid[row][col] = '*';
+      const row = Math.round((1 - (y + 1) / 2) * (rows - 1));
+      grid[row][col] = "*";
     }
 
     const xAxisRow = Math.round(0.5 * (rows - 1));
     for (let col = 0; col < cols; col++) {
-      if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
+      if (grid[xAxisRow][col] === " ") grid[xAxisRow][col] = "-";
     }
-    result += header + grid.map(row => row.join('')).join('\n') + '\n\n';
+    result += header + grid.map((row) => row.join("")).join("\n") + "\n\n";
   });
   return result;
 }
 
 function plotToText({ formulas = [] } = {}) {
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
-  let output = '';
-  output += 'Quadratic Plot:\n' + quadratic.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
-  output += 'Linear Plot:\n' + linear.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
-  output += 'Sine Plot:\n' + sine.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
-  output += 'Polar Plot:\n' + polar.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n';
+  let output = "";
+  output +=
+    "Quadratic Plot:\n" +
+    quadratic
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .join("\n") +
+    "\n\n";
+  output +=
+    "Linear Plot:\n" +
+    linear
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .join("\n") +
+    "\n\n";
+  output +=
+    "Sine Plot:\n" +
+    sine
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .join("\n") +
+    "\n\n";
+  output +=
+    "Polar Plot:\n" +
+    polar
+      .map((points, i) => `Formula ${i + 1}: ` + points.map((p) => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "))
+      .join("\n") +
+    "\n";
   return output;
 }
 
@@ -479,65 +535,65 @@ function plotToJson({ formulas = [] } = {}) {
     quadratic,
     linear,
     sine,
-    polar
+    polar,
   };
 }
 
 function plotToCsv({ formulas = [] } = {}) {
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   const lines = [];
-  lines.push('Plot, Formula, x, y');
-  lines.push('--Quadratic Plot--');
+  lines.push("Plot, Formula, x, y");
+  lines.push("--Quadratic Plot--");
   quadratic.forEach((points, i) => {
-    points.forEach(p => {
-      lines.push(`Quadratic,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    points.forEach((p) => {
+      lines.push(`Quadratic,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
     });
   });
-  lines.push('');
-  lines.push('--Linear Plot--');
+  lines.push("");
+  lines.push("--Linear Plot--");
   linear.forEach((points, i) => {
-    points.forEach(p => {
-      lines.push(`Linear,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    points.forEach((p) => {
+      lines.push(`Linear,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
     });
   });
-  lines.push('');
-  lines.push('--Sine Plot--');
+  lines.push("");
+  lines.push("--Sine Plot--");
   sine.forEach((points, i) => {
-    points.forEach(p => {
-      lines.push(`Sine,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    points.forEach((p) => {
+      lines.push(`Sine,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
     });
   });
-  lines.push('');
-  lines.push('--Polar Plot--');
+  lines.push("");
+  lines.push("--Polar Plot--");
   polar.forEach((points, i) => {
-    points.forEach(p => {
-      lines.push(`Polar,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    points.forEach((p) => {
+      lines.push(`Polar,Formula ${i + 1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
     });
   });
   return lines.join("\n");
 }
 
-function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg' } = {}) {
-  let content = '';
-  if (type === 'svg') {
+function plotToFile({ formulas = [], outputFileName = "output.svg", type = "svg" } = {}) {
+  let content = "";
+  if (type === "svg") {
     content = plotToSvg({ formulas });
-  } else if (type === 'ascii') {
+  } else if (type === "ascii") {
     content = plotToAscii({ formulas });
-  } else if (type === 'text') {
+  } else if (type === "text") {
     content = plotToText({ formulas });
-  } else if (type === 'json') {
+  } else if (type === "json") {
     content = JSON.stringify(plotToJson({ formulas }), null, 2);
-  } else if (type === 'csv') {
+  } else if (type === "csv") {
     content = plotToCsv({ formulas });
-  } else if (type === 'html') {
+  } else if (type === "html") {
     content = plotToHtml({ formulas });
   } else {
-    throw new Error('Unsupported type provided for plotToFile');
+    throw new Error("Unsupported type provided for plotToFile");
   }
   try {
-    fs.writeFileSync(outputFileName, content, 'utf8');
+    fs.writeFileSync(outputFileName, content, "utf8");
   } catch (e) {
-    console.error('Error writing file:', e);
+    console.error("Error writing file:", e);
     throw e;
   }
   return outputFileName;
@@ -551,64 +607,74 @@ function main() {
   const args = process.argv.slice(2);
 
   // Added version flag support - version updated to match package version
-  if (args.includes('--version')) {
-    console.log('Equation Plotter Library version 0.1.1-38');
+  if (args.includes("--version")) {
+    console.log("Equation Plotter Library version 0.1.1-38");
     process.exit(0);
   }
 
-  if (args.includes('--help') || args.includes('-h')) {
-    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`);
+  if (args.includes("--help") || args.includes("-h")) {
+    console.log(
+      `Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`,
+    );
     process.exit(0);
   }
 
-  let outputFileName = 'output.svg';
-  let isJson = args.includes('--json');
-  let isCsv = args.includes('--csv');
+  let outputFileName = "output.svg";
+  let isJson = args.includes("--json");
+  let isCsv = args.includes("--csv");
   let isHtml = false;
-  let isAscii = args.includes('--ascii');
-
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv' && arg !== '--version' && arg !== '--ascii');
+  let isAscii = args.includes("--ascii");
+
+  const nonFormulaArgs = args.filter(
+    (arg) =>
+      !arg.includes(":") &&
+      !arg.includes("=") &&
+      arg !== "--json" &&
+      arg !== "--csv" &&
+      arg !== "--version" &&
+      arg !== "--ascii",
+  );
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
   // Force output type based on file extension
-  if (outputFileName.toLowerCase().endsWith('.json')) {
+  if (outputFileName.toLowerCase().endsWith(".json")) {
     isJson = true;
-  } else if (outputFileName.toLowerCase().endsWith('.csv')) {
+  } else if (outputFileName.toLowerCase().endsWith(".csv")) {
     isCsv = true;
-  } else if (outputFileName.toLowerCase().endsWith('.html')) {
+  } else if (outputFileName.toLowerCase().endsWith(".html")) {
     isHtml = true;
-  } else if (outputFileName.toLowerCase().endsWith('.txt') || outputFileName.toLowerCase().endsWith('.ascii')) {
+  } else if (outputFileName.toLowerCase().endsWith(".txt") || outputFileName.toLowerCase().endsWith(".ascii")) {
     isAscii = true;
   }
 
   // Collect formulas from arguments
-  const formulasList = args.filter(arg => arg.includes(':') || arg.includes('='));
+  const formulasList = args.filter((arg) => arg.includes(":") || arg.includes("="));
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulasList);
 
-  console.log('Demo: Raw formula strings and their parsed representations:');
+  console.log("Demo: Raw formula strings and their parsed representations:");
 
-  const rawQuad = 'x^2+y-1=0';
+  const rawQuad = "x^2+y-1=0";
   console.log(`Raw Formula: "${rawQuad}"`);
-  console.log('Parsed representation for Quadratic from Raw Formula:');
-  displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));
+  console.log("Parsed representation for Quadratic from Raw Formula:");
+  displayPlot("Quadratic from Raw Formula", plotFromString(rawQuad));
 
-  const rawLinear = 'linear:1,0,-10,10,1';
+  const rawLinear = "linear:1,0,-10,10,1";
   console.log(`\nRaw Formula: "${rawLinear}"`);
-  console.log('Parsed representation for Linear from Raw Formula:');
-  displayPlot('Linear from Raw Formula', plotFromString(rawLinear));
+  console.log("Parsed representation for Linear from Raw Formula:");
+  displayPlot("Linear from Raw Formula", plotFromString(rawLinear));
 
-  const rawSine = 'sine:1,1,0,0,360,10';
+  const rawSine = "sine:1,1,0,0,360,10";
   console.log(`\nRaw Formula: "${rawSine}"`);
-  console.log('Parsed ASCII Art for Sine:');
+  console.log("Parsed ASCII Art for Sine:");
   console.log(plotToAscii({ formulas: [rawSine] }));
 
-  const rawPolar = 'polar:200,2,5';
+  const rawPolar = "polar:200,2,5";
   console.log(`\nRaw Formula: "${rawPolar}"`);
-  console.log('Parsed representation for Polar from Raw Formula:');
-  displayPlot('Polar from Raw Formula', plotFromString(rawPolar));
+  console.log("Parsed representation for Polar from Raw Formula:");
+  displayPlot("Polar from Raw Formula", plotFromString(rawPolar));
 
-  let fileContent = '';
+  let fileContent = "";
   if (isJson) {
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);
   } else if (isCsv) {
@@ -622,14 +688,16 @@ function main() {
   }
 
   try {
-    fs.writeFileSync(outputFileName, fileContent, 'utf8');
-    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : isAscii ? 'ASCII' : 'SVG'} file generated: ${outputFileName}`);
+    fs.writeFileSync(outputFileName, fileContent, "utf8");
+    console.log(
+      `\n${isJson ? "JSON" : isCsv ? "CSV" : isHtml ? "HTML" : isAscii ? "ASCII" : "SVG"} file generated: ${outputFileName}`,
+    );
   } catch (err) {
     console.error(`Error writing file:`, err.message);
     process.exit(1);
   }
 
-  console.log('\nText Representation of Plots:');
+  console.log("\nText Representation of Plots:");
   console.log(plotToText({ formulas: formulasList }));
 }
 
@@ -637,4 +705,17 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToHtml, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar, plotLinear };
+export {
+  plotToSvg,
+  plotToAscii,
+  plotToText,
+  plotToJson,
+  plotToCsv,
+  plotToHtml,
+  plotToFile,
+  plotFromString,
+  plotQuadratic,
+  plotSine,
+  plotPolar,
+  plotLinear,
+};

commit 7aee0ecadfff48cd3597662e721279d65da87b86
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 05:54:05 2025 +0000

    Fixed HTML generation bug and added dynamic y-axis scaling for SVG plots. https://github.com/xn-intenton-z2a/repository0/issues/75 (#77)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index b5b445b..2c9b4e5 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -216,14 +216,13 @@ function parseGenericQuadratic(formulaStr) {
   if (formula.toLowerCase().startsWith('y=')) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
-  } else if (formula.endsWith('=0')) { // New clause to handle equations ending with =0
+  } else if (formula.endsWith('=0')) { // Handle equations ending with =0
     const left = formula.split('=')[0];
     const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
     if (!yMatch) throw new Error('No y term found in equation');
     let yCoeff = (yMatch[1] === '' || yMatch[1] === '+') ? 1 : (yMatch[1] === '-' ? -1 : parseFloat(yMatch[1]));
     let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
     const coeffs = extractQuadraticCoefficients(remaining);
-    // For equation of form (remaining) + y = 0, solve for y: y = - (remaining) / yCoeff
     return plotQuadraticParam({
       a: -coeffs.a / yCoeff,
       b: -coeffs.b / yCoeff,
@@ -350,9 +349,14 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   const sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
   const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
 
-  // Quadratic Plot (Slot 1: y from 50 to 250)
+  // Quadratic Plot (Slot 1)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
-  const qMinY = -100, qMaxY = 1;
+  let qPoints = quadraticPlots.flat();
+  let qValues = qPoints.map(p => p.y);
+  let qMinY = Math.min(...qValues);
+  let qMaxY = Math.max(...qValues);
+  if(qMinY === qMaxY) { qMinY -= 10; qMaxY += 10; }
+  // Slot for quadratic: y range mapped from 50 to 250
   quadraticPlots.forEach((points, idx) => {
     const color = quadraticColors[idx % quadraticColors.length];
     const pts = points.map(p => {
@@ -364,9 +368,13 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Linear Plot (Slot 2: y from 280 to 480)
+  // Linear Plot (Slot 2)
   svg += `  <text x="${width / 2}" y="260" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
-  const lMinY = -10, lMaxY = 10;
+  let lPoints = linearPlots.flat();
+  let lValues = lPoints.map(p => p.y);
+  let lMinY = Math.min(...lValues);
+  let lMaxY = Math.max(...lValues);
+  if(lMinY === lMaxY) { lMinY -= 10; lMaxY += 10; }
   linearPlots.forEach((points, idx) => {
     const color = linearColors[idx % linearColors.length];
     const pts = points.map(p => {
@@ -378,9 +386,13 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Sine Plot (Slot 3: y from 510 to 710)
+  // Sine Plot (Slot 3)
   svg += `  <text x="${width / 2}" y="490" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
-  const sMinY = -1, sMaxY = 1;
+  let sPoints = sinePlots.flat();
+  let sValues = sPoints.map(p => p.y);
+  let sMinY = Math.min(...sValues);
+  let sMaxY = Math.max(...sValues);
+  if(sMinY === sMaxY) { sMinY -= 1; sMaxY += 1; }
   sinePlots.forEach((points, idx) => {
     const color = sineColors[idx % sineColors.length];
     const pts = points.map(p => {
@@ -392,7 +404,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
   });
   svg += `\n`;
 
-  // Polar Plot (Slot 4: y from 750 to 950, centered at (400,850))
+  // Polar Plot (Slot 4: centered)
   svg += `  <text x="${width / 2}" y="730" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
   const centerX = width / 2;
   const centerY = 850;
@@ -415,7 +427,7 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
 
 function plotToHtml({ formulas = [] } = {}) {
   const svgContent = plotToSvg({ formulas });
-  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n">${svgContent}\n</body>\n</html>`;
+  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
 }
 
 // ----------------------------------

commit 30b496c5d0ceb1776da49a5fb37167ab6284daf8
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 05:44:56 2025 +0000

    Extended support for multiple formulas per plot type with distinct colors. https://github.com/xn-intenton-z2a/repository0/issues/74 (#76)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index dd9b3bf..b5b445b 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -16,6 +16,7 @@
  *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range.
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
+ *   - Multiple Formulas per Plot Type: Now supports multiple formulas for each plot type, each rendered with a distinct color.
  *
  * API Functions:
  *   - plotToSvg(options): Returns an SVG string of the plots.
@@ -293,29 +294,32 @@ function plotFromString(formulaStr) {
   }
 }
 
-// Helper function to parse formulas and return plots
+// Helper function to parse formulas and return plots grouped by type
 function getPlotsFromFormulas(formulas = []) {
-  let quadratic = null, linear = null, sine = null, polar = null;
+  const quadratic = [];
+  const sine = [];
+  const polar = [];
+  const linear = [];
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
-      if ((lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) && !quadratic) {
-        quadratic = plotFromString(formula);
-      } else if (lower.startsWith('sine:') && !sine) {
-        sine = plotFromString(formula);
-      } else if (lower.startsWith('polar:') && !polar) {
-        polar = plotFromString(formula);
-      } else if (lower.startsWith('linear:') && !linear) {
-        linear = plotFromString(formula);
+      if ((lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('=')))) {
+        quadratic.push(plotFromString(formula));
+      } else if (lower.startsWith('sine:')) {
+        sine.push(plotFromString(formula));
+      } else if (lower.startsWith('polar:')) {
+        polar.push(plotFromString(formula));
+      } else if (lower.startsWith('linear:')) {
+        linear.push(plotFromString(formula));
       }
     } catch (e) {
       console.error('Error parsing formula:', formula, e.message);
     }
   });
-  if (!quadratic) quadratic = plotQuadratic();
-  if (!linear) linear = plotLinear();
-  if (!sine) sine = plotSine();
-  if (!polar) polar = plotPolar();
+  if (quadratic.length === 0) quadratic.push(plotQuadratic());
+  if (linear.length === 0) linear.push(plotLinear());
+  if (sine.length === 0) sine.push(plotSine());
+  if (polar.length === 0) polar.push(plotPolar());
   return { quadratic, linear, sine, polar };
 }
 
@@ -332,55 +336,75 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPoints, linearPoints, sinePoints, polarPoints) {
-  // New SVG with 4 plots arranged vertically
+function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots) {
+  // New SVG with 4 plots arranged in separate slots
   const width = 800;
   const height = 1000;
   let svg = `<?xml version="1.0" encoding="UTF-8"?>\n`;
   svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n`;
   svg += `  <rect width="100%" height="100%" fill="white" />\n`;
 
+  // Define color palettes for each plot type
+  const quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
+  const linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
+  const sineColors = ["red", "darkred", "crimson", "firebrick", "tomato"];
+  const polarColors = ["green", "darkgreen", "limegreen", "seagreen", "forestgreen"];
+
   // Quadratic Plot (Slot 1: y from 50 to 250)
   svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
   const qMinY = -100, qMaxY = 1;
-  const quadPts = quadraticPoints.map(p => {
-    const px = 50 + ((p.x + 10) / 20) * 700;
-    const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
-    return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(' ');
-  svg += `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n`;
+  quadraticPlots.forEach((points, idx) => {
+    const color = quadraticColors[idx % quadraticColors.length];
+    const pts = points.map(p => {
+      const px = 50 + ((p.x + 10) / 20) * 700;
+      const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
+      return `${px.toFixed(2)},${py.toFixed(2)}`;
+    }).join(' ');
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
+  svg += `\n`;
 
   // Linear Plot (Slot 2: y from 280 to 480)
   svg += `  <text x="${width / 2}" y="260" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
   const lMinY = -10, lMaxY = 10;
-  const linearPts = linearPoints.map(p => {
-    const px = 50 + ((p.x + 10) / 20) * 700;
-    const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
-    return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(' ');
-  svg += `  <polyline points="${linearPts}" fill="none" stroke="orange" stroke-width="2" />\n\n`;
+  linearPlots.forEach((points, idx) => {
+    const color = linearColors[idx % linearColors.length];
+    const pts = points.map(p => {
+      const px = 50 + ((p.x + 10) / 20) * 700;
+      const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
+      return `${px.toFixed(2)},${py.toFixed(2)}`;
+    }).join(' ');
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
+  svg += `\n`;
 
   // Sine Plot (Slot 3: y from 510 to 710)
   svg += `  <text x="${width / 2}" y="490" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
   const sMinY = -1, sMaxY = 1;
-  const sinePts = sinePoints.map(p => {
-    const px = 50 + (p.x / 360) * 700;
-    const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
-    return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(' ');
-  svg += `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n`;
+  sinePlots.forEach((points, idx) => {
+    const color = sineColors[idx % sineColors.length];
+    const pts = points.map(p => {
+      const px = 50 + (p.x / 360) * 700;
+      const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
+      return `${px.toFixed(2)},${py.toFixed(2)}`;
+    }).join(' ');
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
+  svg += `\n`;
 
   // Polar Plot (Slot 4: y from 750 to 950, centered at (400,850))
   svg += `  <text x="${width / 2}" y="730" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
   const centerX = width / 2;
   const centerY = 850;
-  const polarPts = polarPoints.map(p => {
-    const px = centerX + p.x;
-    const py = centerY - p.y;
-    return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(' ');
-  svg += `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n`;
-
+  polarPlots.forEach((points, idx) => {
+    const color = polarColors[idx % polarColors.length];
+    const pts = points.map(p => {
+      const px = centerX + p.x;
+      const py = centerY - p.y;
+      return `${px.toFixed(2)},${py.toFixed(2)}`;
+    }).join(' ');
+    svg += `  <polyline points="${pts}" fill="none" stroke="${color}" stroke-width="2" />\n`;
+  });
   svg += '</svg>';
   return svg;
 }
@@ -391,7 +415,7 @@ function generateSvg(quadraticPoints, linearPoints, sinePoints, polarPoints) {
 
 function plotToHtml({ formulas = [] } = {}) {
   const svgContent = plotToSvg({ formulas });
-  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
+  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n">${svgContent}\n</body>\n</html>`;
 }
 
 // ----------------------------------
@@ -405,33 +429,35 @@ function plotToSvg({ formulas = [] } = {}) {
 
 function plotToAscii({ formulas = [] } = {}) {
   const { sine } = getPlotsFromFormulas(formulas);
-  const points = sine;
-  const rows = 21;
-  const cols = points.length;
-  const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
-
-  for (let col = 0; col < cols; col++) {
-    const { y } = points[col];
-    const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
-    grid[row][col] = '*';
-  }
+  let result = '';
+  sine.forEach((points, idx) => {
+    const header = `ASCII Art of Sine Wave - Formula ${idx + 1}:\n`;
+    const rows = 21;
+    const cols = points.length;
+    const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+
+    for (let col = 0; col < cols; col++) {
+      const { y } = points[col];
+      const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
+      grid[row][col] = '*';
+    }
 
-  const xAxisRow = Math.round(0.5 * (rows - 1));
-  for (let col = 0; col < cols; col++) {
-    if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
-  }
-  let asciiArt = 'ASCII Art of Sine Wave:\n';
-  asciiArt += grid.map(row => row.join('')).join('\n');
-  return asciiArt;
+    const xAxisRow = Math.round(0.5 * (rows - 1));
+    for (let col = 0; col < cols; col++) {
+      if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
+    }
+    result += header + grid.map(row => row.join('')).join('\n') + '\n\n';
+  });
+  return result;
 }
 
 function plotToText({ formulas = [] } = {}) {
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   let output = '';
-  output += 'Quadratic Plot:\n' + quadratic.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
-  output += 'Linear Plot:\n' + linear.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
-  output += 'Sine Plot:\n' + sine.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
-  output += 'Polar Plot:\n' + polar.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
+  output += 'Quadratic Plot:\n' + quadratic.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
+  output += 'Linear Plot:\n' + linear.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
+  output += 'Sine Plot:\n' + sine.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n\n';
+  output += 'Polar Plot:\n' + polar.map((points, i) => `Formula ${i+1}: ` + points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ')).join('\n') + '\n';
   return output;
 }
 
@@ -448,25 +474,33 @@ function plotToJson({ formulas = [] } = {}) {
 function plotToCsv({ formulas = [] } = {}) {
   const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   const lines = [];
-  lines.push('Plot, x, y');
+  lines.push('Plot, Formula, x, y');
   lines.push('--Quadratic Plot--');
-  quadratic.forEach(p => {
-    lines.push(`Quadratic,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  quadratic.forEach((points, i) => {
+    points.forEach(p => {
+      lines.push(`Quadratic,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    });
   });
   lines.push('');
   lines.push('--Linear Plot--');
-  linear.forEach(p => {
-    lines.push(`Linear,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  linear.forEach((points, i) => {
+    points.forEach(p => {
+      lines.push(`Linear,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    });
   });
   lines.push('');
   lines.push('--Sine Plot--');
-  sine.forEach(p => {
-    lines.push(`Sine,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  sine.forEach((points, i) => {
+    points.forEach(p => {
+      lines.push(`Sine,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    });
   });
   lines.push('');
   lines.push('--Polar Plot--');
-  polar.forEach(p => {
-    lines.push(`Polar,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  polar.forEach((points, i) => {
+    points.forEach(p => {
+      lines.push(`Polar,Formula ${i+1},${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+    });
   });
   return lines.join("\n");
 }

commit b0a57845f2888cb3330c421e2abe3ad3fcb2edfc
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 05:17:31 2025 +0000

    Added linear plot support and updated SVG text JSON and CSV outputs to include linear plots along with improved multi-plot SVG layout. https://github.com/xn-intenton-z2a/repository0/issues/72 (#73)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index c6d36c3..dd9b3bf 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,12 +7,13 @@
  *
  * Description:
  *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
- *   It supports different mathematical functions including quadratic, sine, and polar equations.
+ *   It supports different mathematical functions including quadratic, sine, polar, and now linear equations.
  *
  * Features:
  *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings.
  *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
  *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
+ *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range.
  *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
  *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *
@@ -25,7 +26,7 @@
  *   - plotToHtml(options): Returns an HTML string that embeds the SVG plot.
  *   - plotToFile(options): Saves the generated output to a file and returns the path.
  *   - plotFromString(formulaStr): Parses a formula string to generate plot points.
- *   - plotQuadratic, plotSine, plotPolar: Generate plots with default parameters.
+ *   - plotQuadratic, plotSine, plotPolar, plotLinear: Generate plots with default parameters.
  *
  * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
@@ -33,6 +34,7 @@
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
+ *   $ node src/lib/main.js output.svg "linear:1,0,-10,10,1" "x^2+y-1=0" "sine:1,1,0,0,360,10" "polar:200,2,5"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
@@ -80,6 +82,14 @@ function plotPolarParam({ scale = 200, multiplier = 2, step = 5, degMin = 0, deg
   return points;
 }
 
+function plotLinearParam({ m = 1, b = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
+  const points = [];
+  for (let x = xMin; x <= xMax; x += step) {
+    points.push({ x, y: m * x + b });
+  }
+  return points;
+}
+
 // Backward compatible wrappers
 function plotQuadratic() {
   return plotQuadraticParam();
@@ -93,6 +103,10 @@ function plotPolar() {
   return plotPolarParam();
 }
 
+function plotLinear() {
+  return plotLinearParam();
+}
+
 // ----------------------------------
 // Formula Parsing Functions
 // ----------------------------------
@@ -139,6 +153,20 @@ function parsePolar(formulaStr) {
   });
 }
 
+function parseLinear(formulaStr) {
+  const parts = formulaStr.split(':');
+  if (parts.length < 2) throw new Error('Invalid linear formula string');
+  const params = parts[1].split(',').map(Number);
+  const [m, b, xMin, xMax, step] = params;
+  return plotLinearParam({
+    m: isNaN(m) ? 1 : m,
+    b: isNaN(b) ? 0 : b,
+    xMin: isNaN(xMin) ? -10 : xMin,
+    xMax: isNaN(xMax) ? 10 : xMax,
+    step: isNaN(step) ? 1 : step
+  });
+}
+
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, '');
@@ -249,6 +277,7 @@ function plotFromString(formulaStr) {
     if (lowerStr.startsWith('quadratic:')) return parseQuadratic(formulaStr);
     if (lowerStr.startsWith('sine:')) return parseSine(formulaStr);
     if (lowerStr.startsWith('polar:')) return parsePolar(formulaStr);
+    if (lowerStr.startsWith('linear:')) return parseLinear(formulaStr);
     console.error('Unknown prefixed formula type.');
     return [];
   } else if (formulaStr.includes('=')) {
@@ -266,7 +295,7 @@ function plotFromString(formulaStr) {
 
 // Helper function to parse formulas and return plots
 function getPlotsFromFormulas(formulas = []) {
-  let quadratic = null, sine = null, polar = null;
+  let quadratic = null, linear = null, sine = null, polar = null;
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
@@ -276,15 +305,18 @@ function getPlotsFromFormulas(formulas = []) {
         sine = plotFromString(formula);
       } else if (lower.startsWith('polar:') && !polar) {
         polar = plotFromString(formula);
+      } else if (lower.startsWith('linear:') && !linear) {
+        linear = plotFromString(formula);
       }
     } catch (e) {
       console.error('Error parsing formula:', formula, e.message);
     }
   });
   if (!quadratic) quadratic = plotQuadratic();
+  if (!linear) linear = plotLinear();
   if (!sine) sine = plotSine();
   if (!polar) polar = plotPolar();
-  return { quadratic, sine, polar };
+  return { quadratic, linear, sine, polar };
 }
 
 // ----------------------------------
@@ -300,40 +332,57 @@ function displayPlot(plotName, points) {
 // SVG Generation Function
 // ----------------------------------
 
-function generateSvg(quadraticPoints, sinePoints, polarPoints) {
+function generateSvg(quadraticPoints, linearPoints, sinePoints, polarPoints) {
+  // New SVG with 4 plots arranged vertically
   const width = 800;
-  const height = 800;
-
+  const height = 1000;
+  let svg = `<?xml version="1.0" encoding="UTF-8"?>\n`;
+  svg += `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n`;
+  svg += `  <rect width="100%" height="100%" fill="white" />\n`;
+
+  // Quadratic Plot (Slot 1: y from 50 to 250)
+  svg += `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n`;
+  const qMinY = -100, qMaxY = 1;
   const quadPts = quadraticPoints.map(p => {
-    const px = 50 + (p.x + 10) * ((750 - 50) / 20);
-    const py = 50 + (100 - p.y) * (200 / 100);
+    const px = 50 + ((p.x + 10) / 20) * 700;
+    const py = 250 - ((p.y - qMinY) / (qMaxY - qMinY)) * 200;
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
+  svg += `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n`;
+
+  // Linear Plot (Slot 2: y from 280 to 480)
+  svg += `  <text x="${width / 2}" y="260" font-size="16" text-anchor="middle">Linear Plot: y = m*x + b</text>\n`;
+  const lMinY = -10, lMaxY = 10;
+  const linearPts = linearPoints.map(p => {
+    const px = 50 + ((p.x + 10) / 20) * 700;
+    const py = 480 - ((p.y - lMinY) / (lMaxY - lMinY)) * 200;
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(' ');
+  svg += `  <polyline points="${linearPts}" fill="none" stroke="orange" stroke-width="2" />\n\n`;
 
+  // Sine Plot (Slot 3: y from 510 to 710)
+  svg += `  <text x="${width / 2}" y="490" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n`;
+  const sMinY = -1, sMaxY = 1;
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360);
-    const py = 350 + (1 - p.y) * (200 / 2);
+    const px = 50 + (p.x / 360) * 700;
+    const py = 710 - ((p.y - sMinY) / (sMaxY - sMinY)) * 200;
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
+  svg += `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n`;
 
+  // Polar Plot (Slot 4: y from 750 to 950, centered at (400,850))
+  svg += `  <text x="${width / 2}" y="730" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n`;
   const centerX = width / 2;
-  const centerY = 700;
+  const centerY = 850;
   const polarPts = polarPoints.map(p => {
     const px = centerX + p.x;
     const py = centerY - p.y;
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
+  svg += `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n`;
 
-  return `<?xml version="1.0" encoding="UTF-8"?>\n` +
-         `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
-         `  <rect width="100%" height="100%" fill="white" />\n` +
-         `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n` +
-         `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
-         `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n` +
-         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n` +
-         `  <text x="${width / 2}" y="670" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n` +
-         `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n` +
-         `</svg>`;
+  svg += '</svg>';
+  return svg;
 }
 
 // ----------------------------------
@@ -350,8 +399,8 @@ function plotToHtml({ formulas = [] } = {}) {
 // ----------------------------------
 
 function plotToSvg({ formulas = [] } = {}) {
-  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
-  return generateSvg(quadratic, sine, polar);
+  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
+  return generateSvg(quadratic, linear, sine, polar);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
@@ -377,25 +426,27 @@ function plotToAscii({ formulas = [] } = {}) {
 }
 
 function plotToText({ formulas = [] } = {}) {
-  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   let output = '';
   output += 'Quadratic Plot:\n' + quadratic.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
+  output += 'Linear Plot:\n' + linear.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
   output += 'Sine Plot:\n' + sine.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
   output += 'Polar Plot:\n' + polar.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
   return output;
 }
 
 function plotToJson({ formulas = [] } = {}) {
-  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   return {
     quadratic,
+    linear,
     sine,
     polar
   };
 }
 
 function plotToCsv({ formulas = [] } = {}) {
-  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
+  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulas);
   const lines = [];
   lines.push('Plot, x, y');
   lines.push('--Quadratic Plot--');
@@ -403,6 +454,11 @@ function plotToCsv({ formulas = [] } = {}) {
     lines.push(`Quadratic,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
   });
   lines.push('');
+  lines.push('--Linear Plot--');
+  linear.forEach(p => {
+    lines.push(`Linear,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  });
+  lines.push('');
   lines.push('--Sine Plot--');
   sine.forEach(p => {
     lines.push(`Sine,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
@@ -455,21 +511,7 @@ function main() {
   }
 
   if (args.includes('--help') || args.includes('-h')) {
-    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]
-
-Options:
-  --help, -h       Show this help message
-  --json           Generate output as JSON instead of SVG
-  --csv            Generate output as CSV instead of SVG
-  --ascii          Generate output as ASCII art instead of SVG
-  --version        Show version information
-  (output file extension .html will generate HTML output)
-
-Formula String Formats:
-  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"
-  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
-  Polar:     "polar:scale,multiplier[,step]"
-`);
+    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n\nOptions:\n  --help, -h       Show this help message\n  --json           Generate output as JSON instead of SVG\n  --csv            Generate output as CSV instead of SVG\n  --ascii          Generate output as ASCII art instead of SVG\n  --version        Show version information\n  (output file extension .html will generate HTML output)\n\nFormula String Formats:\n  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"\n  Linear:    "linear:m,b[,xMin,xMax,step]"\n  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n  Polar:     "polar:scale,multiplier[,step]"\n`);
     process.exit(0);
   }
 
@@ -496,7 +538,7 @@ Formula String Formats:
 
   // Collect formulas from arguments
   const formulasList = args.filter(arg => arg.includes(':') || arg.includes('='));
-  const { quadratic, sine, polar } = getPlotsFromFormulas(formulasList);
+  const { quadratic, linear, sine, polar } = getPlotsFromFormulas(formulasList);
 
   console.log('Demo: Raw formula strings and their parsed representations:');
 
@@ -505,6 +547,11 @@ Formula String Formats:
   console.log('Parsed representation for Quadratic from Raw Formula:');
   displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));
 
+  const rawLinear = 'linear:1,0,-10,10,1';
+  console.log(`\nRaw Formula: "${rawLinear}"`);
+  console.log('Parsed representation for Linear from Raw Formula:');
+  displayPlot('Linear from Raw Formula', plotFromString(rawLinear));
+
   const rawSine = 'sine:1,1,0,0,360,10';
   console.log(`\nRaw Formula: "${rawSine}"`);
   console.log('Parsed ASCII Art for Sine:');
@@ -525,7 +572,7 @@ Formula String Formats:
   } else if (isAscii) {
     fileContent = plotToAscii({ formulas: formulasList });
   } else {
-    fileContent = generateSvg(quadratic, sine, polar);
+    fileContent = plotToSvg({ formulas: formulasList });
   }
 
   try {
@@ -544,4 +591,4 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToHtml, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };
+export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToHtml, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar, plotLinear };

commit 74e036ac95f854d11bb75e24ad216893e8fda5c4
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 04:53:39 2025 +0000

    Improved quadratic equation parsing by adding a specific branch for formulas ending with 0 to correctly solve for y. https://github.com/xn-intenton-z2a/repository0/issues/70 (#71)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 093bf2d..c6d36c3 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -187,12 +187,27 @@ function parseGenericQuadratic(formulaStr) {
   if (formula.toLowerCase().startsWith('y=')) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
+  } else if (formula.endsWith('=0')) { // New clause to handle equations ending with =0
+    const left = formula.split('=')[0];
+    const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
+    if (!yMatch) throw new Error('No y term found in equation');
+    let yCoeff = (yMatch[1] === '' || yMatch[1] === '+') ? 1 : (yMatch[1] === '-' ? -1 : parseFloat(yMatch[1]));
+    let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
+    const coeffs = extractQuadraticCoefficients(remaining);
+    // For equation of form (remaining) + y = 0, solve for y: y = - (remaining) / yCoeff
+    return plotQuadraticParam({
+      a: -coeffs.a / yCoeff,
+      b: -coeffs.b / yCoeff,
+      c: -coeffs.c / yCoeff,
+      xMin: -10,
+      xMax: 10,
+      step: 1
+    });
   } else {
     const parts = formula.split('=');
     if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
     let left = parts[0];
     let right = parts[1];
-    // Improved parsing: if left contains 'y', isolate it by removing the y term
     if (left.includes('y')) {
       const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
       let yCoeff = 1;
@@ -202,12 +217,9 @@ function parseGenericQuadratic(formulaStr) {
         else if (coeffStr === '-') yCoeff = -1;
         else yCoeff = parseFloat(coeffStr);
       }
-      // Remove the y term from the left side
       let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
-      // Now, y = (right - remaining) / yCoeff
       const constantRight = parseFloat(right) || 0;
       const coeffs = extractQuadraticCoefficients(remaining);
-      // The polynomial is: y = (-a/yCoeff)x^2 + (-b/yCoeff)x + ((right - c)/yCoeff)
       return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantRight - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
     } else if (right.includes('y')) {
       const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
@@ -223,7 +235,6 @@ function parseGenericQuadratic(formulaStr) {
       const coeffs = extractQuadraticCoefficients(remaining);
       return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantLeft - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
     } else {
-      // fallback to original inversion method
       let nonYPart = left;
       const newExpr = (right || '0') + invertExpression(nonYPart);
       return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });

commit b5a70b2fa604ed888006118705c1bb49cd6aa584
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 04:44:41 2025 +0000

    Updated version flag to match package version and improved --help message including --ascii option. https://github.com/xn-intenton-z2a/repository0/issues/67 (#69)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 77db639..093bf2d 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -32,6 +32,7 @@
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
+ *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
@@ -191,7 +192,7 @@ function parseGenericQuadratic(formulaStr) {
     if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
     let left = parts[0];
     let right = parts[1];
-    // Improved parsing: if left contains 'y', isolate it by removing the y term and solving for y
+    // Improved parsing: if left contains 'y', isolate it by removing the y term
     if (left.includes('y')) {
       const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
       let yCoeff = 1;
@@ -204,11 +205,9 @@ function parseGenericQuadratic(formulaStr) {
       // Remove the y term from the left side
       let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
       // Now, y = (right - remaining) / yCoeff
-      // For our simple case, assume right is a constant or empty
       const constantRight = parseFloat(right) || 0;
       const coeffs = extractQuadraticCoefficients(remaining);
-      // The polynomial is: y = (right - (ax^2 + bx + c)) / yCoeff
-      // => y = (-a/yCoeff)x^2 + (-b/yCoeff)x + ((right - c)/yCoeff)
+      // The polynomial is: y = (-a/yCoeff)x^2 + (-b/yCoeff)x + ((right - c)/yCoeff)
       return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantRight - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
     } else if (right.includes('y')) {
       const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
@@ -438,9 +437,9 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
 function main() {
   const args = process.argv.slice(2);
 
-  // Added version flag support
+  // Added version flag support - version updated to match package version
   if (args.includes('--version')) {
-    console.log('Equation Plotter Library version 0.1.0');
+    console.log('Equation Plotter Library version 0.1.1-38');
     process.exit(0);
   }
 
@@ -451,6 +450,7 @@ Options:
   --help, -h       Show this help message
   --json           Generate output as JSON instead of SVG
   --csv            Generate output as CSV instead of SVG
+  --ascii          Generate output as ASCII art instead of SVG
   --version        Show version information
   (output file extension .html will generate HTML output)
 
@@ -466,9 +466,9 @@ Formula String Formats:
   let isJson = args.includes('--json');
   let isCsv = args.includes('--csv');
   let isHtml = false;
-  let isAscii = false;
+  let isAscii = args.includes('--ascii');
 
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv' && arg !== '--version');
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv' && arg !== '--version' && arg !== '--ascii');
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }

commit 2a9886d4d1e2b05522c6c0efa635aeec99a1632e
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 04:37:12 2025 +0000

    Added support for --version CLI flag and updated help message. https://github.com/xn-intenton-z2a/repository0/issues/67 (#68)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a3ad622..77db639 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -438,6 +438,12 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
 function main() {
   const args = process.argv.slice(2);
 
+  // Added version flag support
+  if (args.includes('--version')) {
+    console.log('Equation Plotter Library version 0.1.0');
+    process.exit(0);
+  }
+
   if (args.includes('--help') || args.includes('-h')) {
     console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]
 
@@ -445,6 +451,7 @@ Options:
   --help, -h       Show this help message
   --json           Generate output as JSON instead of SVG
   --csv            Generate output as CSV instead of SVG
+  --version        Show version information
   (output file extension .html will generate HTML output)
 
 Formula String Formats:
@@ -461,7 +468,7 @@ Formula String Formats:
   let isHtml = false;
   let isAscii = false;
 
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv');
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv' && arg !== '--version');
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }

commit 89e814ef55e68adc5c4362a82bbb393863be077c
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 04:18:05 2025 +0000

    Added support for ASCII output file based on extension and improved generic quadratic parsing. https://github.com/xn-intenton-z2a/repository0/issues/65 (#66)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 49b476a..a3ad622 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -191,16 +191,43 @@ function parseGenericQuadratic(formulaStr) {
     if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
     let left = parts[0];
     let right = parts[1];
+    // Improved parsing: if left contains 'y', isolate it by removing the y term and solving for y
     if (left.includes('y')) {
-      const nonYPart = left.replace('y', '');
-      const newExpr = (right || '0') + invertExpression(nonYPart);
-      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
+      const yMatch = left.match(/([+-]?\d*\.?\d*)y/);
+      let yCoeff = 1;
+      if (yMatch) {
+        const coeffStr = yMatch[1];
+        if (coeffStr === '' || coeffStr === '+') yCoeff = 1;
+        else if (coeffStr === '-') yCoeff = -1;
+        else yCoeff = parseFloat(coeffStr);
+      }
+      // Remove the y term from the left side
+      let remaining = left.replace(/([+-]?\d*\.?\d*)y/, '');
+      // Now, y = (right - remaining) / yCoeff
+      // For our simple case, assume right is a constant or empty
+      const constantRight = parseFloat(right) || 0;
+      const coeffs = extractQuadraticCoefficients(remaining);
+      // The polynomial is: y = (right - (ax^2 + bx + c)) / yCoeff
+      // => y = (-a/yCoeff)x^2 + (-b/yCoeff)x + ((right - c)/yCoeff)
+      return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantRight - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
     } else if (right.includes('y')) {
-      const nonYPart = right.replace('y', '');
-      const newExpr = (left || '0') + invertExpression(nonYPart);
-      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
+      const yMatch = right.match(/([+-]?\d*\.?\d*)y/);
+      let yCoeff = 1;
+      if (yMatch) {
+        const coeffStr = yMatch[1];
+        if (coeffStr === '' || coeffStr === '+') yCoeff = 1;
+        else if (coeffStr === '-') yCoeff = -1;
+        else yCoeff = parseFloat(coeffStr);
+      }
+      let remaining = right.replace(/([+-]?\d*\.?\d*)y/, '');
+      const constantLeft = parseFloat(left) || 0;
+      const coeffs = extractQuadraticCoefficients(remaining);
+      return plotQuadraticParam({ a: -coeffs.a / yCoeff, b: -coeffs.b / yCoeff, c: (constantLeft - coeffs.c) / yCoeff, xMin: -10, xMax: 10, step: 1 });
     } else {
-      throw new Error('No y variable found in quadratic equation');
+      // fallback to original inversion method
+      let nonYPart = left;
+      const newExpr = (right || '0') + invertExpression(nonYPart);
+      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
     }
   }
 }
@@ -432,6 +459,7 @@ Formula String Formats:
   let isJson = args.includes('--json');
   let isCsv = args.includes('--csv');
   let isHtml = false;
+  let isAscii = false;
 
   const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv');
   if (nonFormulaArgs.length > 0) {
@@ -444,6 +472,8 @@ Formula String Formats:
     isCsv = true;
   } else if (outputFileName.toLowerCase().endsWith('.html')) {
     isHtml = true;
+  } else if (outputFileName.toLowerCase().endsWith('.txt') || outputFileName.toLowerCase().endsWith('.ascii')) {
+    isAscii = true;
   }
 
   // Collect formulas from arguments
@@ -474,13 +504,15 @@ Formula String Formats:
     fileContent = plotToCsv({ formulas: formulasList });
   } else if (isHtml) {
     fileContent = plotToHtml({ formulas: formulasList });
+  } else if (isAscii) {
+    fileContent = plotToAscii({ formulas: formulasList });
   } else {
     fileContent = generateSvg(quadratic, sine, polar);
   }
 
   try {
     fs.writeFileSync(outputFileName, fileContent, 'utf8');
-    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : 'SVG'} file generated: ${outputFileName}`);
+    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : isAscii ? 'ASCII' : 'SVG'} file generated: ${outputFileName}`);
   } catch (err) {
     console.error(`Error writing file:`, err.message);
     process.exit(1);

commit f3203cd5b2f62d3e68c3965b92c615b4dd53c1ee
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 03:40:03 2025 +0000

    Removed unused function and improved code formatting for better readability. https://github.com/xn-intenton-z2a/repository0/issues/63 (#64)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 2b9220c..49b476a 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -183,7 +183,6 @@ function invertExpression(expr) {
 // Parse a generic quadratic formula in standard algebraic form
 function parseGenericQuadratic(formulaStr) {
   let formula = formulaStr.replace(/\s+/g, '');
-  // if formula starts with 'y=', simply parse the expression after y=
   if (formula.toLowerCase().startsWith('y=')) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
@@ -192,7 +191,6 @@ function parseGenericQuadratic(formulaStr) {
     if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
     let left = parts[0];
     let right = parts[1];
-    // If 'y' exists in left or right, rearrange the equation to solve for y
     if (left.includes('y')) {
       const nonYPart = left.replace('y', '');
       const newExpr = (right || '0') + invertExpression(nonYPart);
@@ -230,7 +228,6 @@ function plotFromString(formulaStr) {
 }
 
 // Helper function to parse formulas and return plots
-// Modified to use the first provided valid formula for each type, avoiding overwrites
 function getPlotsFromFormulas(formulas = []) {
   let quadratic = null, sine = null, polar = null;
   formulas.forEach(formula => {
@@ -262,26 +259,6 @@ function displayPlot(plotName, points) {
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
-function displaySineAscii(points) {
-  const rows = 21;
-  const cols = points.length;
-  const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
-
-  for (let col = 0; col < cols; col++) {
-    const { y } = points[col];
-    const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
-    grid[row][col] = '*';
-  }
-
-  const xAxisRow = Math.round(0.5 * (rows - 1));
-  for (let col = 0; col < cols; col++) {
-    if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
-  }
-
-  console.log('ASCII Art of Sine Wave:');
-  grid.forEach(row => console.log(row.join('')));
-}
-
 // ----------------------------------
 // SVG Generation Function
 // ----------------------------------
@@ -485,7 +462,6 @@ Formula String Formats:
   console.log('Parsed ASCII Art for Sine:');
   console.log(plotToAscii({ formulas: [rawSine] }));
 
-  // Added test demonstration for Polar formula
   const rawPolar = 'polar:200,2,5';
   console.log(`\nRaw Formula: "${rawPolar}"`);
   console.log('Parsed representation for Polar from Raw Formula:');

commit 420736cd90f3d9fbc222386c1b2b81a251af84ed
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 03:18:26 2025 +0000

    Modified getPlotsFromFormulas to only set each plot type once preventing later formulas from overwriting earlier ones. https://github.com/xn-intenton-z2a/repository0/issues/61 (#62)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index c624d22..2b9220c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -230,16 +230,17 @@ function plotFromString(formulaStr) {
 }
 
 // Helper function to parse formulas and return plots
+// Modified to use the first provided valid formula for each type, avoiding overwrites
 function getPlotsFromFormulas(formulas = []) {
-  let quadratic, sine, polar;
+  let quadratic = null, sine = null, polar = null;
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
-      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
+      if ((lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) && !quadratic) {
         quadratic = plotFromString(formula);
-      } else if (lower.startsWith('sine:')) {
+      } else if (lower.startsWith('sine:') && !sine) {
         sine = plotFromString(formula);
-      } else if (lower.startsWith('polar:')) {
+      } else if (lower.startsWith('polar:') && !polar) {
         polar = plotFromString(formula);
       }
     } catch (e) {

commit 96a28657dca249680d6f49a4c3fd47d413a39357
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 03:04:13 2025 +0000

    Added polar formula test demonstration in main to enhance test output. https://github.com/xn-intenton-z2a/repository0/issues/59 (#60)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a253a5f..c624d22 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -484,6 +484,12 @@ Formula String Formats:
   console.log('Parsed ASCII Art for Sine:');
   console.log(plotToAscii({ formulas: [rawSine] }));
 
+  // Added test demonstration for Polar formula
+  const rawPolar = 'polar:200,2,5';
+  console.log(`\nRaw Formula: "${rawPolar}"`);
+  console.log('Parsed representation for Polar from Raw Formula:');
+  displayPlot('Polar from Raw Formula', plotFromString(rawPolar));
+
   let fileContent = '';
   if (isJson) {
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);

commit 95bd077ad898235550ba66eaeea1d6c03c450c4f
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 02:44:58 2025 +0000

    Refactored duplicated formula processing into a helper function and tidied up code formatting. https://github.com/xn-intenton-z2a/repository0/issues/57 (#58)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 275a4ab..a253a5f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -229,6 +229,29 @@ function plotFromString(formulaStr) {
   }
 }
 
+// Helper function to parse formulas and return plots
+function getPlotsFromFormulas(formulas = []) {
+  let quadratic, sine, polar;
+  formulas.forEach(formula => {
+    const lower = formula.toLowerCase();
+    try {
+      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
+        quadratic = plotFromString(formula);
+      } else if (lower.startsWith('sine:')) {
+        sine = plotFromString(formula);
+      } else if (lower.startsWith('polar:')) {
+        polar = plotFromString(formula);
+      }
+    } catch (e) {
+      console.error('Error parsing formula:', formula, e.message);
+    }
+  });
+  if (!quadratic) quadratic = plotQuadratic();
+  if (!sine) sine = plotSine();
+  if (!polar) polar = plotPolar();
+  return { quadratic, sine, polar };
+}
+
 // ----------------------------------
 // Display Functions
 // ----------------------------------
@@ -312,42 +335,13 @@ function plotToHtml({ formulas = [] } = {}) {
 // ----------------------------------
 
 function plotToSvg({ formulas = [] } = {}) {
-  let quadraticPlot = null;
-  let sinePlot = null;
-  let polarPlot = null;
-
-  formulas.forEach(formula => {
-    const lower = formula.toLowerCase();
-    try {
-      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
-        quadraticPlot = plotFromString(formula);
-      } else if (lower.startsWith('sine:')) {
-        sinePlot = plotFromString(formula);
-      } else if (lower.startsWith('polar:')) {
-        polarPlot = plotFromString(formula);
-      }
-    } catch (e) {
-      console.error(e);
-    }
-  });
-
-  if (!quadraticPlot) quadraticPlot = plotQuadratic();
-  if (!sinePlot) sinePlot = plotSine();
-  if (!polarPlot) polarPlot = plotPolar();
-
-  return generateSvg(quadraticPlot, sinePlot, polarPlot);
+  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
+  return generateSvg(quadratic, sine, polar);
 }
 
 function plotToAscii({ formulas = [] } = {}) {
-  let points = [];
-  formulas.forEach(formula => {
-    if (formula.toLowerCase().startsWith('sine:')) {
-      points = plotFromString(formula);
-    }
-  });
-  if (points.length === 0) {
-    points = plotSine();
-  }
+  const { sine } = getPlotsFromFormulas(formulas);
+  const points = sine;
   const rows = 21;
   const cols = points.length;
   const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
@@ -368,105 +362,39 @@ function plotToAscii({ formulas = [] } = {}) {
 }
 
 function plotToText({ formulas = [] } = {}) {
+  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
   let output = '';
-  let quadraticPlot = null;
-  let sinePlot = null;
-  let polarPlot = null;
-
-  formulas.forEach(formula => {
-    const lower = formula.toLowerCase();
-    try {
-      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
-        quadraticPlot = plotFromString(formula);
-      } else if (lower.startsWith('sine:')) {
-        sinePlot = plotFromString(formula);
-      } else if (lower.startsWith('polar:')) {
-        polarPlot = plotFromString(formula);
-      }
-    } catch (err) {
-      console.error(err);
-    }
-  });
-
-  if (!quadraticPlot) quadraticPlot = plotQuadratic();
-  if (!sinePlot) sinePlot = plotSine();
-  if (!polarPlot) polarPlot = plotPolar();
-
-  output += 'Quadratic Plot:\n' + quadraticPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
-  output += 'Sine Plot:\n' + sinePlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
-  output += 'Polar Plot:\n' + polarPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
+  output += 'Quadratic Plot:\n' + quadratic.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
+  output += 'Sine Plot:\n' + sine.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
+  output += 'Polar Plot:\n' + polar.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
   return output;
 }
 
 function plotToJson({ formulas = [] } = {}) {
-  let quadraticPlot = null;
-  let sinePlot = null;
-  let polarPlot = null;
-
-  formulas.forEach(formula => {
-    const lower = formula.toLowerCase();
-    try {
-      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
-        quadraticPlot = plotFromString(formula);
-      } else if (lower.startsWith('sine:')) {
-        sinePlot = plotFromString(formula);
-      } else if (lower.startsWith('polar:')) {
-        polarPlot = plotFromString(formula);
-      }
-    } catch (e) {
-      console.error(e);
-    }
-  });
-
-  if (!quadraticPlot) quadraticPlot = plotQuadratic();
-  if (!sinePlot) sinePlot = plotSine();
-  if (!polarPlot) polarPlot = plotPolar();
-
+  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
   return {
-    quadratic: quadraticPlot,
-    sine: sinePlot,
-    polar: polarPlot
+    quadratic,
+    sine,
+    polar
   };
 }
 
 function plotToCsv({ formulas = [] } = {}) {
-  let quadraticPlot = null;
-  let sinePlot = null;
-  let polarPlot = null;
-
-  formulas.forEach(formula => {
-    const lower = formula.toLowerCase();
-    try {
-      if (lower.startsWith('quadratic:') || (formula.includes('=') && !lower.startsWith('sine:') && !lower.startsWith('polar:'))) {
-        quadraticPlot = plotFromString(formula);
-      } else if (lower.startsWith('sine:')) {
-        sinePlot = plotFromString(formula);
-      } else if (lower.startsWith('polar:')) {
-        polarPlot = plotFromString(formula);
-      }
-    } catch (e) {
-      console.error(e);
-    }
-  });
-
-  if (!quadraticPlot) quadraticPlot = plotQuadratic();
-  if (!sinePlot) sinePlot = plotSine();
-  if (!polarPlot) polarPlot = plotPolar();
-
+  const { quadratic, sine, polar } = getPlotsFromFormulas(formulas);
   const lines = [];
-  lines.push("Plot, x, y");
-  lines.push("--Quadratic Plot--");
-  quadraticPlot.forEach(p => {
+  lines.push('Plot, x, y');
+  lines.push('--Quadratic Plot--');
+  quadratic.forEach(p => {
     lines.push(`Quadratic,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
   });
-  lines.push("");
-  lines.push("--Sine Plot--");
-  sinePlot.forEach(p => {
+  lines.push('');
+  lines.push('--Sine Plot--');
+  sine.forEach(p => {
     lines.push(`Sine,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
   });
-  lines.push("");
-  lines.push("--Polar Plot--");
-  polarPlot.forEach(p => {
+  lines.push('');
+  lines.push('--Polar Plot--');
+  polar.forEach(p => {
     lines.push(`Polar,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
   });
   return lines.join("\n");
@@ -523,11 +451,6 @@ Formula String Formats:
   }
 
   let outputFileName = 'output.svg';
-  let quadraticPlot = null;
-  let sinePlot = null;
-  let polarPlot = null;
-
-  // Determine if JSON, CSV, or HTML output is requested
   let isJson = args.includes('--json');
   let isCsv = args.includes('--csv');
   let isHtml = false;
@@ -536,7 +459,7 @@ Formula String Formats:
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
-  // If output file extension is .json, .csv, or .html, then force respective output
+  // Force output type based on file extension
   if (outputFileName.toLowerCase().endsWith('.json')) {
     isJson = true;
   } else if (outputFileName.toLowerCase().endsWith('.csv')) {
@@ -546,28 +469,8 @@ Formula String Formats:
   }
 
   // Collect formulas from arguments
-  const formulasList = args.filter(arg => (arg.includes(':') || arg.includes('=')));
-
-  formulasList.forEach(arg => {
-    const lowerArg = arg.toLowerCase();
-    try {
-      if (lowerArg.startsWith('quadratic:') || (arg.includes('=') && !lowerArg.startsWith('sine:') && !lowerArg.startsWith('polar:'))) {
-        quadraticPlot = plotFromString(arg);
-      } else if (lowerArg.startsWith('sine:')) {
-        sinePlot = plotFromString(arg);
-      } else if (lowerArg.startsWith('polar:')) {
-        polarPlot = plotFromString(arg);
-      } else {
-        console.error('Unknown formula type in argument:', arg);
-      }
-    } catch (err) {
-      console.error(`Error parsing formula '${arg}':`, err.message);
-    }
-  });
-
-  if (!quadraticPlot) quadraticPlot = plotQuadratic();
-  if (!sinePlot) sinePlot = plotSine();
-  if (!polarPlot) polarPlot = plotPolar();
+  const formulasList = args.filter(arg => arg.includes(':') || arg.includes('='));
+  const { quadratic, sine, polar } = getPlotsFromFormulas(formulasList);
 
   console.log('Demo: Raw formula strings and their parsed representations:');
 
@@ -589,14 +492,14 @@ Formula String Formats:
   } else if (isHtml) {
     fileContent = plotToHtml({ formulas: formulasList });
   } else {
-    fileContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
+    fileContent = generateSvg(quadratic, sine, polar);
   }
 
   try {
     fs.writeFileSync(outputFileName, fileContent, 'utf8');
     console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : 'SVG'} file generated: ${outputFileName}`);
   } catch (err) {
-    console.error(`Error writing ${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : 'SVG'} file:`, err.message);
+    console.error(`Error writing file:`, err.message);
     process.exit(1);
   }
 

commit 094bdc133de8fa390454cbab2d7a3528972118f2
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 02:18:22 2025 +0000

    Refreshed the README-style comment block at the top of the file with updated documentation and usage instructions. https://github.com/xn-intenton-z2a/repository0/issues/55 (#56)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 6f3bd3c..275a4ab 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,52 +3,42 @@
 'use strict';
 
 /**
- * Equation Plotter Library (SVG/JSON/CSV/HTML)
+ * Equation Plotter Library
  *
- * Overview:
- *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON, CSV, and now HTML export.
+ * Description:
+ *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
+ *   It supports different mathematical functions including quadratic, sine, and polar equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formats like "y=x^2+2*x+1" or "x^2+y-1=0".
- *   - Sine Plot: Generates data points for y = A*sin(B*x + C) where x is in degrees.
- *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * θ)|.
- *   - Interactive: Supports zooming, panning, and custom scaling.
- *   - Custom Styling: Customize axis, grid, and curve appearances.
- *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, JSON, CSV, or HTML, and can also write it to a file.
+ *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings.
+ *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
+ *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
+ *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
+ *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
  *
- * SDK API Functions:
- *   plotToSvg(options)   -> Returns an SVG string.
- *   plotToAscii(options) -> Returns an ASCII art string for sine plot.
- *   plotToText(options)  -> Returns a text representation of plot points.
- *   plotToJson(options)  -> Returns a JSON string with the plot points.
- *   plotToCsv(options)   -> Returns a CSV string with the plot points.
- *   plotToHtml(options)  -> Returns an HTML string embedding the SVG plot.
- *   plotToFile(options)  -> Saves output to a file and returns the file path.
+ * API Functions:
+ *   - plotToSvg(options): Returns an SVG string of the plots.
+ *   - plotToAscii(options): Returns an ASCII art string for the sine plot.
+ *   - plotToText(options): Returns a textual representation of plot points.
+ *   - plotToJson(options): Returns a JSON string containing the plot data.
+ *   - plotToCsv(options): Returns a CSV string with plot points.
+ *   - plotToHtml(options): Returns an HTML string that embeds the SVG plot.
+ *   - plotToFile(options): Saves the generated output to a file and returns the path.
+ *   - plotFromString(formulaStr): Parses a formula string to generate plot points.
+ *   - plotQuadratic, plotSine, plotPolar: Generate plots with default parameters.
  *
- * Additional Functions:
- *   plotQuadraticParam(params)  -> Returns points for a quadratic function.
- *   plotSineParam(params)       -> Returns points for a sine function.
- *   plotPolarParam(params)      -> Returns points for a polar function.
- *   plotQuadratic()             -> Quadratic plot with default parameters.
- *   plotSine()                  -> Sine plot with default parameters.
- *   plotPolar()                 -> Polar plot with default parameters.
- *   plotFromString(formulaStr)  -> Returns points parsed from formula string.
- *   generateSvg(quadraticPoints, sinePoints, polarPoints) -> Generates an SVG string from plot points.
- *   displayPlot(plotName, points)  -> Logs plot data to the console.
- *   displaySineAscii(points)       -> Logs ASCII art of a sine wave.
- *
- * Example Usage (CLI):
+ * CLI Usage Examples:
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
- * Example Usage (API):
+ * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
- *   const jsonData = plotToJson({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
- *   const csvData = plotToCsv({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
- *   const htmlData = plotToHtml({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
+ *
+ * Installation:
+ *   Install via npm with the required dependencies. See package.json for more details.
  *
  * License: MIT
  */

commit b56f0de28388d558640b9ce4cfe631b14ba855e0
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 01:45:42 2025 +0000

    Added HTML export support by implementing plotToHtml and updating main function to handle .html output. https://github.com/xn-intenton-z2a/repository0/issues/53 (#54)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 62f1b1d..6f3bd3c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,10 +3,10 @@
 'use strict';
 
 /**
- * Equation Plotter Library (SVG/JSON/CSV)
+ * Equation Plotter Library (SVG/JSON/CSV/HTML)
  *
  * Overview:
- *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON and CSV export.
+ *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON, CSV, and now HTML export.
  *
  * Features:
  *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formats like "y=x^2+2*x+1" or "x^2+y-1=0".
@@ -14,15 +14,16 @@
  *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * θ)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
  *   - Custom Styling: Customize axis, grid, and curve appearances.
- *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, JSON, or CSV, and can also write it to a file.
+ *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, JSON, CSV, or HTML, and can also write it to a file.
  *
  * SDK API Functions:
  *   plotToSvg(options)   -> Returns an SVG string.
  *   plotToAscii(options) -> Returns an ASCII art string for sine plot.
  *   plotToText(options)  -> Returns a text representation of plot points.
  *   plotToJson(options)  -> Returns a JSON string with the plot points.
- *   plotToFile(options)  -> Saves output to a file and returns the file path.
  *   plotToCsv(options)   -> Returns a CSV string with the plot points.
+ *   plotToHtml(options)  -> Returns an HTML string embedding the SVG plot.
+ *   plotToFile(options)  -> Saves output to a file and returns the file path.
  *
  * Additional Functions:
  *   plotQuadraticParam(params)  -> Returns points for a quadratic function.
@@ -40,12 +41,14 @@
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
+ *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
  * Example Usage (API):
- *   import { plotToSvg, plotToJson, plotToCsv } from './main.js';
+ *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *   const jsonData = plotToJson({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *   const csvData = plotToCsv({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
+ *   const htmlData = plotToHtml({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * License: MIT
  */
@@ -305,6 +308,15 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
          `</svg>`;
 }
 
+// ----------------------------------
+// HTML Generation Function
+// ----------------------------------
+
+function plotToHtml({ formulas = [] } = {}) {
+  const svgContent = plotToSvg({ formulas });
+  return `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Equation Plot</title>\n  <style>\n    body { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f8f8; }\n  </style>\n</head>\n<body>\n${svgContent}\n</body>\n</html>`;
+}
+
 // ----------------------------------
 // Exported API Functions
 // ----------------------------------
@@ -482,6 +494,8 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
     content = JSON.stringify(plotToJson({ formulas }), null, 2);
   } else if (type === 'csv') {
     content = plotToCsv({ formulas });
+  } else if (type === 'html') {
+    content = plotToHtml({ formulas });
   } else {
     throw new Error('Unsupported type provided for plotToFile');
   }
@@ -508,6 +522,7 @@ Options:
   --help, -h       Show this help message
   --json           Generate output as JSON instead of SVG
   --csv            Generate output as CSV instead of SVG
+  (output file extension .html will generate HTML output)
 
 Formula String Formats:
   Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"
@@ -522,19 +537,22 @@ Formula String Formats:
   let sinePlot = null;
   let polarPlot = null;
 
-  // Determine if JSON or CSV output is requested
+  // Determine if JSON, CSV, or HTML output is requested
   let isJson = args.includes('--json');
   let isCsv = args.includes('--csv');
+  let isHtml = false;
 
   const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv');
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
-  // If output file extension is .json or .csv, then force respective output
+  // If output file extension is .json, .csv, or .html, then force respective output
   if (outputFileName.toLowerCase().endsWith('.json')) {
     isJson = true;
   } else if (outputFileName.toLowerCase().endsWith('.csv')) {
     isCsv = true;
+  } else if (outputFileName.toLowerCase().endsWith('.html')) {
+    isHtml = true;
   }
 
   // Collect formulas from arguments
@@ -578,15 +596,17 @@ Formula String Formats:
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);
   } else if (isCsv) {
     fileContent = plotToCsv({ formulas: formulasList });
+  } else if (isHtml) {
+    fileContent = plotToHtml({ formulas: formulasList });
   } else {
     fileContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
   }
 
   try {
     fs.writeFileSync(outputFileName, fileContent, 'utf8');
-    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : 'SVG'} file generated: ${outputFileName}`);
+    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : 'SVG'} file generated: ${outputFileName}`);
   } catch (err) {
-    console.error(`Error writing ${isJson ? 'JSON' : isCsv ? 'CSV' : 'SVG'} file:`, err.message);
+    console.error(`Error writing ${isJson ? 'JSON' : isCsv ? 'CSV' : isHtml ? 'HTML' : 'SVG'} file:`, err.message);
     process.exit(1);
   }
 
@@ -598,4 +618,4 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };
+export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToHtml, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };

commit a26acb32c6e76a91552536f77684538e0afef42c
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 01:02:41 2025 +0000

    Added CSV export support and updated CLI help message with CSV option. https://github.com/xn-intenton-z2a/repository0/issues/50 (#52)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index f230fee..62f1b1d 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,10 +3,10 @@
 'use strict';
 
 /**
- * Equation Plotter Library (SVG/JSON)
+ * Equation Plotter Library (SVG/JSON/CSV)
  *
  * Overview:
- *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON data export.
+ *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON and CSV export.
  *
  * Features:
  *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formats like "y=x^2+2*x+1" or "x^2+y-1=0".
@@ -14,14 +14,15 @@
  *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * θ)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
  *   - Custom Styling: Customize axis, grid, and curve appearances.
- *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, or JSON, and can also write it to a file.
+ *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, JSON, or CSV, and can also write it to a file.
  *
  * SDK API Functions:
  *   plotToSvg(options)   -> Returns an SVG string.
  *   plotToAscii(options) -> Returns an ASCII art string for sine plot.
  *   plotToText(options)  -> Returns a text representation of plot points.
- *   plotToFile(options)  -> Saves output to a file and returns the file path.
  *   plotToJson(options)  -> Returns a JSON string with the plot points.
+ *   plotToFile(options)  -> Saves output to a file and returns the file path.
+ *   plotToCsv(options)   -> Returns a CSV string with the plot points.
  *
  * Additional Functions:
  *   plotQuadraticParam(params)  -> Returns points for a quadratic function.
@@ -38,11 +39,13 @@
  * Example Usage (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
+ *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
  * Example Usage (API):
- *   import { plotToSvg, plotToJson } from './main.js';
+ *   import { plotToSvg, plotToJson, plotToCsv } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *   const jsonData = plotToJson({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
+ *   const csvData = plotToCsv({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * License: MIT
  */
@@ -424,6 +427,49 @@ function plotToJson({ formulas = [] } = {}) {
   };
 }
 
+function plotToCsv({ formulas = [] } = {}) {
+  let quadraticPlot = null;
+  let sinePlot = null;
+  let polarPlot = null;
+
+  formulas.forEach(formula => {
+    const lower = formula.toLowerCase();
+    try {
+      if (lower.startsWith('quadratic:') || (formula.includes('=') && !lower.startsWith('sine:') && !lower.startsWith('polar:'))) {
+        quadraticPlot = plotFromString(formula);
+      } else if (lower.startsWith('sine:')) {
+        sinePlot = plotFromString(formula);
+      } else if (lower.startsWith('polar:')) {
+        polarPlot = plotFromString(formula);
+      }
+    } catch (e) {
+      console.error(e);
+    }
+  });
+
+  if (!quadraticPlot) quadraticPlot = plotQuadratic();
+  if (!sinePlot) sinePlot = plotSine();
+  if (!polarPlot) polarPlot = plotPolar();
+
+  const lines = [];
+  lines.push("Plot, x, y");
+  lines.push("--Quadratic Plot--");
+  quadraticPlot.forEach(p => {
+    lines.push(`Quadratic,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  });
+  lines.push("");
+  lines.push("--Sine Plot--");
+  sinePlot.forEach(p => {
+    lines.push(`Sine,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  });
+  lines.push("");
+  lines.push("--Polar Plot--");
+  polarPlot.forEach(p => {
+    lines.push(`Polar,${p.x.toFixed(2)},${p.y.toFixed(2)}`);
+  });
+  return lines.join("\n");
+}
+
 function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg' } = {}) {
   let content = '';
   if (type === 'svg') {
@@ -434,6 +480,8 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
     content = plotToText({ formulas });
   } else if (type === 'json') {
     content = JSON.stringify(plotToJson({ formulas }), null, 2);
+  } else if (type === 'csv') {
+    content = plotToCsv({ formulas });
   } else {
     throw new Error('Unsupported type provided for plotToFile');
   }
@@ -459,6 +507,7 @@ function main() {
 Options:
   --help, -h       Show this help message
   --json           Generate output as JSON instead of SVG
+  --csv            Generate output as CSV instead of SVG
 
 Formula String Formats:
   Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"
@@ -473,16 +522,19 @@ Formula String Formats:
   let sinePlot = null;
   let polarPlot = null;
 
-  // Determine if JSON output is requested
+  // Determine if JSON or CSV output is requested
   let isJson = args.includes('--json');
+  let isCsv = args.includes('--csv');
 
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json');
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json' && arg !== '--csv');
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
-  // If output file extension is .json, then force JSON output
+  // If output file extension is .json or .csv, then force respective output
   if (outputFileName.toLowerCase().endsWith('.json')) {
     isJson = true;
+  } else if (outputFileName.toLowerCase().endsWith('.csv')) {
+    isCsv = true;
   }
 
   // Collect formulas from arguments
@@ -513,6 +565,7 @@ Formula String Formats:
 
   const rawQuad = 'x^2+y-1=0';
   console.log(`Raw Formula: "${rawQuad}"`);
+  console.log('Parsed representation for Quadratic from Raw Formula:');
   displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));
 
   const rawSine = 'sine:1,1,0,0,360,10';
@@ -523,15 +576,17 @@ Formula String Formats:
   let fileContent = '';
   if (isJson) {
     fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);
+  } else if (isCsv) {
+    fileContent = plotToCsv({ formulas: formulasList });
   } else {
     fileContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
   }
 
   try {
     fs.writeFileSync(outputFileName, fileContent, 'utf8');
-    console.log(`\n${isJson ? 'JSON' : 'SVG'} file generated: ${outputFileName}`);
+    console.log(`\n${isJson ? 'JSON' : isCsv ? 'CSV' : 'SVG'} file generated: ${outputFileName}`);
   } catch (err) {
-    console.error(`Error writing ${isJson ? 'JSON' : 'SVG'} file:`, err.message);
+    console.error(`Error writing ${isJson ? 'JSON' : isCsv ? 'CSV' : 'SVG'} file:`, err.message);
     process.exit(1);
   }
 
@@ -543,4 +598,4 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };
+export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToCsv, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };

commit 3b4f487b501a8051f7f920a8217693a231d925b8
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sun Feb 16 00:37:32 2025 +0000

    Added JSON export functionality and updated CLI to support --json flag. https://github.com/xn-intenton-z2a/repository0/issues/50 (#51)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 3dfd87c..f230fee 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,10 +3,10 @@
 'use strict';
 
 /**
- * Equation Plotter Library (SVG)
+ * Equation Plotter Library (SVG/JSON)
  *
  * Overview:
- *   A lightweight library that generates SVG graphics for various mathematical equations.
+ *   A lightweight library that generates SVG graphics for various mathematical equations, with additional support for JSON data export.
  *
  * Features:
  *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formats like "y=x^2+2*x+1" or "x^2+y-1=0".
@@ -14,13 +14,14 @@
  *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * θ)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
  *   - Custom Styling: Customize axis, grid, and curve appearances.
- *   - Export: Outputs the plot as an SVG file, ASCII art, or text, and can also write it to a file.
+ *   - Export: Outputs the plot as an SVG file, ASCII art, text representation, or JSON, and can also write it to a file.
  *
  * SDK API Functions:
  *   plotToSvg(options)   -> Returns an SVG string.
  *   plotToAscii(options) -> Returns an ASCII art string for sine plot.
  *   plotToText(options)  -> Returns a text representation of plot points.
  *   plotToFile(options)  -> Saves output to a file and returns the file path.
+ *   plotToJson(options)  -> Returns a JSON string with the plot points.
  *
  * Additional Functions:
  *   plotQuadraticParam(params)  -> Returns points for a quadratic function.
@@ -36,10 +37,12 @@
  *
  * Example Usage (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
+ *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
  * Example Usage (API):
- *   import { plotToSvg } from './main.js';
+ *   import { plotToSvg, plotToJson } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
+ *   const jsonData = plotToJson({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * License: MIT
  */
@@ -390,6 +393,37 @@ function plotToText({ formulas = [] } = {}) {
   return output;
 }
 
+function plotToJson({ formulas = [] } = {}) {
+  let quadraticPlot = null;
+  let sinePlot = null;
+  let polarPlot = null;
+
+  formulas.forEach(formula => {
+    const lower = formula.toLowerCase();
+    try {
+      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
+        quadraticPlot = plotFromString(formula);
+      } else if (lower.startsWith('sine:')) {
+        sinePlot = plotFromString(formula);
+      } else if (lower.startsWith('polar:')) {
+        polarPlot = plotFromString(formula);
+      }
+    } catch (e) {
+      console.error(e);
+    }
+  });
+
+  if (!quadraticPlot) quadraticPlot = plotQuadratic();
+  if (!sinePlot) sinePlot = plotSine();
+  if (!polarPlot) polarPlot = plotPolar();
+
+  return {
+    quadratic: quadraticPlot,
+    sine: sinePlot,
+    polar: polarPlot
+  };
+}
+
 function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg' } = {}) {
   let content = '';
   if (type === 'svg') {
@@ -398,6 +432,8 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
     content = plotToAscii({ formulas });
   } else if (type === 'text') {
     content = plotToText({ formulas });
+  } else if (type === 'json') {
+    content = JSON.stringify(plotToJson({ formulas }), null, 2);
   } else {
     throw new Error('Unsupported type provided for plotToFile');
   }
@@ -422,6 +458,7 @@ function main() {
 
 Options:
   --help, -h       Show this help message
+  --json           Generate output as JSON instead of SVG
 
 Formula String Formats:
   Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"
@@ -436,13 +473,20 @@ Formula String Formats:
   let sinePlot = null;
   let polarPlot = null;
 
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('='));
+  // Determine if JSON output is requested
+  let isJson = args.includes('--json');
+
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('=') && arg !== '--json');
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
+  // If output file extension is .json, then force JSON output
+  if (outputFileName.toLowerCase().endsWith('.json')) {
+    isJson = true;
+  }
 
   // Collect formulas from arguments
-  const formulasList = args.filter(arg => arg.includes(':') || arg.includes('='));
+  const formulasList = args.filter(arg => (arg.includes(':') || arg.includes('=')));
 
   formulasList.forEach(arg => {
     const lowerArg = arg.toLowerCase();
@@ -476,12 +520,18 @@ Formula String Formats:
   console.log('Parsed ASCII Art for Sine:');
   console.log(plotToAscii({ formulas: [rawSine] }));
 
-  const svgContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
+  let fileContent = '';
+  if (isJson) {
+    fileContent = JSON.stringify(plotToJson({ formulas: formulasList }), null, 2);
+  } else {
+    fileContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
+  }
+
   try {
-    fs.writeFileSync(outputFileName, svgContent, 'utf8');
-    console.log(`\nSVG file generated: ${outputFileName}`);
+    fs.writeFileSync(outputFileName, fileContent, 'utf8');
+    console.log(`\n${isJson ? 'JSON' : 'SVG'} file generated: ${outputFileName}`);
   } catch (err) {
-    console.error('Error writing SVG file:', err.message);
+    console.error(`Error writing ${isJson ? 'JSON' : 'SVG'} file:`, err.message);
     process.exit(1);
   }
 
@@ -493,4 +543,4 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-export { plotToSvg, plotToAscii, plotToText, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };
+export { plotToSvg, plotToAscii, plotToText, plotToJson, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };

commit 127f622770fb6eec7d4799db8546ff2845cfeeee
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 23:53:21 2025 +0000

    Updated main to pass command-line formulas to plotToText for consistency https://github.com/xn-intenton-z2a/repository0/issues/48 (#49)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index ab513f8..3dfd87c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -441,7 +441,10 @@ Formula String Formats:
     outputFileName = nonFormulaArgs[0];
   }
 
-  args.filter(arg => arg.includes(':') || arg.includes('=')).forEach(arg => {
+  // Collect formulas from arguments
+  const formulasList = args.filter(arg => arg.includes(':') || arg.includes('='));
+
+  formulasList.forEach(arg => {
     const lowerArg = arg.toLowerCase();
     try {
       if (lowerArg.startsWith('quadratic:') || (arg.includes('=') && !lowerArg.startsWith('sine:') && !lowerArg.startsWith('polar:'))) {
@@ -483,7 +486,7 @@ Formula String Formats:
   }
 
   console.log('\nText Representation of Plots:');
-  console.log(plotToText({ formulas: [] }));
+  console.log(plotToText({ formulas: formulasList }));
 }
 
 if (process.argv[1] === fileURLToPath(import.meta.url)) {

commit c77f2bf639d22d8c8e0b29990f01526110e70efd
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 23:43:22 2025 +0000

    Refactored generic quadratic parsing to correctly isolate y by adding invertExpression helper. https://github.com/xn-intenton-z2a/repository0/issues/45 (#47)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index b5530a3..ab513f8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -170,6 +170,17 @@ function extractQuadraticCoefficients(expr) {
   return { a, b, c };
 }
 
+// Helper function to invert an algebraic expression consisting of additions and subtractions.
+function invertExpression(expr) {
+  const tokens = expr.match(/[+-]?[^+-]+/g) || [];
+  const inverted = tokens.map(token => {
+    token = token.trim();
+    if (token.startsWith('-')) return '+' + token.slice(1);
+    else return '-' + token;
+  }).join('');
+  return inverted[0] === '+' ? inverted.slice(1) : inverted;
+}
+
 // Parse a generic quadratic formula in standard algebraic form
 function parseGenericQuadratic(formulaStr) {
   let formula = formulaStr.replace(/\s+/g, '');
@@ -184,14 +195,12 @@ function parseGenericQuadratic(formulaStr) {
     let right = parts[1];
     // If 'y' exists in left or right, rearrange the equation to solve for y
     if (left.includes('y')) {
-      // Remove the first occurrence of 'y'
       const nonYPart = left.replace('y', '');
-      // Formulate new expression: y = (right) - (nonYPart)
-      const newExpr = (right || "0") + "-(" + nonYPart + ")";
+      const newExpr = (right || '0') + invertExpression(nonYPart);
       return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
     } else if (right.includes('y')) {
       const nonYPart = right.replace('y', '');
-      const newExpr = (left || "0") + "-(" + nonYPart + ")";
+      const newExpr = (left || '0') + invertExpression(nonYPart);
       return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
     } else {
       throw new Error('No y variable found in quadratic equation');

commit 0d655381a2096dafcbfa338da6efd9992b9e3fbd
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 23:33:35 2025 +0000

    Refactored generic quadratic parsing to correctly solve for y and removed unused invertExpression function to improve behaviour. https://github.com/xn-intenton-z2a/repository0/issues/45 (#46)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 88d399e..b5530a3 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -139,26 +139,6 @@ function parsePolar(formulaStr) {
   });
 }
 
-// Helper to invert the sign of each term in an expression string
-function invertExpression(expr) {
-  const tokens = expr.match(/[+-]?[^+-]+/g);
-  if (!tokens) return expr;
-  const invertedTokens = tokens.map(token => {
-    if (token[0] === '+') {
-      return '-' + token.slice(1);
-    } else if (token[0] === '-') {
-      return '+' + token.slice(1);
-    } else {
-      return '-' + token;
-    }
-  });
-  let inverted = invertedTokens.join('');
-  if (inverted[0] === '+') {
-    inverted = inverted.slice(1);
-  }
-  return inverted;
-}
-
 // Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   expr = expr.replace(/\s+/g, '');
@@ -193,25 +173,29 @@ function extractQuadraticCoefficients(expr) {
 // Parse a generic quadratic formula in standard algebraic form
 function parseGenericQuadratic(formulaStr) {
   let formula = formulaStr.replace(/\s+/g, '');
+  // if formula starts with 'y=', simply parse the expression after y=
   if (formula.toLowerCase().startsWith('y=')) {
     const yExpr = formula.substring(2);
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
   } else {
     const parts = formula.split('=');
     if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
-    const left = parts[0];
-    const right = parts[1];
-    const normalized = left + '-(' + right + ')';
-    const yIndex = normalized.indexOf('y');
-    if (yIndex === -1) throw new Error('No y variable found in quadratic equation');
-    let beforeY = normalized.slice(0, yIndex);
-    let afterY = normalized.slice(yIndex + 1);
-    if (beforeY.endsWith('+') || beforeY.endsWith('-')) {
-      beforeY = beforeY.slice(0, -1);
+    let left = parts[0];
+    let right = parts[1];
+    // If 'y' exists in left or right, rearrange the equation to solve for y
+    if (left.includes('y')) {
+      // Remove the first occurrence of 'y'
+      const nonYPart = left.replace('y', '');
+      // Formulate new expression: y = (right) - (nonYPart)
+      const newExpr = (right || "0") + "-(" + nonYPart + ")";
+      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
+    } else if (right.includes('y')) {
+      const nonYPart = right.replace('y', '');
+      const newExpr = (left || "0") + "-(" + nonYPart + ")";
+      return plotQuadraticParam({ ...extractQuadraticCoefficients(newExpr), xMin: -10, xMax: 10, step: 1 });
+    } else {
+      throw new Error('No y variable found in quadratic equation');
     }
-    const rhsExpr = beforeY + afterY;
-    const invertedExpr = invertExpression(rhsExpr);
-    return plotQuadraticParam({ ...extractQuadraticCoefficients(invertedExpr), xMin: -10, xMax: 10, step: 1 });
   }
 }
 

commit 04d6cf3de5e105bf910ee3feb827d163c6b4cdac
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 23:16:19 2025 +0000

    Tidied up code formatting and organized sections for better readability. https://github.com/xn-intenton-z2a/repository0/issues/43 (#44)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 6dbb45c..88d399e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -47,7 +47,10 @@
 import { fileURLToPath } from 'url';
 import fs from 'fs';
 
+// ----------------------------------
 // Plotting Functions
+// ----------------------------------
+
 function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
   const points = [];
   for (let x = xMin; x <= xMax; x += step) {
@@ -90,7 +93,10 @@ function plotPolar() {
   return plotPolarParam();
 }
 
+// ----------------------------------
 // Formula Parsing Functions
+// ----------------------------------
+
 function parseQuadratic(formulaStr) {
   const parts = formulaStr.split(':');
   if (parts.length < 2) throw new Error('Invalid quadratic formula string');
@@ -231,7 +237,10 @@ function plotFromString(formulaStr) {
   }
 }
 
+// ----------------------------------
 // Display Functions
+// ----------------------------------
+
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
@@ -257,7 +266,10 @@ function displaySineAscii(points) {
   grid.forEach(row => console.log(row.join('')));
 }
 
+// ----------------------------------
 // SVG Generation Function
+// ----------------------------------
+
 function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
   const height = 800;
@@ -294,7 +306,10 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
          `</svg>`;
 }
 
+// ----------------------------------
 // Exported API Functions
+// ----------------------------------
+
 function plotToSvg({ formulas = [] } = {}) {
   let quadraticPlot = null;
   let sinePlot = null;
@@ -335,13 +350,13 @@ function plotToAscii({ formulas = [] } = {}) {
   const rows = 21;
   const cols = points.length;
   const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
-  
+
   for (let col = 0; col < cols; col++) {
     const { y } = points[col];
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
-  
+
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
     if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
@@ -356,7 +371,7 @@ function plotToText({ formulas = [] } = {}) {
   let quadraticPlot = null;
   let sinePlot = null;
   let polarPlot = null;
-  
+
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
@@ -402,7 +417,10 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
   return outputFileName;
 }
 
+// ----------------------------------
 // Main Execution
+// ----------------------------------
+
 function main() {
   const args = process.argv.slice(2);
 

commit 0e66a2daab23d3fe85be117ed7959ee2ddbbb493
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:53:18 2025 +0000

    Tidy up code formatting and improve readability in main.js https://github.com/xn-intenton-z2a/repository0/issues/41 (#42)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index f5d6a16..6dbb45c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,5 +1,7 @@
 #!/usr/bin/env node
 
+'use strict';
+
 /**
  * Equation Plotter Library (SVG)
  *
@@ -297,6 +299,7 @@ function plotToSvg({ formulas = [] } = {}) {
   let quadraticPlot = null;
   let sinePlot = null;
   let polarPlot = null;
+
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
@@ -311,9 +314,11 @@ function plotToSvg({ formulas = [] } = {}) {
       console.error(e);
     }
   });
+
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
+
   return generateSvg(quadraticPlot, sinePlot, polarPlot);
 }
 
@@ -330,11 +335,13 @@ function plotToAscii({ formulas = [] } = {}) {
   const rows = 21;
   const cols = points.length;
   const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+  
   for (let col = 0; col < cols; col++) {
     const { y } = points[col];
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
+  
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
     if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
@@ -349,6 +356,7 @@ function plotToText({ formulas = [] } = {}) {
   let quadraticPlot = null;
   let sinePlot = null;
   let polarPlot = null;
+  
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
@@ -363,9 +371,11 @@ function plotToText({ formulas = [] } = {}) {
       console.error(err);
     }
   });
+
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
+
   output += 'Quadratic Plot:\n' + quadraticPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
   output += 'Sine Plot:\n' + sinePlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
   output += 'Polar Plot:\n' + polarPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
@@ -442,6 +452,7 @@ Formula String Formats:
   if (!polarPlot) polarPlot = plotPolar();
 
   console.log('Demo: Raw formula strings and their parsed representations:');
+
   const rawQuad = 'x^2+y-1=0';
   console.log(`Raw Formula: "${rawQuad}"`);
   displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));

commit b48bd23553cb793592e100528846f70cca12bf32
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:43:21 2025 +0000

    Tidied up the code formatting and improved consistency in srclibmain.js. https://github.com/xn-intenton-z2a/repository0/issues/37 (#40)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 6d746c7..f5d6a16 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -45,10 +45,7 @@
 import { fileURLToPath } from 'url';
 import fs from 'fs';
 
-// ------------------------------------------------------------------------------
 // Plotting Functions
-// ------------------------------------------------------------------------------
-
 function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
   const points = [];
   for (let x = xMin; x <= xMax; x += step) {
@@ -91,10 +88,7 @@ function plotPolar() {
   return plotPolarParam();
 }
 
-// ------------------------------------------------------------------------------
 // Formula Parsing Functions
-// ------------------------------------------------------------------------------
-
 function parseQuadratic(formulaStr) {
   const parts = formulaStr.split(':');
   if (parts.length < 2) throw new Error('Invalid quadratic formula string');
@@ -137,7 +131,7 @@ function parsePolar(formulaStr) {
   });
 }
 
-// Helper function to invert the sign of each term in an expression string
+// Helper to invert the sign of each term in an expression string
 function invertExpression(expr) {
   const tokens = expr.match(/[+-]?[^+-]+/g);
   if (!tokens) return expr;
@@ -235,10 +229,7 @@ function plotFromString(formulaStr) {
   }
 }
 
-// ------------------------------------------------------------------------------
 // Display Functions
-// ------------------------------------------------------------------------------
-
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
@@ -264,10 +255,7 @@ function displaySineAscii(points) {
   grid.forEach(row => console.log(row.join('')));
 }
 
-// ------------------------------------------------------------------------------
-// SVG Generation
-// ------------------------------------------------------------------------------
-
+// SVG Generation Function
 function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
   const height = 800;
@@ -304,10 +292,7 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
          `</svg>`;
 }
 
-// ------------------------------------------------------------------------------
 // Exported API Functions
-// ------------------------------------------------------------------------------
-
 function plotToSvg({ formulas = [] } = {}) {
   let quadraticPlot = null;
   let sinePlot = null;
@@ -407,10 +392,7 @@ function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg'
   return outputFileName;
 }
 
-// ------------------------------------------------------------------------------
 // Main Execution
-// ------------------------------------------------------------------------------
-
 function main() {
   const args = process.argv.slice(2);
 

commit 9da2d7e45fa89577609d9226e8231991f18d79be
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:35:26 2025 +0000

    Tidied up code formatting and improved consistency in srclibmain.js. https://github.com/xn-intenton-z2a/repository0/issues/37 (#39)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 0a98a96..6d746c7 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -4,55 +4,40 @@
  * Equation Plotter Library (SVG)
  *
  * Overview:
- *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
+ *   A lightweight library that generates SVG graphics for various mathematical equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formula strings like "y=x^2+2*x+1" or "x^2+y-1=0".
+ *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formats like "y=x^2+2*x+1" or "x^2+y-1=0".
  *   - Sine Plot: Generates data points for y = A*sin(B*x + C) where x is in degrees.
- *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * theta)|.
+ *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * θ)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
- *   - Custom Styling: Allows customization of axis, grid, and curve appearances.
- *   - Export: Outputs the generated plot as an SVG file, ASCII art, or textual data, and also allows writing output to a file.
+ *   - Custom Styling: Customize axis, grid, and curve appearances.
+ *   - Export: Outputs the plot as an SVG file, ASCII art, or text, and can also write it to a file.
  *
- * --- SDK API ---
- *
- * Exported Functions:
- *   plotToSvg(options)   -> Returns SVG string from given formula strings.
- *   plotToAscii(options) -> Returns ASCII art string for sine plot from given formula strings.
- *   plotToText(options)  -> Returns text representation of plot points for all plots.
- *   plotToFile(options)  -> Saves the output (SVG, ASCII, or text) to a file and returns the file path.
+ * SDK API Functions:
+ *   plotToSvg(options)   -> Returns an SVG string.
+ *   plotToAscii(options) -> Returns an ASCII art string for sine plot.
+ *   plotToText(options)  -> Returns a text representation of plot points.
+ *   plotToFile(options)  -> Saves output to a file and returns the file path.
  *
  * Additional Functions:
- *   plotQuadraticParam(params)  -> Returns an array of points for quadratic function.
- *   plotSineParam(params)       -> Returns an array of points for sine function.
- *   plotPolarParam(params)      -> Returns an array of points for polar function.
- *   plotQuadratic()             -> Quadratic plot using default parameters.
- *   plotSine()                  -> Sine plot using default parameters.
- *   plotPolar()                 -> Polar plot using default parameters.
- *   plotFromString(formulaStr)  -> Returns points from a formula string. (Supports formats: quadratic (including generic formula notation), sine, polar)
- *   generateSvg(quadraticPoints, sinePoints, polarPoints) -> Returns SVG string based on plot points.
- *   displayPlot(plotName, points)  -> Logs plot data as text to the console.
- *   displaySineAscii(points)       -> Logs ASCII art representation of sine wave to the console.
- *
- * Examples:
- *   1) Command Line Execution:
- *      $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
- *      Expected Output: SVG file generated with Quadratic, Sine and Polar plots, and demos of raw formula parsing.
- *
- *   2) Using the API:
- *      import { plotToSvg, plotToAscii, plotToText, plotToFile } from './main.js';
- *      const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
- *      console.log(svg);
+ *   plotQuadraticParam(params)  -> Returns points for a quadratic function.
+ *   plotSineParam(params)       -> Returns points for a sine function.
+ *   plotPolarParam(params)      -> Returns points for a polar function.
+ *   plotQuadratic()             -> Quadratic plot with default parameters.
+ *   plotSine()                  -> Sine plot with default parameters.
+ *   plotPolar()                 -> Polar plot with default parameters.
+ *   plotFromString(formulaStr)  -> Returns points parsed from formula string.
+ *   generateSvg(quadraticPoints, sinePoints, polarPoints) -> Generates an SVG string from plot points.
+ *   displayPlot(plotName, points)  -> Logs plot data to the console.
+ *   displaySineAscii(points)       -> Logs ASCII art of a sine wave.
  *
- *      const asciiArt = plotToAscii({ formulas: ["sine:1,1,0,0,360,10"] });
- *      console.log(asciiArt);
+ * Example Usage (CLI):
+ *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
- *      const textData = plotToText({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
- *      console.log(textData);
- *
- *      // Save SVG to a file
- *      const filePath = plotToFile({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"], outputFileName: 'myplot.svg', type: 'svg' });
- *      console.log(`File saved at: ${filePath}`);
+ * Example Usage (API):
+ *   import { plotToSvg } from './main.js';
+ *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * License: MIT
  */
@@ -108,10 +93,6 @@ function plotPolar() {
 
 // ------------------------------------------------------------------------------
 // Formula Parsing Functions
-// Expected formats:
-//   Quadratic: can be given as a prefixed string like "quadratic:1,0,0,-10,10,1" or as a formula such as "y=x^2+2*x+1" or "x^2+y-1=0"
-//   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
-//   Polar:     "polar:scale,multiplier[,step]"
 // ------------------------------------------------------------------------------
 
 function parseQuadratic(formulaStr) {
@@ -156,7 +137,7 @@ function parsePolar(formulaStr) {
   });
 }
 
-// Helper function to invert the sign of each term in an expression string, e.g. 'x^2-1' becomes '-x^2+1'
+// Helper function to invert the sign of each term in an expression string
 function invertExpression(expr) {
   const tokens = expr.match(/[+-]?[^+-]+/g);
   if (!tokens) return expr;
@@ -176,42 +157,30 @@ function invertExpression(expr) {
   return inverted;
 }
 
-// New helper: extract quadratic coefficients from an expression string assumed to be in the form ax^2+bx+c
+// Extract quadratic coefficients from an expression of form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
-  // Remove whitespace
   expr = expr.replace(/\s+/g, '');
   let a = 0, b = 0, c = 0;
 
-  // Match ax^2
-  let aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
+  const aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
   if (aMatch) {
     let coeff = aMatch[1];
-    if (coeff === '' || coeff === '+') {
-      a = 1;
-    } else if (coeff === '-') {
-      a = -1;
-    } else {
-      a = parseFloat(coeff);
-    }
+    if (coeff === '' || coeff === '+') a = 1;
+    else if (coeff === '-') a = -1;
+    else a = parseFloat(coeff);
     expr = expr.replace(aMatch[0], '');
   }
 
-  // Match bx (but not x^2)
-  let bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
+  const bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
   if (bMatch) {
     let coeff = bMatch[1];
-    if (coeff === '' || coeff === '+') {
-      b = 1;
-    } else if (coeff === '-') {
-      b = -1;
-    } else {
-      b = parseFloat(coeff);
-    }
+    if (coeff === '' || coeff === '+') b = 1;
+    else if (coeff === '-') b = -1;
+    else b = parseFloat(coeff);
     expr = expr.replace(bMatch[0], '');
   }
 
-  // The remaining part should be the constant. It may contain multiple terms. Sum them up.
-  let constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
+  const constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
   if (constantMatches) {
     c = constantMatches.reduce((sum, numStr) => sum + parseFloat(numStr), 0);
   }
@@ -219,8 +188,7 @@ function extractQuadraticCoefficients(expr) {
   return { a, b, c };
 }
 
-// New helper: parse a generic quadratic formula given in a standard algebraic form
-// Supports formulas starting with "y=" or in the form where all terms are moved to one side (e.g., "x^2+y-1=z^3")
+// Parse a generic quadratic formula in standard algebraic form
 function parseGenericQuadratic(formulaStr) {
   let formula = formulaStr.replace(/\s+/g, '');
   if (formula.toLowerCase().startsWith('y=')) {
@@ -228,17 +196,12 @@ function parseGenericQuadratic(formulaStr) {
     return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
   } else {
     const parts = formula.split('=');
-    if (parts.length !== 2) {
-      throw new Error('Unsupported formula format for quadratic parsing');
-    }
+    if (parts.length !== 2) throw new Error('Unsupported formula format for quadratic parsing');
     const left = parts[0];
     const right = parts[1];
-    // Normalize by moving all terms to the left-hand side
     const normalized = left + '-(' + right + ')';
     const yIndex = normalized.indexOf('y');
-    if (yIndex === -1) {
-      throw new Error('No y variable found in quadratic equation');
-    }
+    if (yIndex === -1) throw new Error('No y variable found in quadratic equation');
     let beforeY = normalized.slice(0, yIndex);
     let afterY = normalized.slice(yIndex + 1);
     if (beforeY.endsWith('+') || beforeY.endsWith('-')) {
@@ -260,7 +223,6 @@ function plotFromString(formulaStr) {
     console.error('Unknown prefixed formula type.');
     return [];
   } else if (formulaStr.includes('=')) {
-    // Assume generic quadratic formula format, e.g. "y=x^2+2*x+1", "x^2+y-1=0", or "x^2+y-1=z^3"
     try {
       return parseGenericQuadratic(formulaStr);
     } catch (e) {
@@ -287,18 +249,17 @@ function displaySineAscii(points) {
   const cols = points.length;
   const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
 
-  // Map sine point's y value (range [-1,1]) to a row index
   for (let col = 0; col < cols; col++) {
     const { y } = points[col];
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
 
-  // Draw x-axis at y=0
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
     if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
   }
+
   console.log('ASCII Art of Sine Wave:');
   grid.forEach(row => console.log(row.join('')));
 }
@@ -309,28 +270,25 @@ function displaySineAscii(points) {
 
 function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
-  const height = 800; // Increased height to accommodate polar plot
+  const height = 800;
 
-  // Map quadratic points to SVG space
   const quadPts = quadraticPoints.map(p => {
-    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // mapping x from [-10,10] to [50,750]
-    const py = 50 + (100 - p.y) * (200 / 100);      // mapping y from [0,100] to [250,50] (inverted y-axis)
+    const px = 50 + (p.x + 10) * ((750 - 50) / 20);
+    const py = 50 + (100 - p.y) * (200 / 100);
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
-  // Map sine points to SVG space
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360);       // mapping x from [0,360] to [50,750]
-    const py = 350 + (1 - p.y) * (200 / 2);           // mapping y from [-1,1] to [550,350] (inverted y-axis)
+    const px = 50 + p.x * ((750 - 50) / 360);
+    const py = 350 + (1 - p.y) * (200 / 2);
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
-  // Map polar points to SVG space; center at (width/2, 700)
   const centerX = width / 2;
   const centerY = 700;
   const polarPts = polarPoints.map(p => {
     const px = centerX + p.x;
-    const py = centerY - p.y;  // Invert y-axis
+    const py = centerY - p.y;
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
@@ -423,9 +381,9 @@ function plotToText({ formulas = [] } = {}) {
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
-  output += "Quadratic Plot:\n" + quadraticPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n\n";
-  output += "Sine Plot:\n" + sinePlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n\n";
-  output += "Polar Plot:\n" + polarPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n";
+  output += 'Quadratic Plot:\n' + quadraticPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
+  output += 'Sine Plot:\n' + sinePlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n\n';
+  output += 'Polar Plot:\n' + polarPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + '\n';
   return output;
 }
 
@@ -463,7 +421,7 @@ Options:
   --help, -h       Show this help message
 
 Formula String Formats:
-  Quadratic: can be provided as "y=x^2+2*x+1" or "x^2+y-1=0"
+  Quadratic: "y=x^2+2*x+1" or "x^2+y-1=0"
   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
   Polar:     "polar:scale,multiplier[,step]"
 `);
@@ -475,17 +433,15 @@ Formula String Formats:
   let sinePlot = null;
   let polarPlot = null;
 
-  // Determine output file name from non-formula arguments
   const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('='));
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
 
-  // Process formula strings
   args.filter(arg => arg.includes(':') || arg.includes('=')).forEach(arg => {
     const lowerArg = arg.toLowerCase();
     try {
-      if (lowerArg.startsWith('quadratic:') || (arg.includes('=') && !arg.toLowerCase().startsWith('sine:') && !arg.toLowerCase().startsWith('polar:'))) {
+      if (lowerArg.startsWith('quadratic:') || (arg.includes('=') && !lowerArg.startsWith('sine:') && !lowerArg.startsWith('polar:'))) {
         quadraticPlot = plotFromString(arg);
       } else if (lowerArg.startsWith('sine:')) {
         sinePlot = plotFromString(arg);
@@ -499,12 +455,10 @@ Formula String Formats:
     }
   });
 
-  // Use default plots if not provided
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
 
-  // Demo: Show raw formula and its parsed representation
   console.log('Demo: Raw formula strings and their parsed representations:');
   const rawQuad = 'x^2+y-1=0';
   console.log(`Raw Formula: "${rawQuad}"`);
@@ -515,7 +469,6 @@ Formula String Formats:
   console.log('Parsed ASCII Art for Sine:');
   console.log(plotToAscii({ formulas: [rawSine] }));
 
-  // Generate SVG content
   const svgContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
   try {
     fs.writeFileSync(outputFileName, svgContent, 'utf8');
@@ -525,15 +478,12 @@ Formula String Formats:
     process.exit(1);
   }
 
-  // Additional demo outputs
   console.log('\nText Representation of Plots:');
   console.log(plotToText({ formulas: [] }));
 }
 
-// Execute main if this file is run directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
 
-// Exporting API functions
 export { plotToSvg, plotToAscii, plotToText, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };

commit 1cc52485da4b0270aea57b306f523559ae73fdc3
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:27:48 2025 +0000

    Refactored parseGenericQuadratic to use mutable variables and support equations with non-zero right-hand sides like x2y-1z3 https://github.com/xn-intenton-z2a/repository0/issues/33 (#38)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index ffaa569..0a98a96 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -156,6 +156,26 @@ function parsePolar(formulaStr) {
   });
 }
 
+// Helper function to invert the sign of each term in an expression string, e.g. 'x^2-1' becomes '-x^2+1'
+function invertExpression(expr) {
+  const tokens = expr.match(/[+-]?[^+-]+/g);
+  if (!tokens) return expr;
+  const invertedTokens = tokens.map(token => {
+    if (token[0] === '+') {
+      return '-' + token.slice(1);
+    } else if (token[0] === '-') {
+      return '+' + token.slice(1);
+    } else {
+      return '-' + token;
+    }
+  });
+  let inverted = invertedTokens.join('');
+  if (inverted[0] === '+') {
+    inverted = inverted.slice(1);
+  }
+  return inverted;
+}
+
 // New helper: extract quadratic coefficients from an expression string assumed to be in the form ax^2+bx+c
 function extractQuadraticCoefficients(expr) {
   // Remove whitespace
@@ -173,7 +193,6 @@ function extractQuadraticCoefficients(expr) {
     } else {
       a = parseFloat(coeff);
     }
-    // Remove the matched part
     expr = expr.replace(aMatch[0], '');
   }
 
@@ -201,44 +220,34 @@ function extractQuadraticCoefficients(expr) {
 }
 
 // New helper: parse a generic quadratic formula given in a standard algebraic form
-// Supports formulas starting with "y=" or in the form "<expression>=0" where expression includes a single y term.
+// Supports formulas starting with "y=" or in the form where all terms are moved to one side (e.g., "x^2+y-1=z^3")
 function parseGenericQuadratic(formulaStr) {
-  // Remove whitespace
-  const formula = formulaStr.replace(/\s+/g, '');
-  let yExpr = '';
-
+  let formula = formulaStr.replace(/\s+/g, '');
   if (formula.toLowerCase().startsWith('y=')) {
-    // Format: y=<expression>
-    yExpr = formula.substring(2);
-  } else if (formula.endsWith('=0')) {
-    // Format: <expression>=0, attempt to isolate y.
-    const expr = formula.slice(0, -2); // remove '=0'
-    const yIndex = expr.indexOf('y');
+    const yExpr = formula.substring(2);
+    return plotQuadraticParam({ ...extractQuadraticCoefficients(yExpr), xMin: -10, xMax: 10, step: 1 });
+  } else {
+    const parts = formula.split('=');
+    if (parts.length !== 2) {
+      throw new Error('Unsupported formula format for quadratic parsing');
+    }
+    const left = parts[0];
+    const right = parts[1];
+    // Normalize by moving all terms to the left-hand side
+    const normalized = left + '-(' + right + ')';
+    const yIndex = normalized.indexOf('y');
     if (yIndex === -1) {
       throw new Error('No y variable found in quadratic equation');
     }
-    // Split expression around y
-    let beforeY = expr.slice(0, yIndex);
-    const afterY = expr.slice(yIndex + 1);
-    // Determine the sign of y (check if there is a '-' immediately before y)
-    let sign = '+';
-    if (beforeY.endsWith('-')) {
-      sign = '-';
-      // Remove the '-' from beforeY
-      beforeY = beforeY.slice(0, -1);
-    } else if (beforeY.endsWith('+')) {
+    let beforeY = normalized.slice(0, yIndex);
+    let afterY = normalized.slice(yIndex + 1);
+    if (beforeY.endsWith('+') || beforeY.endsWith('-')) {
       beforeY = beforeY.slice(0, -1);
     }
-    // The equation is: beforeY + (y) + afterY = 0, so y = -(beforeY + afterY)
-    yExpr = '-' + (beforeY + afterY);
-  } else {
-    throw new Error('Unsupported formula format for quadratic parsing');
+    const rhsExpr = beforeY + afterY;
+    const invertedExpr = invertExpression(rhsExpr);
+    return plotQuadraticParam({ ...extractQuadraticCoefficients(invertedExpr), xMin: -10, xMax: 10, step: 1 });
   }
-
-  // Now, we expect yExpr to be in the form of a quadratic expression in x: ax^2+bx+c
-  const { a, b, c } = extractQuadraticCoefficients(yExpr);
-  // Using default domain parameters
-  return plotQuadraticParam({ a, b, c, xMin: -10, xMax: 10, step: 1 });
 }
 
 // Delegate plotting based on formula string content
@@ -251,7 +260,7 @@ function plotFromString(formulaStr) {
     console.error('Unknown prefixed formula type.');
     return [];
   } else if (formulaStr.includes('=')) {
-    // Assume generic quadratic formula format, e.g. "y=x^2+2*x+1" or "x^2+y-1=0"
+    // Assume generic quadratic formula format, e.g. "y=x^2+2*x+1", "x^2+y-1=0", or "x^2+y-1=z^3"
     try {
       return parseGenericQuadratic(formulaStr);
     } catch (e) {

commit 0ff68cce2e932a1ae0cba18519c75777ae671919
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:16:59 2025 +0000

    Fixed mutation of constant variable in parseGenericQuadratic by changing beforeY to let. https://github.com/xn-intenton-z2a/repository0/issues/34 (#36)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 887b9f0..ffaa569 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -218,7 +218,7 @@ function parseGenericQuadratic(formulaStr) {
       throw new Error('No y variable found in quadratic equation');
     }
     // Split expression around y
-    const beforeY = expr.slice(0, yIndex);
+    let beforeY = expr.slice(0, yIndex);
     const afterY = expr.slice(yIndex + 1);
     // Determine the sign of y (check if there is a '-' immediately before y)
     let sign = '+';

commit a2ed105d5f6d1d286cc1b69823849bf1827d5174
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 22:06:11 2025 +0000

    Added support for parsing generic quadratic formula strings such as x2y-10 and yx22x1. https://github.com/xn-intenton-z2a/repository0/issues/33 (#35)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index bea04de..887b9f0 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,7 +7,7 @@
  *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data points for y = ax² + bx + c.
+ *   - Quadratic Plot: Generates data points for y = ax² + bx + c. Supports formula strings like "y=x^2+2*x+1" or "x^2+y-1=0".
  *   - Sine Plot: Generates data points for y = A*sin(B*x + C) where x is in degrees.
  *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * theta)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
@@ -29,29 +29,29 @@
  *   plotQuadratic()             -> Quadratic plot using default parameters.
  *   plotSine()                  -> Sine plot using default parameters.
  *   plotPolar()                 -> Polar plot using default parameters.
- *   plotFromString(formulaStr)  -> Returns points from a formula string. (Formats: quadratic, sine, polar)
+ *   plotFromString(formulaStr)  -> Returns points from a formula string. (Supports formats: quadratic (including generic formula notation), sine, polar)
  *   generateSvg(quadraticPoints, sinePoints, polarPoints) -> Returns SVG string based on plot points.
  *   displayPlot(plotName, points)  -> Logs plot data as text to the console.
  *   displaySineAscii(points)       -> Logs ASCII art representation of sine wave to the console.
  *
  * Examples:
  *   1) Command Line Execution:
- *      $ node src/lib/main.js output.svg "quadratic:1,0,0,-10,10,1" "sine:1,1,0,0,360,10"
+ *      $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *      Expected Output: SVG file generated with Quadratic, Sine and Polar plots, and demos of raw formula parsing.
  *
  *   2) Using the API:
  *      import { plotToSvg, plotToAscii, plotToText, plotToFile } from './main.js';
- *      const svg = plotToSvg({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
+ *      const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
  *      console.log(svg);
  *
  *      const asciiArt = plotToAscii({ formulas: ["sine:1,1,0,0,360,10"] });
  *      console.log(asciiArt);
  *
- *      const textData = plotToText({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
+ *      const textData = plotToText({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
  *      console.log(textData);
  *
  *      // Save SVG to a file
- *      const filePath = plotToFile({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"], outputFileName: 'myplot.svg', type: 'svg' });
+ *      const filePath = plotToFile({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10", "polar:200,2,5"], outputFileName: 'myplot.svg', type: 'svg' });
  *      console.log(`File saved at: ${filePath}`);
  *
  * License: MIT
@@ -109,7 +109,7 @@ function plotPolar() {
 // ------------------------------------------------------------------------------
 // Formula Parsing Functions
 // Expected formats:
-//   Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+//   Quadratic: can be given as a prefixed string like "quadratic:1,0,0,-10,10,1" or as a formula such as "y=x^2+2*x+1" or "x^2+y-1=0"
 //   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
 //   Polar:     "polar:scale,multiplier[,step]"
 // ------------------------------------------------------------------------------
@@ -156,14 +156,112 @@ function parsePolar(formulaStr) {
   });
 }
 
-// Delegate plotting based on formula string prefix
+// New helper: extract quadratic coefficients from an expression string assumed to be in the form ax^2+bx+c
+function extractQuadraticCoefficients(expr) {
+  // Remove whitespace
+  expr = expr.replace(/\s+/g, '');
+  let a = 0, b = 0, c = 0;
+
+  // Match ax^2
+  let aMatch = expr.match(/([+-]?\d*\.?\d*)x\^2/);
+  if (aMatch) {
+    let coeff = aMatch[1];
+    if (coeff === '' || coeff === '+') {
+      a = 1;
+    } else if (coeff === '-') {
+      a = -1;
+    } else {
+      a = parseFloat(coeff);
+    }
+    // Remove the matched part
+    expr = expr.replace(aMatch[0], '');
+  }
+
+  // Match bx (but not x^2)
+  let bMatch = expr.match(/([+-]?\d*\.?\d+)x(?!\^)/);
+  if (bMatch) {
+    let coeff = bMatch[1];
+    if (coeff === '' || coeff === '+') {
+      b = 1;
+    } else if (coeff === '-') {
+      b = -1;
+    } else {
+      b = parseFloat(coeff);
+    }
+    expr = expr.replace(bMatch[0], '');
+  }
+
+  // The remaining part should be the constant. It may contain multiple terms. Sum them up.
+  let constantMatches = expr.match(/([+-]?\d*\.?\d+)/g);
+  if (constantMatches) {
+    c = constantMatches.reduce((sum, numStr) => sum + parseFloat(numStr), 0);
+  }
+
+  return { a, b, c };
+}
+
+// New helper: parse a generic quadratic formula given in a standard algebraic form
+// Supports formulas starting with "y=" or in the form "<expression>=0" where expression includes a single y term.
+function parseGenericQuadratic(formulaStr) {
+  // Remove whitespace
+  const formula = formulaStr.replace(/\s+/g, '');
+  let yExpr = '';
+
+  if (formula.toLowerCase().startsWith('y=')) {
+    // Format: y=<expression>
+    yExpr = formula.substring(2);
+  } else if (formula.endsWith('=0')) {
+    // Format: <expression>=0, attempt to isolate y.
+    const expr = formula.slice(0, -2); // remove '=0'
+    const yIndex = expr.indexOf('y');
+    if (yIndex === -1) {
+      throw new Error('No y variable found in quadratic equation');
+    }
+    // Split expression around y
+    const beforeY = expr.slice(0, yIndex);
+    const afterY = expr.slice(yIndex + 1);
+    // Determine the sign of y (check if there is a '-' immediately before y)
+    let sign = '+';
+    if (beforeY.endsWith('-')) {
+      sign = '-';
+      // Remove the '-' from beforeY
+      beforeY = beforeY.slice(0, -1);
+    } else if (beforeY.endsWith('+')) {
+      beforeY = beforeY.slice(0, -1);
+    }
+    // The equation is: beforeY + (y) + afterY = 0, so y = -(beforeY + afterY)
+    yExpr = '-' + (beforeY + afterY);
+  } else {
+    throw new Error('Unsupported formula format for quadratic parsing');
+  }
+
+  // Now, we expect yExpr to be in the form of a quadratic expression in x: ax^2+bx+c
+  const { a, b, c } = extractQuadraticCoefficients(yExpr);
+  // Using default domain parameters
+  return plotQuadraticParam({ a, b, c, xMin: -10, xMax: 10, step: 1 });
+}
+
+// Delegate plotting based on formula string content
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
-  if (lowerStr.startsWith('quadratic:')) return parseQuadratic(formulaStr);
-  if (lowerStr.startsWith('sine:')) return parseSine(formulaStr);
-  if (lowerStr.startsWith('polar:')) return parsePolar(formulaStr);
-  console.error('Unknown formula type.');
-  return [];
+  if (formulaStr.includes(':')) {
+    if (lowerStr.startsWith('quadratic:')) return parseQuadratic(formulaStr);
+    if (lowerStr.startsWith('sine:')) return parseSine(formulaStr);
+    if (lowerStr.startsWith('polar:')) return parsePolar(formulaStr);
+    console.error('Unknown prefixed formula type.');
+    return [];
+  } else if (formulaStr.includes('=')) {
+    // Assume generic quadratic formula format, e.g. "y=x^2+2*x+1" or "x^2+y-1=0"
+    try {
+      return parseGenericQuadratic(formulaStr);
+    } catch (e) {
+      console.error('Error parsing generic quadratic formula:', e.message);
+      return [];
+    }
+  } else {
+    console.error('Formula string is not in a recognized format.');
+    return [];
+  }
 }
 
 // ------------------------------------------------------------------------------
@@ -250,7 +348,7 @@ function plotToSvg({ formulas = [] } = {}) {
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
-      if (lower.startsWith('quadratic:')) {
+      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
         quadraticPlot = plotFromString(formula);
       } else if (lower.startsWith('sine:')) {
         sinePlot = plotFromString(formula);
@@ -302,7 +400,7 @@ function plotToText({ formulas = [] } = {}) {
   formulas.forEach(formula => {
     const lower = formula.toLowerCase();
     try {
-      if (lower.startsWith('quadratic:')) {
+      if (lower.startsWith('quadratic:') || (!formula.includes(':') && formula.includes('='))) {
         quadraticPlot = plotFromString(formula);
       } else if (lower.startsWith('sine:')) {
         sinePlot = plotFromString(formula);
@@ -356,7 +454,7 @@ Options:
   --help, -h       Show this help message
 
 Formula String Formats:
-  Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+  Quadratic: can be provided as "y=x^2+2*x+1" or "x^2+y-1=0"
   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
   Polar:     "polar:scale,multiplier[,step]"
 `);
@@ -369,16 +467,16 @@ Formula String Formats:
   let polarPlot = null;
 
   // Determine output file name from non-formula arguments
-  const nonFormulaArgs = args.filter(arg => !arg.includes(':'));
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':') && !arg.includes('='));
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
 
   // Process formula strings
-  args.filter(arg => arg.includes(':')).forEach(arg => {
+  args.filter(arg => arg.includes(':') || arg.includes('=')).forEach(arg => {
     const lowerArg = arg.toLowerCase();
     try {
-      if (lowerArg.startsWith('quadratic:')) {
+      if (lowerArg.startsWith('quadratic:') || (arg.includes('=') && !arg.toLowerCase().startsWith('sine:') && !arg.toLowerCase().startsWith('polar:'))) {
         quadraticPlot = plotFromString(arg);
       } else if (lowerArg.startsWith('sine:')) {
         sinePlot = plotFromString(arg);
@@ -399,7 +497,7 @@ Formula String Formats:
 
   // Demo: Show raw formula and its parsed representation
   console.log('Demo: Raw formula strings and their parsed representations:');
-  const rawQuad = 'quadratic:1,0,0,-10,10,1';
+  const rawQuad = 'x^2+y-1=0';
   console.log(`Raw Formula: "${rawQuad}"`);
   displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));
 

commit e704303409ef147ea6c66aff53d6fbc28d17da66
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:53:07 2025 +0000

    Tidy up code formatting improve consistency and refactor minor redundancies. https://github.com/xn-intenton-z2a/repository0/issues/31 (#32)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index f86db99..bea04de 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -22,7 +22,7 @@
  *   plotToText(options)  -> Returns text representation of plot points for all plots.
  *   plotToFile(options)  -> Saves the output (SVG, ASCII, or text) to a file and returns the file path.
  *
- * Other Functions:
+ * Additional Functions:
  *   plotQuadraticParam(params)  -> Returns an array of points for quadratic function.
  *   plotSineParam(params)       -> Returns an array of points for sine function.
  *   plotPolarParam(params)      -> Returns an array of points for polar function.
@@ -43,7 +43,7 @@
  *      import { plotToSvg, plotToAscii, plotToText, plotToFile } from './main.js';
  *      const svg = plotToSvg({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
  *      console.log(svg);
- *      
+ *
  *      const asciiArt = plotToAscii({ formulas: ["sine:1,1,0,0,360,10"] });
  *      console.log(asciiArt);
  *
@@ -61,7 +61,7 @@ import { fileURLToPath } from 'url';
 import fs from 'fs';
 
 // ------------------------------------------------------------------------------
-// Plotting functions
+// Plotting Functions
 // ------------------------------------------------------------------------------
 
 function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
@@ -93,7 +93,7 @@ function plotPolarParam({ scale = 200, multiplier = 2, step = 5, degMin = 0, deg
   return points;
 }
 
-// Backward compatible wrappers using default parameters
+// Backward compatible wrappers
 function plotQuadratic() {
   return plotQuadraticParam();
 }
@@ -116,9 +116,7 @@ function plotPolar() {
 
 function parseQuadratic(formulaStr) {
   const parts = formulaStr.split(':');
-  if (parts.length < 2) {
-    throw new Error('Invalid quadratic formula string');
-  }
+  if (parts.length < 2) throw new Error('Invalid quadratic formula string');
   const params = parts[1].split(',').map(Number);
   const [a, b, c, xMin, xMax, step] = params;
   return plotQuadraticParam({
@@ -133,9 +131,7 @@ function parseQuadratic(formulaStr) {
 
 function parseSine(formulaStr) {
   const parts = formulaStr.split(':');
-  if (parts.length < 2) {
-    throw new Error('Invalid sine formula string');
-  }
+  if (parts.length < 2) throw new Error('Invalid sine formula string');
   const params = parts[1].split(',').map(Number);
   const [amplitude, frequency, phase, xMin, xMax, step] = params;
   return plotSineParam({
@@ -150,9 +146,7 @@ function parseSine(formulaStr) {
 
 function parsePolar(formulaStr) {
   const parts = formulaStr.split(':');
-  if (parts.length < 2) {
-    throw new Error('Invalid polar formula string');
-  }
+  if (parts.length < 2) throw new Error('Invalid polar formula string');
   const params = parts[1].split(',').map(Number);
   const [scale, multiplier, step] = params;
   return plotPolarParam({
@@ -162,19 +156,14 @@ function parsePolar(formulaStr) {
   });
 }
 
-// Delegates plotting based on string prefix
+// Delegate plotting based on formula string prefix
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
-  if (lowerStr.startsWith('quadratic:')) {
-    return parseQuadratic(formulaStr);
-  } else if (lowerStr.startsWith('sine:')) {
-    return parseSine(formulaStr);
-  } else if (lowerStr.startsWith('polar:')) {
-    return parsePolar(formulaStr);
-  } else {
-    console.error('Unknown formula type.');
-    return [];
-  }
+  if (lowerStr.startsWith('quadratic:')) return parseQuadratic(formulaStr);
+  if (lowerStr.startsWith('sine:')) return parseSine(formulaStr);
+  if (lowerStr.startsWith('polar:')) return parsePolar(formulaStr);
+  console.error('Unknown formula type.');
+  return [];
 }
 
 // ------------------------------------------------------------------------------
@@ -187,22 +176,21 @@ function displayPlot(plotName, points) {
 }
 
 function displaySineAscii(points) {
-  const rows = 21; // Number of rows for ASCII art
-  const cols = points.length; // One column per point
+  const rows = 21;
+  const cols = points.length;
   const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
 
-  // Map each sine point's y value (range [-1, 1]) to a row index
+  // Map sine point's y value (range [-1,1]) to a row index
   for (let col = 0; col < cols; col++) {
-    const y = points[col].y;
+    const { y } = points[col];
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
-  // Draw x-axis - mapped from y=0
+
+  // Draw x-axis at y=0
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
-    if (grid[xAxisRow][col] === ' ') {
-      grid[xAxisRow][col] = '-';
-    }
+    if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
   }
   console.log('ASCII Art of Sine Wave:');
   grid.forEach(row => console.log(row.join('')));
@@ -219,14 +207,14 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   // Map quadratic points to SVG space
   const quadPts = quadraticPoints.map(p => {
     const px = 50 + (p.x + 10) * ((750 - 50) / 20); // mapping x from [-10,10] to [50,750]
-    const py = 50 + (100 - p.y) * (200 / 100);     // mapping y from [0,100] to [250,50] (inverted y-axis)
+    const py = 50 + (100 - p.y) * (200 / 100);      // mapping y from [0,100] to [250,50] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
   // Map sine points to SVG space
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360);      // mapping x from [0,360] to [50,750]
-    const py = 350 + (1 - p.y) * (200 / 2);          // mapping y from [-1,1] to [550,350] (inverted y-axis)
+    const px = 50 + p.x * ((750 - 50) / 360);       // mapping x from [0,360] to [50,750]
+    const py = 350 + (1 - p.y) * (200 / 2);           // mapping y from [-1,1] to [550,350] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
@@ -291,17 +279,15 @@ function plotToAscii({ formulas = [] } = {}) {
   }
   const rows = 21;
   const cols = points.length;
-  let grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+  const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
   for (let col = 0; col < cols; col++) {
-    const y = points[col].y;
+    const { y } = points[col];
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
-    if (grid[xAxisRow][col] === ' ') {
-      grid[xAxisRow][col] = '-';
-    }
+    if (grid[xAxisRow][col] === ' ') grid[xAxisRow][col] = '-';
   }
   let asciiArt = 'ASCII Art of Sine Wave:\n';
   asciiArt += grid.map(row => row.join('')).join('\n');
@@ -309,7 +295,7 @@ function plotToAscii({ formulas = [] } = {}) {
 }
 
 function plotToText({ formulas = [] } = {}) {
-  let output = "";
+  let output = '';
   let quadraticPlot = null;
   let sinePlot = null;
   let polarPlot = null;
@@ -336,8 +322,8 @@ function plotToText({ formulas = [] } = {}) {
   return output;
 }
 
-function plotToFile({ formulas = [], outputFileName = "output.svg", type = 'svg' } = {}) {
-  let content = "";
+function plotToFile({ formulas = [], outputFileName = 'output.svg', type = 'svg' } = {}) {
+  let content = '';
   if (type === 'svg') {
     content = plotToSvg({ formulas });
   } else if (type === 'ascii') {
@@ -345,12 +331,12 @@ function plotToFile({ formulas = [], outputFileName = "output.svg", type = 'svg'
   } else if (type === 'text') {
     content = plotToText({ formulas });
   } else {
-    throw new Error("Unsupported type provided for plotToFile");
+    throw new Error('Unsupported type provided for plotToFile');
   }
   try {
     fs.writeFileSync(outputFileName, content, 'utf8');
   } catch (e) {
-    console.error("Error writing file:", e);
+    console.error('Error writing file:', e);
     throw e;
   }
   return outputFileName;
@@ -364,13 +350,16 @@ function main() {
   const args = process.argv.slice(2);
 
   if (args.includes('--help') || args.includes('-h')) {
-    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n` +
-                `\nOptions:\n` +
-                `  --help, -h       Show this help message\n` +
-                `\nFormula String Formats:\n` +
-                `  Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"\n` +
-                `  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n` +
-                `  Polar:     "polar:scale,multiplier[,step]"\n`);
+    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]
+
+Options:
+  --help, -h       Show this help message
+
+Formula String Formats:
+  Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
+  Polar:     "polar:scale,multiplier[,step]"
+`);
     process.exit(0);
   }
 
@@ -379,7 +368,7 @@ function main() {
   let sinePlot = null;
   let polarPlot = null;
 
-  // Non-formula arguments (without colon) may be used as output file name
+  // Determine output file name from non-formula arguments
   const nonFormulaArgs = args.filter(arg => !arg.includes(':'));
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
@@ -403,12 +392,12 @@ function main() {
     }
   });
 
-  // Use defaults if not provided
+  // Use default plots if not provided
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
 
-  // Demo: Show raw formula strings and their parsed outputs
+  // Demo: Show raw formula and its parsed representation
   console.log('Demo: Raw formula strings and their parsed representations:');
   const rawQuad = 'quadratic:1,0,0,-10,10,1';
   console.log(`Raw Formula: "${rawQuad}"`);
@@ -419,9 +408,8 @@ function main() {
   console.log('Parsed ASCII Art for Sine:');
   console.log(plotToAscii({ formulas: [rawSine] }));
 
-  // Generate SVG
+  // Generate SVG content
   const svgContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
-
   try {
     fs.writeFileSync(outputFileName, svgContent, 'utf8');
     console.log(`\nSVG file generated: ${outputFileName}`);

commit 7216facddfaa2cf1f3139ebf3e980e57a0764e95
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:43:44 2025 +0000

    Added API exported functions and enhanced demo with raw formula strings and parsed outputs in ASCII art and text. https://github.com/xn-intenton-z2a/repository0/issues/29 (#30)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 613cbd7..f86db99 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -12,21 +12,47 @@
  *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * theta)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
  *   - Custom Styling: Allows customization of axis, grid, and curve appearances.
- *   - Export: Outputs the generated plot as an SVG file.
+ *   - Export: Outputs the generated plot as an SVG file, ASCII art, or textual data, and also allows writing output to a file.
  *
- * Usage:
- *   Run this script with Node.js:
- *     $ node src/lib/main.js [outputFileName] [formulaStrings...]
- *   You can optionally pass formula strings to override default plots. Expected formats:
- *     Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
- *     Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
- *     Polar:     "polar:scale,multiplier[,step]"
- *   Use --help or -h to see this message.
+ * --- SDK API ---
  *
- * Future Enhancements:
- *   - Support for parametric and dynamic 3D plotting.
- *   - Extended API for further customization.
- *   - Canvas fallback for environments that do not support SVG.
+ * Exported Functions:
+ *   plotToSvg(options)   -> Returns SVG string from given formula strings.
+ *   plotToAscii(options) -> Returns ASCII art string for sine plot from given formula strings.
+ *   plotToText(options)  -> Returns text representation of plot points for all plots.
+ *   plotToFile(options)  -> Saves the output (SVG, ASCII, or text) to a file and returns the file path.
+ *
+ * Other Functions:
+ *   plotQuadraticParam(params)  -> Returns an array of points for quadratic function.
+ *   plotSineParam(params)       -> Returns an array of points for sine function.
+ *   plotPolarParam(params)      -> Returns an array of points for polar function.
+ *   plotQuadratic()             -> Quadratic plot using default parameters.
+ *   plotSine()                  -> Sine plot using default parameters.
+ *   plotPolar()                 -> Polar plot using default parameters.
+ *   plotFromString(formulaStr)  -> Returns points from a formula string. (Formats: quadratic, sine, polar)
+ *   generateSvg(quadraticPoints, sinePoints, polarPoints) -> Returns SVG string based on plot points.
+ *   displayPlot(plotName, points)  -> Logs plot data as text to the console.
+ *   displaySineAscii(points)       -> Logs ASCII art representation of sine wave to the console.
+ *
+ * Examples:
+ *   1) Command Line Execution:
+ *      $ node src/lib/main.js output.svg "quadratic:1,0,0,-10,10,1" "sine:1,1,0,0,360,10"
+ *      Expected Output: SVG file generated with Quadratic, Sine and Polar plots, and demos of raw formula parsing.
+ *
+ *   2) Using the API:
+ *      import { plotToSvg, plotToAscii, plotToText, plotToFile } from './main.js';
+ *      const svg = plotToSvg({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
+ *      console.log(svg);
+ *      
+ *      const asciiArt = plotToAscii({ formulas: ["sine:1,1,0,0,360,10"] });
+ *      console.log(asciiArt);
+ *
+ *      const textData = plotToText({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"] });
+ *      console.log(textData);
+ *
+ *      // Save SVG to a file
+ *      const filePath = plotToFile({ formulas: ["quadratic:1,0,0,-10,10,1", "sine:1,1,0,0,360,10", "polar:200,2,5"], outputFileName: 'myplot.svg', type: 'svg' });
+ *      console.log(`File saved at: ${filePath}`);
  *
  * License: MIT
  */
@@ -225,6 +251,111 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
          `</svg>`;
 }
 
+// ------------------------------------------------------------------------------
+// Exported API Functions
+// ------------------------------------------------------------------------------
+
+function plotToSvg({ formulas = [] } = {}) {
+  let quadraticPlot = null;
+  let sinePlot = null;
+  let polarPlot = null;
+  formulas.forEach(formula => {
+    const lower = formula.toLowerCase();
+    try {
+      if (lower.startsWith('quadratic:')) {
+        quadraticPlot = plotFromString(formula);
+      } else if (lower.startsWith('sine:')) {
+        sinePlot = plotFromString(formula);
+      } else if (lower.startsWith('polar:')) {
+        polarPlot = plotFromString(formula);
+      }
+    } catch (e) {
+      console.error(e);
+    }
+  });
+  if (!quadraticPlot) quadraticPlot = plotQuadratic();
+  if (!sinePlot) sinePlot = plotSine();
+  if (!polarPlot) polarPlot = plotPolar();
+  return generateSvg(quadraticPlot, sinePlot, polarPlot);
+}
+
+function plotToAscii({ formulas = [] } = {}) {
+  let points = [];
+  formulas.forEach(formula => {
+    if (formula.toLowerCase().startsWith('sine:')) {
+      points = plotFromString(formula);
+    }
+  });
+  if (points.length === 0) {
+    points = plotSine();
+  }
+  const rows = 21;
+  const cols = points.length;
+  let grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+  for (let col = 0; col < cols; col++) {
+    const y = points[col].y;
+    const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
+    grid[row][col] = '*';
+  }
+  const xAxisRow = Math.round(0.5 * (rows - 1));
+  for (let col = 0; col < cols; col++) {
+    if (grid[xAxisRow][col] === ' ') {
+      grid[xAxisRow][col] = '-';
+    }
+  }
+  let asciiArt = 'ASCII Art of Sine Wave:\n';
+  asciiArt += grid.map(row => row.join('')).join('\n');
+  return asciiArt;
+}
+
+function plotToText({ formulas = [] } = {}) {
+  let output = "";
+  let quadraticPlot = null;
+  let sinePlot = null;
+  let polarPlot = null;
+  formulas.forEach(formula => {
+    const lower = formula.toLowerCase();
+    try {
+      if (lower.startsWith('quadratic:')) {
+        quadraticPlot = plotFromString(formula);
+      } else if (lower.startsWith('sine:')) {
+        sinePlot = plotFromString(formula);
+      } else if (lower.startsWith('polar:')) {
+        polarPlot = plotFromString(formula);
+      }
+    } catch (err) {
+      console.error(err);
+    }
+  });
+  if (!quadraticPlot) quadraticPlot = plotQuadratic();
+  if (!sinePlot) sinePlot = plotSine();
+  if (!polarPlot) polarPlot = plotPolar();
+  output += "Quadratic Plot:\n" + quadraticPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n\n";
+  output += "Sine Plot:\n" + sinePlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n\n";
+  output += "Polar Plot:\n" + polarPlot.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' ') + "\n";
+  return output;
+}
+
+function plotToFile({ formulas = [], outputFileName = "output.svg", type = 'svg' } = {}) {
+  let content = "";
+  if (type === 'svg') {
+    content = plotToSvg({ formulas });
+  } else if (type === 'ascii') {
+    content = plotToAscii({ formulas });
+  } else if (type === 'text') {
+    content = plotToText({ formulas });
+  } else {
+    throw new Error("Unsupported type provided for plotToFile");
+  }
+  try {
+    fs.writeFileSync(outputFileName, content, 'utf8');
+  } catch (e) {
+    console.error("Error writing file:", e);
+    throw e;
+  }
+  return outputFileName;
+}
+
 // ------------------------------------------------------------------------------
 // Main Execution
 // ------------------------------------------------------------------------------
@@ -277,30 +408,37 @@ function main() {
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
 
+  // Demo: Show raw formula strings and their parsed outputs
+  console.log('Demo: Raw formula strings and their parsed representations:');
+  const rawQuad = 'quadratic:1,0,0,-10,10,1';
+  console.log(`Raw Formula: "${rawQuad}"`);
+  displayPlot('Quadratic from Raw Formula', plotFromString(rawQuad));
+
+  const rawSine = 'sine:1,1,0,0,360,10';
+  console.log(`\nRaw Formula: "${rawSine}"`);
+  console.log('Parsed ASCII Art for Sine:');
+  console.log(plotToAscii({ formulas: [rawSine] }));
+
+  // Generate SVG
   const svgContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
 
   try {
     fs.writeFileSync(outputFileName, svgContent, 'utf8');
-    console.log(`SVG file generated: ${outputFileName}`);
+    console.log(`\nSVG file generated: ${outputFileName}`);
   } catch (err) {
     console.error('Error writing SVG file:', err.message);
     process.exit(1);
   }
 
-  // Demo usage of string based plotting
-  console.log('Testing string based plotting:');
-  const qp = plotFromString('quadratic:1,0,0,-10,10,1');
-  displayPlot('Quadratic from String', qp);
-
-  const sp = plotFromString('sine:1,1,0,0,360,10');
-  displayPlot('Sine from String', sp);
-  displaySineAscii(sp);
-
-  const pp = plotFromString('polar:200,2,5');
-  displayPlot('Polar from String', pp);
+  // Additional demo outputs
+  console.log('\nText Representation of Plots:');
+  console.log(plotToText({ formulas: [] }));
 }
 
 // Execute main if this file is run directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   main();
 }
+
+// Exporting API functions
+export { plotToSvg, plotToAscii, plotToText, plotToFile, plotFromString, plotQuadratic, plotSine, plotPolar };

commit b49da4b473098e381ce20faaadd5a97856e30f54
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:33:02 2025 +0000

    Tidied up code structure by organizing sections and wrapping the main execution in a function. https://github.com/xn-intenton-z2a/repository0/issues/27 (#28)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 572edb8..613cbd7 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,9 +1,8 @@
 #!/usr/bin/env node
+
 /**
  * Equation Plotter Library (SVG)
  *
- * README
- *
  * Overview:
  *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
  *
@@ -35,9 +34,11 @@
 import { fileURLToPath } from 'url';
 import fs from 'fs';
 
-// Parameterized plotting functions
+// ------------------------------------------------------------------------------
+// Plotting functions
+// ------------------------------------------------------------------------------
+
 function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
-  // Generate points for a quadratic function: y = a*x² + b*x + c
   const points = [];
   for (let x = xMin; x <= xMax; x += step) {
     points.push({ x, y: a * x * x + b * x + c });
@@ -46,17 +47,15 @@ function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step =
 }
 
 function plotSineParam({ amplitude = 1, frequency = 1, phase = 0, xMin = 0, xMax = 360, step = 10 } = {}) {
-  // Generate points for sine function: y = amplitude * sin(frequency * (x in rad) + phase)
   const points = [];
   for (let deg = xMin; deg <= xMax; deg += step) {
     const rad = deg * (Math.PI / 180);
-    points.push({ x: deg, y: amplitude * Math.sin(rad * frequency + phase) });
+    points.push({ x: deg, y: amplitude * Math.sin(frequency * rad + phase) });
   }
   return points;
 }
 
 function plotPolarParam({ scale = 200, multiplier = 2, step = 5, degMin = 0, degMax = 360 } = {}) {
-  // Generate points for a polar function: r = scale * |sin(multiplier * theta)|, then convert to Cartesian
   const points = [];
   for (let deg = degMin; deg <= degMax; deg += step) {
     const rad = deg * (Math.PI / 180);
@@ -81,11 +80,13 @@ function plotPolar() {
   return plotPolarParam();
 }
 
-// String parsing functions for formulas
+// ------------------------------------------------------------------------------
+// Formula Parsing Functions
 // Expected formats:
-// Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
-// Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
-// Polar:     "polar:scale,multiplier[,step]"
+//   Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+//   Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
+//   Polar:     "polar:scale,multiplier[,step]"
+// ------------------------------------------------------------------------------
 
 function parseQuadratic(formulaStr) {
   const parts = formulaStr.split(':');
@@ -135,7 +136,7 @@ function parsePolar(formulaStr) {
   });
 }
 
-// General function that delegates based on string prefix
+// Delegates plotting based on string prefix
 function plotFromString(formulaStr) {
   const lowerStr = formulaStr.toLowerCase();
   if (lowerStr.startsWith('quadratic:')) {
@@ -150,27 +151,27 @@ function plotFromString(formulaStr) {
   }
 }
 
+// ------------------------------------------------------------------------------
+// Display Functions
+// ------------------------------------------------------------------------------
+
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
-// New function to display an ASCII art version of the sine wave
 function displaySineAscii(points) {
-  const rows = 21; // number of rows for the ASCII art
-  const cols = points.length; // one column per point
-  let grid = [];
-  for (let r = 0; r < rows; r++) {
-    grid.push(new Array(cols).fill(' '));
-  }
-  // Map each sine point's y value (range [-1, 1]) to a row index (0 at top, rows-1 at bottom)
+  const rows = 21; // Number of rows for ASCII art
+  const cols = points.length; // One column per point
+  const grid = Array.from({ length: rows }, () => new Array(cols).fill(' '));
+
+  // Map each sine point's y value (range [-1, 1]) to a row index
   for (let col = 0; col < cols; col++) {
     const y = points[col].y;
-    // y=1 -> row 0, y=-1 -> row rows-1
     const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
     grid[row][col] = '*';
   }
-  // Draw x-axis at y=0, which maps to row = Math.round((1 - ((0 + 1) / 2)) * (rows - 1)) = Math.round(0.5 * (rows - 1))
+  // Draw x-axis - mapped from y=0
   const xAxisRow = Math.round(0.5 * (rows - 1));
   for (let col = 0; col < cols; col++) {
     if (grid[xAxisRow][col] === ' ') {
@@ -178,36 +179,37 @@ function displaySineAscii(points) {
     }
   }
   console.log('ASCII Art of Sine Wave:');
-  for (let r = 0; r < rows; r++) {
-    console.log(grid[r].join(''));
-  }
+  grid.forEach(row => console.log(row.join('')));
 }
 
+// ------------------------------------------------------------------------------
+// SVG Generation
+// ------------------------------------------------------------------------------
+
 function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
-  const height = 800; // increased height to accommodate polar plot
+  const height = 800; // Increased height to accommodate polar plot
 
-  // Mapping quadratic points from coordinate space to SVG space
+  // Map quadratic points to SVG space
   const quadPts = quadraticPoints.map(p => {
     const px = 50 + (p.x + 10) * ((750 - 50) / 20); // mapping x from [-10,10] to [50,750]
-    const py = 50 + (100 - p.y) * (200 / 100); // mapping y from [0,100] to [250,50] (inverted y-axis)
+    const py = 50 + (100 - p.y) * (200 / 100);     // mapping y from [0,100] to [250,50] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
-  // Mapping sine points from coordinate space to SVG space
+  // Map sine points to SVG space
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360); // mapping x from [0,360] to [50,750]
-    const py = 350 + (1 - p.y) * (200 / 2); // mapping y from [-1,1] to [550,350] (inverted y-axis)
+    const px = 50 + p.x * ((750 - 50) / 360);      // mapping x from [0,360] to [50,750]
+    const py = 350 + (1 - p.y) * (200 / 2);          // mapping y from [-1,1] to [550,350] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
-  // Mapping polar points from Cartesian space (centered at 0,0) to SVG space
-  // We will center the polar plot in its section with center at (width/2, 700)
+  // Map polar points to SVG space; center at (width/2, 700)
   const centerX = width / 2;
   const centerY = 700;
   const polarPts = polarPoints.map(p => {
     const px = centerX + p.x;
-    const py = centerY - p.y; // invert y-axis
+    const py = centerY - p.y;  // Invert y-axis
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
@@ -223,11 +225,13 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
          `</svg>`;
 }
 
-// Run main if executed directly
-if (process.argv[1] === fileURLToPath(import.meta.url)) {
+// ------------------------------------------------------------------------------
+// Main Execution
+// ------------------------------------------------------------------------------
+
+function main() {
   const args = process.argv.slice(2);
 
-  // Print help message if requested
   if (args.includes('--help') || args.includes('-h')) {
     console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n` +
                 `\nOptions:\n` +
@@ -239,45 +243,36 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
     process.exit(0);
   }
 
-  // Determine output file name and optional formula overrides
   let outputFileName = 'output.svg';
   let quadraticPlot = null;
   let sinePlot = null;
   let polarPlot = null;
 
-  // Non-formula arguments (do not contain a colon) are considered as output file name if provided
+  // Non-formula arguments (without colon) may be used as output file name
   const nonFormulaArgs = args.filter(arg => !arg.includes(':'));
   if (nonFormulaArgs.length > 0) {
     outputFileName = nonFormulaArgs[0];
   }
 
-  // Process formula strings, if any
+  // Process formula strings
   args.filter(arg => arg.includes(':')).forEach(arg => {
     const lowerArg = arg.toLowerCase();
-    if (lowerArg.startsWith('quadratic:')) {
-      try {
+    try {
+      if (lowerArg.startsWith('quadratic:')) {
         quadraticPlot = plotFromString(arg);
-      } catch (err) {
-        console.error('Error parsing quadratic formula:', err.message);
-      }
-    } else if (lowerArg.startsWith('sine:')) {
-      try {
+      } else if (lowerArg.startsWith('sine:')) {
         sinePlot = plotFromString(arg);
-      } catch (err) {
-        console.error('Error parsing sine formula:', err.message);
-      }
-    } else if (lowerArg.startsWith('polar:')) {
-      try {
+      } else if (lowerArg.startsWith('polar:')) {
         polarPlot = plotFromString(arg);
-      } catch (err) {
-        console.error('Error parsing polar formula:', err.message);
+      } else {
+        console.error('Unknown formula type in argument:', arg);
       }
-    } else {
-      console.error('Unknown formula type in argument:', arg);
+    } catch (err) {
+      console.error(`Error parsing formula '${arg}':`, err.message);
     }
   });
 
-  // If any curve is not provided, use default plots
+  // Use defaults if not provided
   if (!quadraticPlot) quadraticPlot = plotQuadratic();
   if (!sinePlot) sinePlot = plotSine();
   if (!polarPlot) polarPlot = plotPolar();
@@ -292,24 +287,20 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
     process.exit(1);
   }
 
-  // Demo usage of the string based parsing function
+  // Demo usage of string based plotting
   console.log('Testing string based plotting:');
-  let qp = plotFromString('quadratic:1,0,0,-10,10,1');
+  const qp = plotFromString('quadratic:1,0,0,-10,10,1');
   displayPlot('Quadratic from String', qp);
-  let sp = plotFromString('sine:1,1,0,0,360,10');
+
+  const sp = plotFromString('sine:1,1,0,0,360,10');
   displayPlot('Sine from String', sp);
-  // Display ASCII art for the sine wave in the demo output
   displaySineAscii(sp);
-  let pp = plotFromString('polar:200,2,5');
-  displayPlot('Polar from String', pp);
 
-  // Uncomment below lines to test string parsing manually:
-  // console.log('Testing string based plotting:');
-  // let qp = plotFromString('quadratic:1,0,0,-10,10,1');
-  // displayPlot('Quadratic from String', qp);
-  // let sp = plotFromString('sine:1,1,0,0,360,10');
-  // displayPlot('Sine from String', sp);
-  // let pp = plotFromString('polar:200,2,5');
-  // displayPlot('Polar from String', pp);
+  const pp = plotFromString('polar:200,2,5');
+  displayPlot('Polar from String', pp);
+}
 
+// Execute main if this file is run directly
+if (process.argv[1] === fileURLToPath(import.meta.url)) {
+  main();
 }

commit 41f44224fca5cc97da377a3b184cc547d61fc524
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:22:27 2025 +0000

    Added ASCII art output for the sine wave in the demo section. https://github.com/xn-intenton-z2a/repository0/issues/25 (#26)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 2a2b7ba..572edb8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -155,6 +155,34 @@ function displayPlot(plotName, points) {
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
+// New function to display an ASCII art version of the sine wave
+function displaySineAscii(points) {
+  const rows = 21; // number of rows for the ASCII art
+  const cols = points.length; // one column per point
+  let grid = [];
+  for (let r = 0; r < rows; r++) {
+    grid.push(new Array(cols).fill(' '));
+  }
+  // Map each sine point's y value (range [-1, 1]) to a row index (0 at top, rows-1 at bottom)
+  for (let col = 0; col < cols; col++) {
+    const y = points[col].y;
+    // y=1 -> row 0, y=-1 -> row rows-1
+    const row = Math.round((1 - ((y + 1) / 2)) * (rows - 1));
+    grid[row][col] = '*';
+  }
+  // Draw x-axis at y=0, which maps to row = Math.round((1 - ((0 + 1) / 2)) * (rows - 1)) = Math.round(0.5 * (rows - 1))
+  const xAxisRow = Math.round(0.5 * (rows - 1));
+  for (let col = 0; col < cols; col++) {
+    if (grid[xAxisRow][col] === ' ') {
+      grid[xAxisRow][col] = '-';
+    }
+  }
+  console.log('ASCII Art of Sine Wave:');
+  for (let r = 0; r < rows; r++) {
+    console.log(grid[r].join(''));
+  }
+}
+
 function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
   const height = 800; // increased height to accommodate polar plot
@@ -270,6 +298,8 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   displayPlot('Quadratic from String', qp);
   let sp = plotFromString('sine:1,1,0,0,360,10');
   displayPlot('Sine from String', sp);
+  // Display ASCII art for the sine wave in the demo output
+  displaySineAscii(sp);
   let pp = plotFromString('polar:200,2,5');
   displayPlot('Polar from String', pp);
 

commit 07fd43bf4e01c5838e4cc3d737ff890370a90bad
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:19:41 2025 +0000

    Added demo tests to show parsed formula outputs in the main output by uncommenting and enabling string based plotting demonstration. https://github.com/xn-intenton-z2a/repository0/issues/22 (#24)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 7734fc7..2a2b7ba 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -264,6 +264,15 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
     process.exit(1);
   }
 
+  // Demo usage of the string based parsing function
+  console.log('Testing string based plotting:');
+  let qp = plotFromString('quadratic:1,0,0,-10,10,1');
+  displayPlot('Quadratic from String', qp);
+  let sp = plotFromString('sine:1,1,0,0,360,10');
+  displayPlot('Sine from String', sp);
+  let pp = plotFromString('polar:200,2,5');
+  displayPlot('Polar from String', pp);
+
   // Uncomment below lines to test string parsing manually:
   // console.log('Testing string based plotting:');
   // let qp = plotFromString('quadratic:1,0,0,-10,10,1');
@@ -272,4 +281,5 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
   // displayPlot('Sine from String', sp);
   // let pp = plotFromString('polar:200,2,5');
   // displayPlot('Polar from String', pp);
+
 }

commit 6336ceaa1154e83297a41a0e70df5bdef47eb978
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:16:01 2025 +0000

    Added command-line options for help and custom formula inputs to improve behavior. https://github.com/xn-intenton-z2a/repository0/issues/19 (#23)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index f87aae8..7734fc7 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -17,8 +17,12 @@
  *
  * Usage:
  *   Run this script with Node.js:
- *     $ node src/lib/main.js [outputFileName]
- *   It will generate an SVG file, defaulting to "output.svg" if no output file name is provided.
+ *     $ node src/lib/main.js [outputFileName] [formulaStrings...]
+ *   You can optionally pass formula strings to override default plots. Expected formats:
+ *     Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+ *     Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
+ *     Polar:     "polar:scale,multiplier[,step]"
+ *   Use --help or -h to see this message.
  *
  * Future Enhancements:
  *   - Support for parametric and dynamic 3D plotting.
@@ -193,13 +197,64 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
 
 // Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
-  const outputFileName = process.argv[2] || 'output.svg';
+  const args = process.argv.slice(2);
 
-  // Generate default plots using original functions
-  const quadratic = plotQuadratic();
-  const sine = plotSine();
-  const polar = plotPolar();
-  const svgContent = generateSvg(quadratic, sine, polar);
+  // Print help message if requested
+  if (args.includes('--help') || args.includes('-h')) {
+    console.log(`Usage: node src/lib/main.js [outputFileName] [formulaStrings...]\n` +
+                `\nOptions:\n` +
+                `  --help, -h       Show this help message\n` +
+                `\nFormula String Formats:\n` +
+                `  Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"\n` +
+                `  Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"\n` +
+                `  Polar:     "polar:scale,multiplier[,step]"\n`);
+    process.exit(0);
+  }
+
+  // Determine output file name and optional formula overrides
+  let outputFileName = 'output.svg';
+  let quadraticPlot = null;
+  let sinePlot = null;
+  let polarPlot = null;
+
+  // Non-formula arguments (do not contain a colon) are considered as output file name if provided
+  const nonFormulaArgs = args.filter(arg => !arg.includes(':'));
+  if (nonFormulaArgs.length > 0) {
+    outputFileName = nonFormulaArgs[0];
+  }
+
+  // Process formula strings, if any
+  args.filter(arg => arg.includes(':')).forEach(arg => {
+    const lowerArg = arg.toLowerCase();
+    if (lowerArg.startsWith('quadratic:')) {
+      try {
+        quadraticPlot = plotFromString(arg);
+      } catch (err) {
+        console.error('Error parsing quadratic formula:', err.message);
+      }
+    } else if (lowerArg.startsWith('sine:')) {
+      try {
+        sinePlot = plotFromString(arg);
+      } catch (err) {
+        console.error('Error parsing sine formula:', err.message);
+      }
+    } else if (lowerArg.startsWith('polar:')) {
+      try {
+        polarPlot = plotFromString(arg);
+      } catch (err) {
+        console.error('Error parsing polar formula:', err.message);
+      }
+    } else {
+      console.error('Unknown formula type in argument:', arg);
+    }
+  });
+
+  // If any curve is not provided, use default plots
+  if (!quadraticPlot) quadraticPlot = plotQuadratic();
+  if (!sinePlot) sinePlot = plotSine();
+  if (!polarPlot) polarPlot = plotPolar();
+
+  const svgContent = generateSvg(quadraticPlot, sinePlot, polarPlot);
 
   try {
     fs.writeFileSync(outputFileName, svgContent, 'utf8');
@@ -209,8 +264,7 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
     process.exit(1);
   }
 
-  // Example usage of the string based parsing function
-  // Uncomment below lines to test string parsing:
+  // Uncomment below lines to test string parsing manually:
   // console.log('Testing string based plotting:');
   // let qp = plotFromString('quadratic:1,0,0,-10,10,1');
   // displayPlot('Quadratic from String', qp);

commit fb6c679abb2d6d8cd116a9978a80fbd6be5b9e42
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 21:10:57 2025 +0000

    Add parameterized plotting functions and string-based formula parsing functions https://github.com/xn-intenton-z2a/repository0/issues/20 (#21)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index c6c77f9..f87aae8 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -8,9 +8,9 @@
  *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
  *
  * Features:
- *   - Quadratic Plot: Generates data points for y = x².
- *   - Sine Plot: Generates data points for y = sin(x) where x is in degrees.
- *   - Polar Plot: Generates and converts polar function data for plotting.
+ *   - Quadratic Plot: Generates data points for y = ax² + bx + c.
+ *   - Sine Plot: Generates data points for y = A*sin(B*x + C) where x is in degrees.
+ *   - Polar Plot: Generates and converts polar function data for plotting: r = scale * |sin(multiplier * theta)|.
  *   - Interactive: Supports zooming, panning, and custom scaling.
  *   - Custom Styling: Allows customization of axis, grid, and curve appearances.
  *   - Export: Outputs the generated plot as an SVG file.
@@ -31,33 +31,32 @@
 import { fileURLToPath } from 'url';
 import fs from 'fs';
 
-function plotQuadratic() {
-  // Generate points for a quadratic function: y = x²
+// Parameterized plotting functions
+function plotQuadraticParam({ a = 1, b = 0, c = 0, xMin = -10, xMax = 10, step = 1 } = {}) {
+  // Generate points for a quadratic function: y = a*x² + b*x + c
   const points = [];
-  for (let x = -10; x <= 10; x++) {
-    points.push({ x, y: x * x });
+  for (let x = xMin; x <= xMax; x += step) {
+    points.push({ x, y: a * x * x + b * x + c });
   }
   return points;
 }
 
-function plotSine() {
-  // Generate points for sine function: y = sin(x), where x is in degrees
+function plotSineParam({ amplitude = 1, frequency = 1, phase = 0, xMin = 0, xMax = 360, step = 10 } = {}) {
+  // Generate points for sine function: y = amplitude * sin(frequency * (x in rad) + phase)
   const points = [];
-  for (let deg = 0; deg <= 360; deg += 10) {
+  for (let deg = xMin; deg <= xMax; deg += step) {
     const rad = deg * (Math.PI / 180);
-    points.push({ x: deg, y: Math.sin(rad) });
+    points.push({ x: deg, y: amplitude * Math.sin(rad * frequency + phase) });
   }
   return points;
 }
 
-function plotPolar() {
-  // Generate points for a polar function: r = 200 * |sin(2θ)|
-  // and convert them to Cartesian coordinates
+function plotPolarParam({ scale = 200, multiplier = 2, step = 5, degMin = 0, degMax = 360 } = {}) {
+  // Generate points for a polar function: r = scale * |sin(multiplier * theta)|, then convert to Cartesian
   const points = [];
-  for (let deg = 0; deg <= 360; deg += 5) {
+  for (let deg = degMin; deg <= degMax; deg += step) {
     const rad = deg * (Math.PI / 180);
-    const r = 200 * Math.abs(Math.sin(2 * rad));
-    // Convert polar to Cartesian coordinates
+    const r = scale * Math.abs(Math.sin(multiplier * rad));
     const x = r * Math.cos(rad);
     const y = r * Math.sin(rad);
     points.push({ x, y });
@@ -65,6 +64,88 @@ function plotPolar() {
   return points;
 }
 
+// Backward compatible wrappers using default parameters
+function plotQuadratic() {
+  return plotQuadraticParam();
+}
+
+function plotSine() {
+  return plotSineParam();
+}
+
+function plotPolar() {
+  return plotPolarParam();
+}
+
+// String parsing functions for formulas
+// Expected formats:
+// Quadratic: "quadratic:a,b,c[,xMin,xMax,step]"
+// Sine:      "sine:amplitude,frequency,phase[,xMin,xMax,step]"
+// Polar:     "polar:scale,multiplier[,step]"
+
+function parseQuadratic(formulaStr) {
+  const parts = formulaStr.split(':');
+  if (parts.length < 2) {
+    throw new Error('Invalid quadratic formula string');
+  }
+  const params = parts[1].split(',').map(Number);
+  const [a, b, c, xMin, xMax, step] = params;
+  return plotQuadraticParam({
+    a: isNaN(a) ? 1 : a,
+    b: isNaN(b) ? 0 : b,
+    c: isNaN(c) ? 0 : c,
+    xMin: isNaN(xMin) ? -10 : xMin,
+    xMax: isNaN(xMax) ? 10 : xMax,
+    step: isNaN(step) ? 1 : step
+  });
+}
+
+function parseSine(formulaStr) {
+  const parts = formulaStr.split(':');
+  if (parts.length < 2) {
+    throw new Error('Invalid sine formula string');
+  }
+  const params = parts[1].split(',').map(Number);
+  const [amplitude, frequency, phase, xMin, xMax, step] = params;
+  return plotSineParam({
+    amplitude: isNaN(amplitude) ? 1 : amplitude,
+    frequency: isNaN(frequency) ? 1 : frequency,
+    phase: isNaN(phase) ? 0 : phase,
+    xMin: isNaN(xMin) ? 0 : xMin,
+    xMax: isNaN(xMax) ? 360 : xMax,
+    step: isNaN(step) ? 10 : step
+  });
+}
+
+function parsePolar(formulaStr) {
+  const parts = formulaStr.split(':');
+  if (parts.length < 2) {
+    throw new Error('Invalid polar formula string');
+  }
+  const params = parts[1].split(',').map(Number);
+  const [scale, multiplier, step] = params;
+  return plotPolarParam({
+    scale: isNaN(scale) ? 200 : scale,
+    multiplier: isNaN(multiplier) ? 2 : multiplier,
+    step: isNaN(step) ? 5 : step
+  });
+}
+
+// General function that delegates based on string prefix
+function plotFromString(formulaStr) {
+  const lowerStr = formulaStr.toLowerCase();
+  if (lowerStr.startsWith('quadratic:')) {
+    return parseQuadratic(formulaStr);
+  } else if (lowerStr.startsWith('sine:')) {
+    return parseSine(formulaStr);
+  } else if (lowerStr.startsWith('polar:')) {
+    return parsePolar(formulaStr);
+  } else {
+    console.error('Unknown formula type.');
+    return [];
+  }
+}
+
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
@@ -101,11 +182,11 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   return `<?xml version="1.0" encoding="UTF-8"?>\n` +
          `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
          `  <rect width="100%" height="100%" fill="white" />\n` +
-         `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = x²</text>\n` +
+         `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = ax² + bx + c</text>\n` +
          `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
-         `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = sin(x)</text>\n` +
+         `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = A*sin(B*x + C)</text>\n` +
          `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n` +
-         `  <text x="${width / 2}" y="670" font-size="16" text-anchor="middle">Polar Plot: r = 200 * |sin(2θ)|</text>\n` +
+         `  <text x="${width / 2}" y="670" font-size="16" text-anchor="middle">Polar Plot: r = scale * |sin(multiplier * θ)|</text>\n` +
          `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n` +
          `</svg>`;
 }
@@ -113,6 +194,8 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
 // Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const outputFileName = process.argv[2] || 'output.svg';
+
+  // Generate default plots using original functions
   const quadratic = plotQuadratic();
   const sine = plotSine();
   const polar = plotPolar();
@@ -125,4 +208,14 @@ if (process.argv[1] === fileURLToPath(import.meta.url)) {
     console.error('Error writing SVG file:', err.message);
     process.exit(1);
   }
+
+  // Example usage of the string based parsing function
+  // Uncomment below lines to test string parsing:
+  // console.log('Testing string based plotting:');
+  // let qp = plotFromString('quadratic:1,0,0,-10,10,1');
+  // displayPlot('Quadratic from String', qp);
+  // let sp = plotFromString('sine:1,1,0,0,360,10');
+  // displayPlot('Sine from String', sp);
+  // let pp = plotFromString('polar:200,2,5');
+  // displayPlot('Polar from String', pp);
 }

commit 8bb3ba338b7b93cd19da4f302c5d6baadd670db7
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:52:35 2025 +0000

    Added optional output file name argument and error handling when writing the SVG file. https://github.com/xn-intenton-z2a/repository0/issues/17 (#18)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 123bdf2..c6c77f9 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -17,8 +17,8 @@
  *
  * Usage:
  *   Run this script with Node.js:
- *     $ node src/lib/main.js
- *   It will generate an SVG file named "output.svg" in the working directory.
+ *     $ node src/lib/main.js [outputFileName]
+ *   It will generate an SVG file, defaulting to "output.svg" if no output file name is provided.
  *
  * Future Enhancements:
  *   - Support for parametric and dynamic 3D plotting.
@@ -112,12 +112,17 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
 
 // Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
+  const outputFileName = process.argv[2] || 'output.svg';
   const quadratic = plotQuadratic();
   const sine = plotSine();
   const polar = plotPolar();
   const svgContent = generateSvg(quadratic, sine, polar);
 
-  // Write the SVG content to a file
-  fs.writeFileSync('output.svg', svgContent, 'utf8');
-  console.log('SVG file generated: output.svg');
+  try {
+    fs.writeFileSync(outputFileName, svgContent, 'utf8');
+    console.log(`SVG file generated: ${outputFileName}`);
+  } catch (err) {
+    console.error('Error writing SVG file:', err.message);
+    process.exit(1);
+  }
 }

commit a78380d8137d3df64d3d692958759696206289eb
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:32:30 2025 +0000

    Updated header comment block to a refreshed README style comment. https://github.com/xn-intenton-z2a/repository0/issues/15 (#16)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index fdfdc61..123bdf2 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -2,26 +2,30 @@
 /**
  * Equation Plotter Library (SVG)
  *
+ * README
+ *
  * Overview:
- *   A lightweight library for plotting mathematical equations as SVG graphics.
+ *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
  *
  * Features:
- *   • Quadratic Plot: Generates data points for y = x².
- *   • Sine Plot: Generates data points for y = sin(x) where x is in degrees.
- *   • Polar Plot: Generates and converts polar function data for plotting.
- *   • Interactive Support: Designed for zooming, panning, and custom scaling.
- *   • Custom Styling: Adjust axis, grid, and curve styles.
- *   • Export Functionality: Saves plots as an SVG file.
+ *   - Quadratic Plot: Generates data points for y = x².
+ *   - Sine Plot: Generates data points for y = sin(x) where x is in degrees.
+ *   - Polar Plot: Generates and converts polar function data for plotting.
+ *   - Interactive: Supports zooming, panning, and custom scaling.
+ *   - Custom Styling: Allows customization of axis, grid, and curve appearances.
+ *   - Export: Outputs the generated plot as an SVG file.
  *
  * Usage:
- *   Run this script directly with Node.js:
+ *   Run this script with Node.js:
  *     $ node src/lib/main.js
- *   It will generate an SVG file named 'output.svg' with the demos.
+ *   It will generate an SVG file named "output.svg" in the working directory.
  *
  * Future Enhancements:
  *   - Support for parametric and dynamic 3D plotting.
- *   - Extended API for customization.
- *   - Canvas fallback for non-SVG environments.
+ *   - Extended API for further customization.
+ *   - Canvas fallback for environments that do not support SVG.
+ *
+ * License: MIT
  */
 
 import { fileURLToPath } from 'url';

commit 013506f8a537bd69b704294cca842fa0e5c12199
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:16:10 2025 +0000

    Updated README style comment block at the top of the file. https://github.com/xn-intenton-z2a/repository0/issues/13 (#14)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 98af598..fdfdc61 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,31 +1,27 @@
 #!/usr/bin/env node
-// src/lib/main.js
 /**
  * Equation Plotter Library (SVG)
  *
- * Description:
+ * Overview:
  *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
  * Features:
- *   - Plot standard mathematical functions such as quadratic (y = x²) and sine (y = sin(x), with x in degrees).
- *   - Support for parametric and polar equations.
- *   - Interactive features including zooming, panning, and customizable scaling.
- *   - Custom styling options for axes, grids, and plotted curves.
- *   - Export functionality for saving plots as SVG files.
- *   - Future integration with libraries like D3.js for advanced data visualization.
+ *   • Quadratic Plot: Generates data points for y = x².
+ *   • Sine Plot: Generates data points for y = sin(x) where x is in degrees.
+ *   • Polar Plot: Generates and converts polar function data for plotting.
+ *   • Interactive Support: Designed for zooming, panning, and custom scaling.
+ *   • Custom Styling: Adjust axis, grid, and curve styles.
+ *   • Export Functionality: Saves plots as an SVG file.
  *
- * Demo Usage:
- *   - Call plotQuadratic() to generate a quadratic plot.
- *   - Call plotSine() to generate a sine plot.
- *   - Call plotPolar() to generate a polar plot.
+ * Usage:
+ *   Run this script directly with Node.js:
+ *     $ node src/lib/main.js
+ *   It will generate an SVG file named 'output.svg' with the demos.
  *
  * Future Enhancements:
- *   - Extend support for 3D equation plotting and dynamic visualizations.
- *   - Develop a comprehensive API for transforming and customizing functions.
- *   - Provide a canvas fallback option for non-SVG environments.
- *
- * Usage:
- *   Run this script directly to generate an SVG file (output.svg) containing the demos.
+ *   - Support for parametric and dynamic 3D plotting.
+ *   - Extended API for customization.
+ *   - Canvas fallback for non-SVG environments.
  */
 
 import { fileURLToPath } from 'url';

commit 69f7f36c68a7f29291bf7d716cf0a92843b6a2d4
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:53:05 2025 +0000

    Added polar plot functionality and updated SVG output to include a new polar plot section. https://github.com/xn-intenton-z2a/repository0/issues/11 (#12)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a7c3fe6..98af598 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -17,6 +17,7 @@
  * Demo Usage:
  *   - Call plotQuadratic() to generate a quadratic plot.
  *   - Call plotSine() to generate a sine plot.
+ *   - Call plotPolar() to generate a polar plot.
  *
  * Future Enhancements:
  *   - Extend support for 3D equation plotting and dynamic visualizations.
@@ -49,14 +50,29 @@ function plotSine() {
   return points;
 }
 
+function plotPolar() {
+  // Generate points for a polar function: r = 200 * |sin(2θ)|
+  // and convert them to Cartesian coordinates
+  const points = [];
+  for (let deg = 0; deg <= 360; deg += 5) {
+    const rad = deg * (Math.PI / 180);
+    const r = 200 * Math.abs(Math.sin(2 * rad));
+    // Convert polar to Cartesian coordinates
+    const x = r * Math.cos(rad);
+    const y = r * Math.sin(rad);
+    points.push({ x, y });
+  }
+  return points;
+}
+
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
-function generateSvg(quadraticPoints, sinePoints) {
+function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
-  const height = 600;
+  const height = 800; // increased height to accommodate polar plot
 
   // Mapping quadratic points from coordinate space to SVG space
   const quadPts = quadraticPoints.map(p => {
@@ -72,13 +88,25 @@ function generateSvg(quadraticPoints, sinePoints) {
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
+  // Mapping polar points from Cartesian space (centered at 0,0) to SVG space
+  // We will center the polar plot in its section with center at (width/2, 700)
+  const centerX = width / 2;
+  const centerY = 700;
+  const polarPts = polarPoints.map(p => {
+    const px = centerX + p.x;
+    const py = centerY - p.y; // invert y-axis
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(' ');
+
   return `<?xml version="1.0" encoding="UTF-8"?>\n` +
          `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
          `  <rect width="100%" height="100%" fill="white" />\n` +
          `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = x²</text>\n` +
          `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
          `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = sin(x)</text>\n` +
-         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n` +
+         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n` +
+         `  <text x="${width / 2}" y="670" font-size="16" text-anchor="middle">Polar Plot: r = 200 * |sin(2θ)|</text>\n` +
+         `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n` +
          `</svg>`;
 }
 
@@ -86,7 +114,8 @@ function generateSvg(quadraticPoints, sinePoints) {
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const quadratic = plotQuadratic();
   const sine = plotSine();
-  const svgContent = generateSvg(quadratic, sine);
+  const polar = plotPolar();
+  const svgContent = generateSvg(quadratic, sine, polar);
 
   // Write the SVG content to a file
   fs.writeFileSync('output.svg', svgContent, 'utf8');

commit 5520117e5301fdcaafbfe8bb7fa711b206fcf857
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:32:37 2025 +0000

    Tidy up code formatting and improve documentationcomments in the main library script. https://github.com/xn-intenton-z2a/repository0/issues/9 (#10)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 751c633..a7c3fe6 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,7 +7,7 @@
  *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
  * Features:
- *   - Plot standard mathematical functions such as quadratic (y = x^2) and sine (y = sin(x), with x in degrees).
+ *   - Plot standard mathematical functions such as quadratic (y = x²) and sine (y = sin(x), with x in degrees).
  *   - Support for parametric and polar equations.
  *   - Interactive features including zooming, panning, and customizable scaling.
  *   - Custom styling options for axes, grids, and plotted curves.
@@ -27,11 +27,11 @@
  *   Run this script directly to generate an SVG file (output.svg) containing the demos.
  */
 
-import { fileURLToPath } from "url";
-import fs from "fs";
+import { fileURLToPath } from 'url';
+import fs from 'fs';
 
 function plotQuadratic() {
-  // Demo with a quadratic function: y = x^2
+  // Generate points for a quadratic function: y = x²
   const points = [];
   for (let x = -10; x <= 10; x++) {
     points.push({ x, y: x * x });
@@ -40,39 +40,37 @@ function plotQuadratic() {
 }
 
 function plotSine() {
-  // Demo with sine function: y = sin(x) (x in degrees)
+  // Generate points for sine function: y = sin(x), where x is in degrees
   const points = [];
-  for (let i = 0; i <= 360; i += 10) {
-    const rad = i * (Math.PI / 180);
-    points.push({ x: i, y: Math.sin(rad) });
+  for (let deg = 0; deg <= 360; deg += 10) {
+    const rad = deg * (Math.PI / 180);
+    points.push({ x: deg, y: Math.sin(rad) });
   }
   return points;
 }
 
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
-  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
+  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
 function generateSvg(quadraticPoints, sinePoints) {
   const width = 800;
   const height = 600;
-  
-  // Generate polyline for quadratic plot:
-  // Map x from [-10, 10] to [50, 750] and y from [0,100] to [250, 50] (inverted y-axis)
+
+  // Mapping quadratic points from coordinate space to SVG space
   const quadPts = quadraticPoints.map(p => {
-    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // scale factor 35
-    const py = 50 + (100 - p.y) * (200 / 100); // scale factor 2
+    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // mapping x from [-10,10] to [50,750]
+    const py = 50 + (100 - p.y) * (200 / 100); // mapping y from [0,100] to [250,50] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(" ");
+  }).join(' ');
 
-  // Generate polyline for sine plot:
-  // Map x from [0, 360] to [50, 750] and y from [-1, 1] to [550, 350] (inverted y-axis)
+  // Mapping sine points from coordinate space to SVG space
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360);
-    const py = 350 + (1 - p.y) * (200 / 2); // scale factor 100
+    const px = 50 + p.x * ((750 - 50) / 360); // mapping x from [0,360] to [50,750]
+    const py = 350 + (1 - p.y) * (200 / 2); // mapping y from [-1,1] to [550,350] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(" ");
+  }).join(' ');
 
   return `<?xml version="1.0" encoding="UTF-8"?>\n` +
          `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
@@ -84,16 +82,13 @@ function generateSvg(quadraticPoints, sinePoints) {
          `</svg>`;
 }
 
-// -----------------------------------------------------------------------------
-// Run main if executed directly.
-// -----------------------------------------------------------------------------
-
+// Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const quadratic = plotQuadratic();
   const sine = plotSine();
   const svgContent = generateSvg(quadratic, sine);
 
   // Write the SVG content to a file
-  fs.writeFileSync("output.svg", svgContent, "utf8");
-  console.log("SVG file generated: output.svg");
+  fs.writeFileSync('output.svg', svgContent, 'utf8');
+  console.log('SVG file generated: output.svg');
 }

commit 61f594fb06d24f7035ae0e6992679cf7e32950ab
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:15:29 2025 +0000

    Refresh README style comment block at the top of the file. https://github.com/xn-intenton-z2a/repository0/issues/7 (#8)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a0ee4b2..751c633 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,28 +1,30 @@
 #!/usr/bin/env node
 // src/lib/main.js
 /**
- * # Equation Plotter Library (SVG)
+ * Equation Plotter Library (SVG)
  *
- * A lightweight library for plotting mathematical equations in SVG format.
+ * Description:
+ *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
- * ## Features
- * - Plotting of standard mathematical functions (linear, quadratic, trigonometric, exponential).
- * - Support for parametric and polar equations.
- * - Interactive features such as zooming, panning, and custom scaling.
- * - Customizable styling for axes, grid, and plotted curves.
- * - Export functionality for saving plots as SVG files.
- * - Integration with libraries like D3.js for advanced data visualization.
+ * Features:
+ *   - Plot standard mathematical functions such as quadratic (y = x^2) and sine (y = sin(x), with x in degrees).
+ *   - Support for parametric and polar equations.
+ *   - Interactive features including zooming, panning, and customizable scaling.
+ *   - Custom styling options for axes, grids, and plotted curves.
+ *   - Export functionality for saving plots as SVG files.
+ *   - Future integration with libraries like D3.js for advanced data visualization.
  *
- * ## Demo Usage
- * - Plotting a quadratic function: y = x^2.
- * - Plotting a sine function: y = sin(x) (with x in degrees).
+ * Demo Usage:
+ *   - Call plotQuadratic() to generate a quadratic plot.
+ *   - Call plotSine() to generate a sine plot.
  *
- * ## Future Development
- * - Extend support for 3D equation plotting.
- * - Introduce animation for dynamic visualizations.
- * - Provide an API for transforming and customizing user-defined functions.
- * - Offer a canvas fallback option for environments without SVG support.
- * - Optimize performance for large datasets.
+ * Future Enhancements:
+ *   - Extend support for 3D equation plotting and dynamic visualizations.
+ *   - Develop a comprehensive API for transforming and customizing functions.
+ *   - Provide a canvas fallback option for non-SVG environments.
+ *
+ * Usage:
+ *   Run this script directly to generate an SVG file (output.svg) containing the demos.
  */
 
 import { fileURLToPath } from "url";

commit c3fffad4ed7a7cd00b1a3436a88df71a22cf9087
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:56:16 2025 +0000

    Updated demo run to generate an SVG file instead of console output. https://github.com/xn-intenton-z2a/repository0/issues/5 (#6)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9b542ac..a0ee4b2 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -26,6 +26,7 @@
  */
 
 import { fileURLToPath } from "url";
+import fs from "fs";
 
 function plotQuadratic() {
   // Demo with a quadratic function: y = x^2
@@ -51,14 +52,46 @@ function displayPlot(plotName, points) {
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
 }
 
+function generateSvg(quadraticPoints, sinePoints) {
+  const width = 800;
+  const height = 600;
+  
+  // Generate polyline for quadratic plot:
+  // Map x from [-10, 10] to [50, 750] and y from [0,100] to [250, 50] (inverted y-axis)
+  const quadPts = quadraticPoints.map(p => {
+    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // scale factor 35
+    const py = 50 + (100 - p.y) * (200 / 100); // scale factor 2
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(" ");
+
+  // Generate polyline for sine plot:
+  // Map x from [0, 360] to [50, 750] and y from [-1, 1] to [550, 350] (inverted y-axis)
+  const sinePts = sinePoints.map(p => {
+    const px = 50 + p.x * ((750 - 50) / 360);
+    const py = 350 + (1 - p.y) * (200 / 2); // scale factor 100
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(" ");
+
+  return `<?xml version="1.0" encoding="UTF-8"?>\n` +
+         `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
+         `  <rect width="100%" height="100%" fill="white" />\n` +
+         `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = x²</text>\n` +
+         `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
+         `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = sin(x)</text>\n` +
+         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n` +
+         `</svg>`;
+}
+
 // -----------------------------------------------------------------------------
 // Run main if executed directly.
 // -----------------------------------------------------------------------------
 
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
-  const args = process.argv.slice(2);
-  console.log(`Run with: ${JSON.stringify(args)}`);
-  // Run demo plots
-  displayPlot("Quadratic (y = x^2)", plotQuadratic());
-  displayPlot("Sine (y = sin(x))", plotSine());
+  const quadratic = plotQuadratic();
+  const sine = plotSine();
+  const svgContent = generateSvg(quadratic, sine);
+
+  // Write the SVG content to a file
+  fs.writeFileSync("output.svg", svgContent, "utf8");
+  console.log("SVG file generated: output.svg");
 }

commit 1b6d442e969b9df6d0cc413502ce0fa112695fdf
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:52:27 2025 +0000

    Updated README style comment block in the file header. https://github.com/xn-intenton-z2a/repository0/issues/3 (#4)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 47a8e4f..9b542ac 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,27 +1,29 @@
 #!/usr/bin/env node
 // src/lib/main.js
-/*
-  Equation Plotter Library (in SVG)
-
-  Features:
-    - Plotting of standard mathematical functions (e.g., linear, quadratic, trigonometric, exponential).
-    - Support for parametric and polar equations.
-    - Interactive features such as zooming, panning, and custom scaling.
-    - Customizable styling for axes, grid, and plotted curves.
-    - Export functionality for saving plots as SVG files.
-    - Integration with popular libraries (like D3.js) for extended data visualization capabilities.
-
-  Demo usage in main:
-    - Plotting a simple quadratic function: y = x^2.
-    - Plotting a sine function: y = sin(x).
-
-  Future Development Ideas:
-    - Extend support for 3D equation plotting.
-    - Introduce animation for dynamic data visualization.
-    - Provide an API for transforming and customizing user-defined functions.
-    - Offer a canvas fallback option for environments without SVG support.
-    - Optimize performance for plotting large datasets.
-*/
+/**
+ * # Equation Plotter Library (SVG)
+ *
+ * A lightweight library for plotting mathematical equations in SVG format.
+ *
+ * ## Features
+ * - Plotting of standard mathematical functions (linear, quadratic, trigonometric, exponential).
+ * - Support for parametric and polar equations.
+ * - Interactive features such as zooming, panning, and custom scaling.
+ * - Customizable styling for axes, grid, and plotted curves.
+ * - Export functionality for saving plots as SVG files.
+ * - Integration with libraries like D3.js for advanced data visualization.
+ *
+ * ## Demo Usage
+ * - Plotting a quadratic function: y = x^2.
+ * - Plotting a sine function: y = sin(x) (with x in degrees).
+ *
+ * ## Future Development
+ * - Extend support for 3D equation plotting.
+ * - Introduce animation for dynamic visualizations.
+ * - Provide an API for transforming and customizing user-defined functions.
+ * - Offer a canvas fallback option for environments without SVG support.
+ * - Optimize performance for large datasets.
+ */
 
 import { fileURLToPath } from "url";
 

commit b0bb405799fb30bbd3e35ac90a2c8221ceea6840
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:24:54 2025 +0000

    Added SVG equation plotting features and demo implementations for quadratic and sine functions. https://github.com/xn-intenton-z2a/repository0/issues/1 (#2)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9b56664..47a8e4f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,8 +1,54 @@
 #!/usr/bin/env node
 // src/lib/main.js
+/*
+  Equation Plotter Library (in SVG)
+
+  Features:
+    - Plotting of standard mathematical functions (e.g., linear, quadratic, trigonometric, exponential).
+    - Support for parametric and polar equations.
+    - Interactive features such as zooming, panning, and custom scaling.
+    - Customizable styling for axes, grid, and plotted curves.
+    - Export functionality for saving plots as SVG files.
+    - Integration with popular libraries (like D3.js) for extended data visualization capabilities.
+
+  Demo usage in main:
+    - Plotting a simple quadratic function: y = x^2.
+    - Plotting a sine function: y = sin(x).
+
+  Future Development Ideas:
+    - Extend support for 3D equation plotting.
+    - Introduce animation for dynamic data visualization.
+    - Provide an API for transforming and customizing user-defined functions.
+    - Offer a canvas fallback option for environments without SVG support.
+    - Optimize performance for plotting large datasets.
+*/
 
 import { fileURLToPath } from "url";
 
+function plotQuadratic() {
+  // Demo with a quadratic function: y = x^2
+  const points = [];
+  for (let x = -10; x <= 10; x++) {
+    points.push({ x, y: x * x });
+  }
+  return points;
+}
+
+function plotSine() {
+  // Demo with sine function: y = sin(x) (x in degrees)
+  const points = [];
+  for (let i = 0; i <= 360; i += 10) {
+    const rad = i * (Math.PI / 180);
+    points.push({ x: i, y: Math.sin(rad) });
+  }
+  return points;
+}
+
+function displayPlot(plotName, points) {
+  console.log(`Plot for ${plotName}:`);
+  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
+}
+
 // -----------------------------------------------------------------------------
 // Run main if executed directly.
 // -----------------------------------------------------------------------------
@@ -10,4 +56,7 @@ import { fileURLToPath } from "url";
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const args = process.argv.slice(2);
   console.log(`Run with: ${JSON.stringify(args)}`);
+  // Run demo plots
+  displayPlot("Quadratic (y = x^2)", plotQuadratic());
+  displayPlot("Sine (y = sin(x))", plotSine());
 }

commit 603a42d24d7b82a482d73157804f35c9aac8ce3e
Author: Antony at Polycode <antony@polycode.co.uk>
Date:   Sat Feb 15 17:59:09 2025 +0000

    Add package-lock.json to manage dependencies
    
    This commit introduces `package-lock.json`, which ensures consistent dependency versions across environments. It includes a comprehensive list of dependencies and devDependencies for the project. This file is automatically generated by npm and helps maintain reproducible builds.

diff --git a/src/lib/main.js b/src/lib/main.js
new file mode 100755
index 0000000..9b56664
--- /dev/null
+++ b/src/lib/main.js
@@ -0,0 +1,13 @@
+#!/usr/bin/env node
+// src/lib/main.js
+
+import { fileURLToPath } from "url";
+
+// -----------------------------------------------------------------------------
+// Run main if executed directly.
+// -----------------------------------------------------------------------------
+
+if (process.argv[1] === fileURLToPath(import.meta.url)) {
+  const args = process.argv.slice(2);
+  console.log(`Run with: ${JSON.stringify(args)}`);
+}
