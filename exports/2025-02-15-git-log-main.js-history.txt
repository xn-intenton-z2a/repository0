commit 8bb3ba338b7b93cd19da4f302c5d6baadd670db7
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:52:35 2025 +0000

    Added optional output file name argument and error handling when writing the SVG file. https://github.com/xn-intenton-z2a/repository0/issues/17 (#18)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 123bdf2..c6c77f9 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -17,8 +17,8 @@
  *
  * Usage:
  *   Run this script with Node.js:
- *     $ node src/lib/main.js
- *   It will generate an SVG file named "output.svg" in the working directory.
+ *     $ node src/lib/main.js [outputFileName]
+ *   It will generate an SVG file, defaulting to "output.svg" if no output file name is provided.
  *
  * Future Enhancements:
  *   - Support for parametric and dynamic 3D plotting.
@@ -112,12 +112,17 @@ function generateSvg(quadraticPoints, sinePoints, polarPoints) {
 
 // Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
+  const outputFileName = process.argv[2] || 'output.svg';
   const quadratic = plotQuadratic();
   const sine = plotSine();
   const polar = plotPolar();
   const svgContent = generateSvg(quadratic, sine, polar);
 
-  // Write the SVG content to a file
-  fs.writeFileSync('output.svg', svgContent, 'utf8');
-  console.log('SVG file generated: output.svg');
+  try {
+    fs.writeFileSync(outputFileName, svgContent, 'utf8');
+    console.log(`SVG file generated: ${outputFileName}`);
+  } catch (err) {
+    console.error('Error writing SVG file:', err.message);
+    process.exit(1);
+  }
 }

commit a78380d8137d3df64d3d692958759696206289eb
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:32:30 2025 +0000

    Updated header comment block to a refreshed README style comment. https://github.com/xn-intenton-z2a/repository0/issues/15 (#16)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index fdfdc61..123bdf2 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -2,26 +2,30 @@
 /**
  * Equation Plotter Library (SVG)
  *
+ * README
+ *
  * Overview:
- *   A lightweight library for plotting mathematical equations as SVG graphics.
+ *   Equation Plotter is a lightweight library that generates SVG graphics for various mathematical equations.
  *
  * Features:
- *   • Quadratic Plot: Generates data points for y = x².
- *   • Sine Plot: Generates data points for y = sin(x) where x is in degrees.
- *   • Polar Plot: Generates and converts polar function data for plotting.
- *   • Interactive Support: Designed for zooming, panning, and custom scaling.
- *   • Custom Styling: Adjust axis, grid, and curve styles.
- *   • Export Functionality: Saves plots as an SVG file.
+ *   - Quadratic Plot: Generates data points for y = x².
+ *   - Sine Plot: Generates data points for y = sin(x) where x is in degrees.
+ *   - Polar Plot: Generates and converts polar function data for plotting.
+ *   - Interactive: Supports zooming, panning, and custom scaling.
+ *   - Custom Styling: Allows customization of axis, grid, and curve appearances.
+ *   - Export: Outputs the generated plot as an SVG file.
  *
  * Usage:
- *   Run this script directly with Node.js:
+ *   Run this script with Node.js:
  *     $ node src/lib/main.js
- *   It will generate an SVG file named 'output.svg' with the demos.
+ *   It will generate an SVG file named "output.svg" in the working directory.
  *
  * Future Enhancements:
  *   - Support for parametric and dynamic 3D plotting.
- *   - Extended API for customization.
- *   - Canvas fallback for non-SVG environments.
+ *   - Extended API for further customization.
+ *   - Canvas fallback for environments that do not support SVG.
+ *
+ * License: MIT
  */
 
 import { fileURLToPath } from 'url';

commit 013506f8a537bd69b704294cca842fa0e5c12199
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 20:16:10 2025 +0000

    Updated README style comment block at the top of the file. https://github.com/xn-intenton-z2a/repository0/issues/13 (#14)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 98af598..fdfdc61 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,31 +1,27 @@
 #!/usr/bin/env node
-// src/lib/main.js
 /**
  * Equation Plotter Library (SVG)
  *
- * Description:
+ * Overview:
  *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
  * Features:
- *   - Plot standard mathematical functions such as quadratic (y = x²) and sine (y = sin(x), with x in degrees).
- *   - Support for parametric and polar equations.
- *   - Interactive features including zooming, panning, and customizable scaling.
- *   - Custom styling options for axes, grids, and plotted curves.
- *   - Export functionality for saving plots as SVG files.
- *   - Future integration with libraries like D3.js for advanced data visualization.
+ *   • Quadratic Plot: Generates data points for y = x².
+ *   • Sine Plot: Generates data points for y = sin(x) where x is in degrees.
+ *   • Polar Plot: Generates and converts polar function data for plotting.
+ *   • Interactive Support: Designed for zooming, panning, and custom scaling.
+ *   • Custom Styling: Adjust axis, grid, and curve styles.
+ *   • Export Functionality: Saves plots as an SVG file.
  *
- * Demo Usage:
- *   - Call plotQuadratic() to generate a quadratic plot.
- *   - Call plotSine() to generate a sine plot.
- *   - Call plotPolar() to generate a polar plot.
+ * Usage:
+ *   Run this script directly with Node.js:
+ *     $ node src/lib/main.js
+ *   It will generate an SVG file named 'output.svg' with the demos.
  *
  * Future Enhancements:
- *   - Extend support for 3D equation plotting and dynamic visualizations.
- *   - Develop a comprehensive API for transforming and customizing functions.
- *   - Provide a canvas fallback option for non-SVG environments.
- *
- * Usage:
- *   Run this script directly to generate an SVG file (output.svg) containing the demos.
+ *   - Support for parametric and dynamic 3D plotting.
+ *   - Extended API for customization.
+ *   - Canvas fallback for non-SVG environments.
  */
 
 import { fileURLToPath } from 'url';

commit 69f7f36c68a7f29291bf7d716cf0a92843b6a2d4
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:53:05 2025 +0000

    Added polar plot functionality and updated SVG output to include a new polar plot section. https://github.com/xn-intenton-z2a/repository0/issues/11 (#12)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a7c3fe6..98af598 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -17,6 +17,7 @@
  * Demo Usage:
  *   - Call plotQuadratic() to generate a quadratic plot.
  *   - Call plotSine() to generate a sine plot.
+ *   - Call plotPolar() to generate a polar plot.
  *
  * Future Enhancements:
  *   - Extend support for 3D equation plotting and dynamic visualizations.
@@ -49,14 +50,29 @@ function plotSine() {
   return points;
 }
 
+function plotPolar() {
+  // Generate points for a polar function: r = 200 * |sin(2θ)|
+  // and convert them to Cartesian coordinates
+  const points = [];
+  for (let deg = 0; deg <= 360; deg += 5) {
+    const rad = deg * (Math.PI / 180);
+    const r = 200 * Math.abs(Math.sin(2 * rad));
+    // Convert polar to Cartesian coordinates
+    const x = r * Math.cos(rad);
+    const y = r * Math.sin(rad);
+    points.push({ x, y });
+  }
+  return points;
+}
+
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
-function generateSvg(quadraticPoints, sinePoints) {
+function generateSvg(quadraticPoints, sinePoints, polarPoints) {
   const width = 800;
-  const height = 600;
+  const height = 800; // increased height to accommodate polar plot
 
   // Mapping quadratic points from coordinate space to SVG space
   const quadPts = quadraticPoints.map(p => {
@@ -72,13 +88,25 @@ function generateSvg(quadraticPoints, sinePoints) {
     return `${px.toFixed(2)},${py.toFixed(2)}`;
   }).join(' ');
 
+  // Mapping polar points from Cartesian space (centered at 0,0) to SVG space
+  // We will center the polar plot in its section with center at (width/2, 700)
+  const centerX = width / 2;
+  const centerY = 700;
+  const polarPts = polarPoints.map(p => {
+    const px = centerX + p.x;
+    const py = centerY - p.y; // invert y-axis
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(' ');
+
   return `<?xml version="1.0" encoding="UTF-8"?>\n` +
          `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
          `  <rect width="100%" height="100%" fill="white" />\n` +
          `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = x²</text>\n` +
          `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
          `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = sin(x)</text>\n` +
-         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n` +
+         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n\n` +
+         `  <text x="${width / 2}" y="670" font-size="16" text-anchor="middle">Polar Plot: r = 200 * |sin(2θ)|</text>\n` +
+         `  <polyline points="${polarPts}" fill="none" stroke="green" stroke-width="2" />\n` +
          `</svg>`;
 }
 
@@ -86,7 +114,8 @@ function generateSvg(quadraticPoints, sinePoints) {
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const quadratic = plotQuadratic();
   const sine = plotSine();
-  const svgContent = generateSvg(quadratic, sine);
+  const polar = plotPolar();
+  const svgContent = generateSvg(quadratic, sine, polar);
 
   // Write the SVG content to a file
   fs.writeFileSync('output.svg', svgContent, 'utf8');

commit 5520117e5301fdcaafbfe8bb7fa711b206fcf857
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:32:37 2025 +0000

    Tidy up code formatting and improve documentationcomments in the main library script. https://github.com/xn-intenton-z2a/repository0/issues/9 (#10)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 751c633..a7c3fe6 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,7 +7,7 @@
  *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
  * Features:
- *   - Plot standard mathematical functions such as quadratic (y = x^2) and sine (y = sin(x), with x in degrees).
+ *   - Plot standard mathematical functions such as quadratic (y = x²) and sine (y = sin(x), with x in degrees).
  *   - Support for parametric and polar equations.
  *   - Interactive features including zooming, panning, and customizable scaling.
  *   - Custom styling options for axes, grids, and plotted curves.
@@ -27,11 +27,11 @@
  *   Run this script directly to generate an SVG file (output.svg) containing the demos.
  */
 
-import { fileURLToPath } from "url";
-import fs from "fs";
+import { fileURLToPath } from 'url';
+import fs from 'fs';
 
 function plotQuadratic() {
-  // Demo with a quadratic function: y = x^2
+  // Generate points for a quadratic function: y = x²
   const points = [];
   for (let x = -10; x <= 10; x++) {
     points.push({ x, y: x * x });
@@ -40,39 +40,37 @@ function plotQuadratic() {
 }
 
 function plotSine() {
-  // Demo with sine function: y = sin(x) (x in degrees)
+  // Generate points for sine function: y = sin(x), where x is in degrees
   const points = [];
-  for (let i = 0; i <= 360; i += 10) {
-    const rad = i * (Math.PI / 180);
-    points.push({ x: i, y: Math.sin(rad) });
+  for (let deg = 0; deg <= 360; deg += 10) {
+    const rad = deg * (Math.PI / 180);
+    points.push({ x: deg, y: Math.sin(rad) });
   }
   return points;
 }
 
 function displayPlot(plotName, points) {
   console.log(`Plot for ${plotName}:`);
-  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
+  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(' '));
 }
 
 function generateSvg(quadraticPoints, sinePoints) {
   const width = 800;
   const height = 600;
-  
-  // Generate polyline for quadratic plot:
-  // Map x from [-10, 10] to [50, 750] and y from [0,100] to [250, 50] (inverted y-axis)
+
+  // Mapping quadratic points from coordinate space to SVG space
   const quadPts = quadraticPoints.map(p => {
-    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // scale factor 35
-    const py = 50 + (100 - p.y) * (200 / 100); // scale factor 2
+    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // mapping x from [-10,10] to [50,750]
+    const py = 50 + (100 - p.y) * (200 / 100); // mapping y from [0,100] to [250,50] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(" ");
+  }).join(' ');
 
-  // Generate polyline for sine plot:
-  // Map x from [0, 360] to [50, 750] and y from [-1, 1] to [550, 350] (inverted y-axis)
+  // Mapping sine points from coordinate space to SVG space
   const sinePts = sinePoints.map(p => {
-    const px = 50 + p.x * ((750 - 50) / 360);
-    const py = 350 + (1 - p.y) * (200 / 2); // scale factor 100
+    const px = 50 + p.x * ((750 - 50) / 360); // mapping x from [0,360] to [50,750]
+    const py = 350 + (1 - p.y) * (200 / 2); // mapping y from [-1,1] to [550,350] (inverted y-axis)
     return `${px.toFixed(2)},${py.toFixed(2)}`;
-  }).join(" ");
+  }).join(' ');
 
   return `<?xml version="1.0" encoding="UTF-8"?>\n` +
          `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
@@ -84,16 +82,13 @@ function generateSvg(quadraticPoints, sinePoints) {
          `</svg>`;
 }
 
-// -----------------------------------------------------------------------------
-// Run main if executed directly.
-// -----------------------------------------------------------------------------
-
+// Run main if executed directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const quadratic = plotQuadratic();
   const sine = plotSine();
   const svgContent = generateSvg(quadratic, sine);
 
   // Write the SVG content to a file
-  fs.writeFileSync("output.svg", svgContent, "utf8");
-  console.log("SVG file generated: output.svg");
+  fs.writeFileSync('output.svg', svgContent, 'utf8');
+  console.log('SVG file generated: output.svg');
 }

commit 61f594fb06d24f7035ae0e6992679cf7e32950ab
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 19:15:29 2025 +0000

    Refresh README style comment block at the top of the file. https://github.com/xn-intenton-z2a/repository0/issues/7 (#8)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a0ee4b2..751c633 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,28 +1,30 @@
 #!/usr/bin/env node
 // src/lib/main.js
 /**
- * # Equation Plotter Library (SVG)
+ * Equation Plotter Library (SVG)
  *
- * A lightweight library for plotting mathematical equations in SVG format.
+ * Description:
+ *   A lightweight library for plotting mathematical equations as SVG graphics.
  *
- * ## Features
- * - Plotting of standard mathematical functions (linear, quadratic, trigonometric, exponential).
- * - Support for parametric and polar equations.
- * - Interactive features such as zooming, panning, and custom scaling.
- * - Customizable styling for axes, grid, and plotted curves.
- * - Export functionality for saving plots as SVG files.
- * - Integration with libraries like D3.js for advanced data visualization.
+ * Features:
+ *   - Plot standard mathematical functions such as quadratic (y = x^2) and sine (y = sin(x), with x in degrees).
+ *   - Support for parametric and polar equations.
+ *   - Interactive features including zooming, panning, and customizable scaling.
+ *   - Custom styling options for axes, grids, and plotted curves.
+ *   - Export functionality for saving plots as SVG files.
+ *   - Future integration with libraries like D3.js for advanced data visualization.
  *
- * ## Demo Usage
- * - Plotting a quadratic function: y = x^2.
- * - Plotting a sine function: y = sin(x) (with x in degrees).
+ * Demo Usage:
+ *   - Call plotQuadratic() to generate a quadratic plot.
+ *   - Call plotSine() to generate a sine plot.
  *
- * ## Future Development
- * - Extend support for 3D equation plotting.
- * - Introduce animation for dynamic visualizations.
- * - Provide an API for transforming and customizing user-defined functions.
- * - Offer a canvas fallback option for environments without SVG support.
- * - Optimize performance for large datasets.
+ * Future Enhancements:
+ *   - Extend support for 3D equation plotting and dynamic visualizations.
+ *   - Develop a comprehensive API for transforming and customizing functions.
+ *   - Provide a canvas fallback option for non-SVG environments.
+ *
+ * Usage:
+ *   Run this script directly to generate an SVG file (output.svg) containing the demos.
  */
 
 import { fileURLToPath } from "url";

commit c3fffad4ed7a7cd00b1a3436a88df71a22cf9087
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:56:16 2025 +0000

    Updated demo run to generate an SVG file instead of console output. https://github.com/xn-intenton-z2a/repository0/issues/5 (#6)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9b542ac..a0ee4b2 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -26,6 +26,7 @@
  */
 
 import { fileURLToPath } from "url";
+import fs from "fs";
 
 function plotQuadratic() {
   // Demo with a quadratic function: y = x^2
@@ -51,14 +52,46 @@ function displayPlot(plotName, points) {
   console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
 }
 
+function generateSvg(quadraticPoints, sinePoints) {
+  const width = 800;
+  const height = 600;
+  
+  // Generate polyline for quadratic plot:
+  // Map x from [-10, 10] to [50, 750] and y from [0,100] to [250, 50] (inverted y-axis)
+  const quadPts = quadraticPoints.map(p => {
+    const px = 50 + (p.x + 10) * ((750 - 50) / 20); // scale factor 35
+    const py = 50 + (100 - p.y) * (200 / 100); // scale factor 2
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(" ");
+
+  // Generate polyline for sine plot:
+  // Map x from [0, 360] to [50, 750] and y from [-1, 1] to [550, 350] (inverted y-axis)
+  const sinePts = sinePoints.map(p => {
+    const px = 50 + p.x * ((750 - 50) / 360);
+    const py = 350 + (1 - p.y) * (200 / 2); // scale factor 100
+    return `${px.toFixed(2)},${py.toFixed(2)}`;
+  }).join(" ");
+
+  return `<?xml version="1.0" encoding="UTF-8"?>\n` +
+         `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">\n` +
+         `  <rect width="100%" height="100%" fill="white" />\n` +
+         `  <text x="${width / 2}" y="30" font-size="16" text-anchor="middle">Quadratic Plot: y = x²</text>\n` +
+         `  <polyline points="${quadPts}" fill="none" stroke="blue" stroke-width="2" />\n\n` +
+         `  <text x="${width / 2}" y="330" font-size="16" text-anchor="middle">Sine Plot: y = sin(x)</text>\n` +
+         `  <polyline points="${sinePts}" fill="none" stroke="red" stroke-width="2" />\n` +
+         `</svg>`;
+}
+
 // -----------------------------------------------------------------------------
 // Run main if executed directly.
 // -----------------------------------------------------------------------------
 
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
-  const args = process.argv.slice(2);
-  console.log(`Run with: ${JSON.stringify(args)}`);
-  // Run demo plots
-  displayPlot("Quadratic (y = x^2)", plotQuadratic());
-  displayPlot("Sine (y = sin(x))", plotSine());
+  const quadratic = plotQuadratic();
+  const sine = plotSine();
+  const svgContent = generateSvg(quadratic, sine);
+
+  // Write the SVG content to a file
+  fs.writeFileSync("output.svg", svgContent, "utf8");
+  console.log("SVG file generated: output.svg");
 }

commit 1b6d442e969b9df6d0cc413502ce0fa112695fdf
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:52:27 2025 +0000

    Updated README style comment block in the file header. https://github.com/xn-intenton-z2a/repository0/issues/3 (#4)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 47a8e4f..9b542ac 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,27 +1,29 @@
 #!/usr/bin/env node
 // src/lib/main.js
-/*
-  Equation Plotter Library (in SVG)
-
-  Features:
-    - Plotting of standard mathematical functions (e.g., linear, quadratic, trigonometric, exponential).
-    - Support for parametric and polar equations.
-    - Interactive features such as zooming, panning, and custom scaling.
-    - Customizable styling for axes, grid, and plotted curves.
-    - Export functionality for saving plots as SVG files.
-    - Integration with popular libraries (like D3.js) for extended data visualization capabilities.
-
-  Demo usage in main:
-    - Plotting a simple quadratic function: y = x^2.
-    - Plotting a sine function: y = sin(x).
-
-  Future Development Ideas:
-    - Extend support for 3D equation plotting.
-    - Introduce animation for dynamic data visualization.
-    - Provide an API for transforming and customizing user-defined functions.
-    - Offer a canvas fallback option for environments without SVG support.
-    - Optimize performance for plotting large datasets.
-*/
+/**
+ * # Equation Plotter Library (SVG)
+ *
+ * A lightweight library for plotting mathematical equations in SVG format.
+ *
+ * ## Features
+ * - Plotting of standard mathematical functions (linear, quadratic, trigonometric, exponential).
+ * - Support for parametric and polar equations.
+ * - Interactive features such as zooming, panning, and custom scaling.
+ * - Customizable styling for axes, grid, and plotted curves.
+ * - Export functionality for saving plots as SVG files.
+ * - Integration with libraries like D3.js for advanced data visualization.
+ *
+ * ## Demo Usage
+ * - Plotting a quadratic function: y = x^2.
+ * - Plotting a sine function: y = sin(x) (with x in degrees).
+ *
+ * ## Future Development
+ * - Extend support for 3D equation plotting.
+ * - Introduce animation for dynamic visualizations.
+ * - Provide an API for transforming and customizing user-defined functions.
+ * - Offer a canvas fallback option for environments without SVG support.
+ * - Optimize performance for large datasets.
+ */
 
 import { fileURLToPath } from "url";
 

commit b0bb405799fb30bbd3e35ac90a2c8221ceea6840
Author: Antony @ Polycode <112443706+Antony-at-Polycode@users.noreply.github.com>
Date:   Sat Feb 15 18:24:54 2025 +0000

    Added SVG equation plotting features and demo implementations for quadratic and sine functions. https://github.com/xn-intenton-z2a/repository0/issues/1 (#2)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9b56664..47a8e4f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,8 +1,54 @@
 #!/usr/bin/env node
 // src/lib/main.js
+/*
+  Equation Plotter Library (in SVG)
+
+  Features:
+    - Plotting of standard mathematical functions (e.g., linear, quadratic, trigonometric, exponential).
+    - Support for parametric and polar equations.
+    - Interactive features such as zooming, panning, and custom scaling.
+    - Customizable styling for axes, grid, and plotted curves.
+    - Export functionality for saving plots as SVG files.
+    - Integration with popular libraries (like D3.js) for extended data visualization capabilities.
+
+  Demo usage in main:
+    - Plotting a simple quadratic function: y = x^2.
+    - Plotting a sine function: y = sin(x).
+
+  Future Development Ideas:
+    - Extend support for 3D equation plotting.
+    - Introduce animation for dynamic data visualization.
+    - Provide an API for transforming and customizing user-defined functions.
+    - Offer a canvas fallback option for environments without SVG support.
+    - Optimize performance for plotting large datasets.
+*/
 
 import { fileURLToPath } from "url";
 
+function plotQuadratic() {
+  // Demo with a quadratic function: y = x^2
+  const points = [];
+  for (let x = -10; x <= 10; x++) {
+    points.push({ x, y: x * x });
+  }
+  return points;
+}
+
+function plotSine() {
+  // Demo with sine function: y = sin(x) (x in degrees)
+  const points = [];
+  for (let i = 0; i <= 360; i += 10) {
+    const rad = i * (Math.PI / 180);
+    points.push({ x: i, y: Math.sin(rad) });
+  }
+  return points;
+}
+
+function displayPlot(plotName, points) {
+  console.log(`Plot for ${plotName}:`);
+  console.log(points.map(p => `(${p.x.toFixed(2)}, ${p.y.toFixed(2)})`).join(" "));
+}
+
 // -----------------------------------------------------------------------------
 // Run main if executed directly.
 // -----------------------------------------------------------------------------
@@ -10,4 +56,7 @@ import { fileURLToPath } from "url";
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const args = process.argv.slice(2);
   console.log(`Run with: ${JSON.stringify(args)}`);
+  // Run demo plots
+  displayPlot("Quadratic (y = x^2)", plotQuadratic());
+  displayPlot("Sine (y = sin(x))", plotSine());
 }

commit 603a42d24d7b82a482d73157804f35c9aac8ce3e
Author: Antony at Polycode <antony@polycode.co.uk>
Date:   Sat Feb 15 17:59:09 2025 +0000

    Add package-lock.json to manage dependencies
    
    This commit introduces `package-lock.json`, which ensures consistent dependency versions across environments. It includes a comprehensive list of dependencies and devDependencies for the project. This file is automatically generated by npm and helps maintain reproducible builds.

diff --git a/src/lib/main.js b/src/lib/main.js
new file mode 100755
index 0000000..9b56664
--- /dev/null
+++ b/src/lib/main.js
@@ -0,0 +1,13 @@
+#!/usr/bin/env node
+// src/lib/main.js
+
+import { fileURLToPath } from "url";
+
+// -----------------------------------------------------------------------------
+// Run main if executed directly.
+// -----------------------------------------------------------------------------
+
+if (process.argv[1] === fileURLToPath(import.meta.url)) {
+  const args = process.argv.slice(2);
+  console.log(`Run with: ${JSON.stringify(args)}`);
+}
