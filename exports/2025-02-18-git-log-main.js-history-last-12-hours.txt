commit 72a43c1279fa1c84470d4e60b3784458225a45f1
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Tue Feb 18 00:33:52 2025 +0000

    Updated the README style comment block at the top with refreshed documentation. https://github.com/xn-intenton-z2a/repository0/issues/149 (#153)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 12cfd3f..fbc81d1 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -8,40 +8,33 @@
  * =============================================================================
  *
  * Overview:
- *   A lightweight library for generating plots of mathematical equations. It supports
- *   multiple plot types including quadratic, linear, sine, polar, exponential, and
- *   logarithmic graphs. The plots can be exported in SVG, HTML, JSON, CSV, ASCII, and
- *   plain text formats.
+ *   The Equation Plotter Library is a versatile tool for generating plots of
+ *   mathematical equations. It supports various plot types such as quadratic, linear,
+ *   sine, polar, exponential, and logarithmic graphs, and outputs them in multiple
+ *   formats including SVG, HTML, JSON, CSV, and ASCII.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both algebraic and
- *     prefixed input formats (e.g., "quad:" or "quadratic:").
- *   - Linear Plot: Generates data for y = m*x + b with support for both prefixed and
- *     standard algebraic formats (e.g., "linear:" or "y=2x+3").
- *   - Sine Plot: Plots y = A*sin(B*x + C) with customizable amplitude, frequency, and phase.
- *   - Polar Plot: Generates plots for r = scale * |sin(multiplier*θ)| implementing polar coordinates.
- *   - Exponential Plot: Works with formulas of the form y = a * e^(b*x) with optional algebraic
- *     parsing (e.g., "exp:" or "y=2*e^(0.5x)").
- *   - Logarithmic Plot: Plots y = a * log_b(x) with options for base specification (also supported
- *     via "ln:" for natural logarithm).
- *   - Export Options: Supports output as SVG, HTML embedding, JSON data for plots, CSV for tabular
- *     data, ASCII art for console viewing, and plain text summaries.
- *   - Customizable Visuals: Include grid overlays, axes, and a dealer's choice random color palette
- *     for unique styling.
+ *   - Generate plots for Quadratic (y = ax² + bx + c), Linear (y = m*x + b), Sine (y = A*sin(B*x + C)),
+ *     Polar (r = scale * |sin(multiplier * θ)|), Exponential (y = a * e^(b*x)), and
+ *     Logarithmic (y = a * log_b(x)) equations.
+ *   - Accepts both prefixed input strings (e.g., "quad:", "sine:", "polar:") and standard
+ *     algebraic forms (e.g., "y=2x+3", "x^2+y-1=0").
+ *   - Multiple output formats: SVG (scalable vector graphics), HTML, JSON, CSV, ASCII art, and plain text.
+ *   - Customizable plotting options including grid overlays and randomized color palettes.
  *
- * Usage Examples (CLI):
+ * Usage (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *
- * API Usage Example:
+ * API (Importing Functions):
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * Installation:
- *   Install via npm. Refer to package.json for full dependency details.
+ *   Install via npm. See package.json for version and dependency details.
  *
  * Version: 0.1.1-72
  * License: MIT

commit dae30f5a1efbf6d20acc47138054d753fde32e28
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Mon Feb 17 23:31:57 2025 +0000

    Refreshed the top-level README style comment block with updated documentation. https://github.com/xn-intenton-z2a/repository0/issues/151 (#152)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 838a4de..12cfd3f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -3,49 +3,50 @@
 "use strict";
 
 /**
+ * =============================================================================
  * Equation Plotter Library
+ * =============================================================================
  *
- * Description:
- *   A lightweight library for generating plots of mathematical equations with export options in SVG, JSON, CSV, HTML, ASCII, and text formats.
- *   It supports different mathematical functions including quadratic, sine, polar, linear, exponential, and logarithmic equations.
+ * Overview:
+ *   A lightweight library for generating plots of mathematical equations. It supports
+ *   multiple plot types including quadratic, linear, sine, polar, exponential, and
+ *   logarithmic graphs. The plots can be exported in SVG, HTML, JSON, CSV, ASCII, and
+ *   plain text formats.
  *
  * Features:
- *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both standard algebraic and prefixed formula strings. Also supports prefix alias 'quad:'
- *   - Sine Plot: Generates data for y = A*sin(B*x + C) with control over amplitude, frequency, phase, and x range.
- *   - Polar Plot: Generates data for r = scale * |sin(multiplier*θ)|, useful for polar function visualizations.
- *   - Linear Plot: Generates data for y = m*x + b with control over slope, intercept, and x range. Supports both prefixed and standard algebraic formats (e.g., "y=2x+3" or "y=2x+3:-10,10,1").
- *   - Exponential Plot: Generates data for y = a * e^(b*x) with control over coefficients and x range. Accepts formulas in the format "exponential:a,b,xMin,xMax,step" or shortened as "exp:".
- *   - Logarithmic Plot: Generates data for y = a*log_b(x) with control over coefficient, base, and x range. Accepts formulas in the format "log:a,base,xMin,xMax,step" or "ln:" (for natural logarithm with base e).
- *   - Export Options: Outputs plots as SVG for graphics, ASCII art for console visualization, plain text, JSON, CSV, or full HTML embedding the SVG.
- *   - Customization: Offers interactive features like zoom and pan, along with styling options for grid, axes, and curves.
- *   - Multiple Formulas per Plot Type: Supports multiple formulas for each plot type, each rendered with a distinct color.
- *   - Debug Option: Added a '--debug' flag to output the parsed internal representation of plots.
- *   - Grid Option: Added a '--grid' flag to overlay light grid lines on SVG plots for better visual reference.
- *   - Axes Display: When grid is enabled, axes lines are drawn to provide better plotting context.
- *   - Dealer's Choice Option: Added a '--dealers-choice' flag to apply a randomized color palette to SVG plots. (Dealer's Choice: each plot series gets its own random color)
+ *   - Quadratic Plot: Generates data for y = ax² + bx + c, supporting both algebraic and
+ *     prefixed input formats (e.g., "quad:" or "quadratic:").
+ *   - Linear Plot: Generates data for y = m*x + b with support for both prefixed and
+ *     standard algebraic formats (e.g., "linear:" or "y=2x+3").
+ *   - Sine Plot: Plots y = A*sin(B*x + C) with customizable amplitude, frequency, and phase.
+ *   - Polar Plot: Generates plots for r = scale * |sin(multiplier*θ)| implementing polar coordinates.
+ *   - Exponential Plot: Works with formulas of the form y = a * e^(b*x) with optional algebraic
+ *     parsing (e.g., "exp:" or "y=2*e^(0.5x)").
+ *   - Logarithmic Plot: Plots y = a * log_b(x) with options for base specification (also supported
+ *     via "ln:" for natural logarithm).
+ *   - Export Options: Supports output as SVG, HTML embedding, JSON data for plots, CSV for tabular
+ *     data, ASCII art for console viewing, and plain text summaries.
+ *   - Customizable Visuals: Include grid overlays, axes, and a dealer's choice random color palette
+ *     for unique styling.
  *
- * CLI Usage Examples:
+ * Usage Examples (CLI):
  *   $ node src/lib/main.js output.svg "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.json --json "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.csv --csv "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.html "x^2+y-1=0" "sine:1,1,0,0,360,10"
  *   $ node src/lib/main.js output.txt --ascii "x^2+y-1=0" "sine:1,1,0,0,360,10"
- *   $ node src/lib/main.js output.svg "linear:1,0,-10,10,1" "x^2+y-1=0" "sine:1,1,0,0,360,10" "polar:200,2,5"
- *   $ node src/lib/main.js output.svg "exp:1,0.1,-10,10,1" "quad:x^2+y-1=0"
- *   $ node src/lib/main.js output.svg "log:1,10,1,100,1" "quad:x^2+y-1=0"
  *
  * API Usage Example:
  *   import { plotToSvg, plotToJson, plotToCsv, plotToHtml } from './main.js';
  *   const svg = plotToSvg({ formulas: ["x^2+y-1=0", "sine:1,1,0,0,360,10"] });
  *
  * Installation:
- *   Install via npm with the required dependencies. See package.json for more details.
+ *   Install via npm. Refer to package.json for full dependency details.
  *
+ * Version: 0.1.1-72
  * License: MIT
  *
- * Updated:
- *   Version flag updated to 0.1.1-72 and documentation improved per issue-123 and issue-126. Generic quadratic and exponential parsing functions are now exported for extended usage.
- *   Added dealer's choice option to randomize SVG color palettes per '--dealers-choice' flag.
+ * =============================================================================
  */
 
 import { fileURLToPath } from "url";

commit 800a8cc9ea38461ffd199ed6c13162329bcd9fc2
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Mon Feb 17 23:15:13 2025 +0000

    Fixed dealers choice by generating unique random colors for each plot series. https://github.com/xn-intenton-z2a/repository0/issues/147 (#148)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 4f8151b..838a4de 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -147,7 +147,7 @@ function plotLogarithmic() {
 // ----------------------------------
 
 function parseQuadratic(formulaStr) {
-  const parts = formulaStr.split(":" );
+  const parts = formulaStr.split(":");
   if (parts.length < 2) throw new Error("Invalid quadratic formula string");
   const params = parts[1].split(",").map(Number);
   const [a, b, c, xMin, xMax, step] = params;
@@ -551,20 +551,27 @@ function generateSvg(quadraticPlots, linearPlots, sinePlots, polarPlots, exponen
 
   // Dealers Choice Implementation: if dealersChoice is true, assign a unique random color for each plot series
   function randomColor() {
-    // Updated to use 16777216 to include full spectrum up to #ffffff
     return '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');
   }
 
+  function generateUniqueColors(n) {
+    const colors = new Set();
+    while (colors.size < n) {
+      colors.add(randomColor());
+    }
+    return Array.from(colors);
+  }
+
   // Define color palettes for each plot type
   let quadraticColors, linearColors, sineColors, polarColors, exponentialColors, logarithmicColors;
   if (dealersChoice) {
-    // For dealers choice, assign a random color to each individual plot series
-    quadraticColors = quadraticPlots.map(() => randomColor());
-    linearColors = linearPlots.map(() => randomColor());
-    sineColors = sinePlots.map(() => randomColor());
-    polarColors = polarPlots.map(() => randomColor());
-    exponentialColors = exponentialPlots.map(() => randomColor());
-    logarithmicColors = logarithmicPlots.map(() => randomColor());
+    // For dealers choice, assign a unique random color to each individual plot series
+    quadraticColors = generateUniqueColors(quadraticPlots.length);
+    linearColors = generateUniqueColors(linearPlots.length);
+    sineColors = generateUniqueColors(sinePlots.length);
+    polarColors = generateUniqueColors(polarPlots.length);
+    exponentialColors = generateUniqueColors(exponentialPlots.length);
+    logarithmicColors = generateUniqueColors(logarithmicPlots.length);
   } else {
     quadraticColors = ["blue", "darkblue", "purple", "royalblue", "deepskyblue"];
     linearColors = ["orange", "darkorange", "gold", "chocolate", "peru"];
