sandbox/source/main.js
# sandbox/source/main.js
#!/usr/bin/env node
import fs from "fs";
import minimist from "minimist";
import { fileURLToPath } from "url";

/**
 * Generate an SVG string for a quadratic or sine function.
 * @param {'quadratic'|'sine'} type
 * @param {object} params
 * @returns {string} SVG markup string
 */
export function generateSVG(type, params) {
  const points = [];
  for (let i = 0; i <= 100; i++) {
    const t = i / 100;
    const x = t;
    let y;
    if (type === "quadratic") {
      const { a, b, c } = params;
      y = a * x * x + b * x + c;
    } else if (type === "sine") {
      const { amplitude, frequency, phase } = params;
      y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);
    } else {
      throw new Error(`Unknown type: ${type}`);
    }
    points.push({ x, y });
  }
  const pathD = points
    .map((pt, idx) => `${idx === 0 ? "M" : "L"}${pt.x},${pt.y}`)
    .join(" ");
  return `<svg xmlns="http://www.w3.org/2000/svg"><path d="${pathD}" /></svg>`;
}

/**
 * CLI entry point for equation plotting.
 * @param {string[]} [argv]
 */
export function main(argv = process.argv.slice(2)) {
  const args = minimist(argv, {
    boolean: ["mission"],
    string: ["type", "output"],
    default: {
      a: 1,
      b: 0,
      c: 0,
      amplitude: 1,
      frequency: 1,
      phase: 0,
      mission: false,
    },
  });

  if (args.mission) {
    const missionPath = fileURLToPath(new URL("../../MISSION.md", import.meta.url));
    const mission = fs.readFileSync(missionPath, "utf-8");
    console.log(mission);
    process.exit(0);
  }

  const { type, a, b, c, amplitude, frequency, phase, output } = args;
  if (!type || !["quadratic", "sine"].includes(type)) {
    console.error("Error: --type <quadratic|sine> is required");
    process.exit(1);
  }
  const params =
    type === "quadratic"
      ? { a: Number(a), b: Number(b), c: Number(c) }
      : { amplitude: Number(amplitude), frequency: Number(frequency), phase: Number(phase) };
  const svg = generateSVG(type, params);
  if (output) {
    fs.writeFileSync(output, svg, "utf-8");
  } else {
    console.log(svg);
  }
}

// Execute if run directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main();
}
