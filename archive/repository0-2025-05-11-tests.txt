sandbox/tests/generateSVG.test.js
# sandbox/tests/generateSVG.test.js
import { describe, test, expect } from 'vitest';
import { generateSVG } from '../source/main.js';

describe('generateSVG function', () => {
  test('quadratic with a=0,b=0,c=0 produces horizontal line', () => {
    const svg = generateSVG('quadratic', { a: 0, b: 0, c: 0 });
    expect(svg.startsWith('<svg')).toBe(true);
    const match = svg.match(/<path d="([^"]+)"/);
    expect(match).not.toBeNull();
    const d = match[1];
    const yValues = d
      .split(' ')
      .map(seg => seg.split(',')[1])
      .filter(Boolean);
    expect([...new Set(yValues)]).toEqual(['0']);
  });

  test('sine with amplitude=0 produces horizontal line', () => {
    const svg = generateSVG('sine', { amplitude: 0, frequency: 1, phase: 0 });
    expect(svg.startsWith('<svg')).toBe(true);
    const match = svg.match(/<path d="([^"]+)"/);
    expect(match).not.toBeNull();
    const d = match[1];
    const yValues = d
      .split(' ')
      .map(seg => seg.split(',')[1])
      .filter(Boolean);
    expect([...new Set(yValues)]).toEqual(['0']);
  });

  test('invalid type throws error', () => {
    expect(() => generateSVG('unknown', {})).toThrow('Unknown type: unknown');
  });
});
sandbox/tests/cli.test.js
# sandbox/tests/cli.test.js
import { describe, test, expect, afterAll } from 'vitest';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

describe('CLI Integration', () => {
  const outputFile = path.resolve('test_output.svg');

  afterAll(() => {
    if (fs.existsSync(outputFile)) {
      fs.unlinkSync(outputFile);
    }
  });

  test('sine type with --output writes SVG file', () => {
    execSync(`node sandbox/source/main.js --type sine --output ${outputFile}`);
    expect(fs.existsSync(outputFile)).toBe(true);
    const content = fs.readFileSync(outputFile, 'utf-8');
    expect(content.startsWith('<svg')).toBe(true);
    expect(content.includes('<path')).toBe(true);
  });

  test('outputs to stdout when no --output', () => {
    const out = execSync('node sandbox/source/main.js --type quadratic --a 1 --b 0 --c 0');
    const str = out.toString().trim();
    expect(str.startsWith('<svg')).toBe(true);
  });

  test('prints mission statement with --mission', () => {
    const output = execSync('node sandbox/source/main.js --mission').toString();
    expect(output).toContain('# Mission Statement');
    expect(output.split('\n').length).toBeGreaterThan(1);
  });

  test('missing --type exits with error', () => {
    try {
      execSync('node sandbox/source/main.js', { stdio: 'pipe' });
      throw new Error('Process did not exit');
    } catch (err) {
      expect(err.status).toBe(1);
      const stderr = err.stderr.toString();
      expect(stderr).toContain('Error: --type <quadratic|sine> is required');
    }
  });

  test('invalid --type exits with error', () => {
    try {
      execSync('node sandbox/source/main.js --type unknown', { stdio: 'pipe' });
      throw new Error('Process did not exit');
    } catch (err) {
      expect(err.status).toBe(1);
      const stderr = err.stderr.toString();
      expect(stderr).toContain('Error: --type <quadratic|sine> is required');
    }
  });
});
