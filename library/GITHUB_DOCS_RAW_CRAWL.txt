GitHub DocsHelp for wherever you are on your GitHub journey.Get startedGet startedMigrationsAccount and profileAuthenticationBilling and paymentsSite policyCollaborative codingCodespacesRepositoriesPull requestsGitHub DiscussionsGitHub CopilotGitHub CopilotGet code suggestionsPrompt engineeringChat in GitHubCopilot Chat CookbookExtensions quickstartCI/CD and DevOpsGitHub ActionsGitHub PackagesGitHub PagesSecuritySecure codingSecret scanningSupply chain securityDependabotCode scanningSecurity advisoriesClient appsGitHub CLIGitHub MobileGitHub DesktopProject managementGitHub IssuesProjectsSearch on GitHubEnterprise and TeamsOrganizationsSecure your organizationEnterprise onboardingEnterprise administratorsGitHub Well-ArchitectedDevelopersAppsREST APIGraphQL APIWebhooksBuild Copilot ExtensionsGitHub ModelsCommunityBuilding communitiesGitHub SponsorsGitHub EducationGitHub for NonprofitsGitHub SupportContribute to GitHub DocsMore docsCodeQL query writingElectronnpmGetting startedSet up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.Connecting to GitHub with SSHYou can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network.Creating and managing repositoriesYou can create a repository on GitHub to store and collaborate on your project's files, then manage the repository's name and location.Basic writing and formatting syntaxCreate sophisticated formatting for your prose and code on GitHub with simple syntax.PopularAbout pull requestsLearn about pull requests and draft pull requests on GitHub. Pull requests communicate changes to a branch in a repository. Once a pull request is opened, you can review changes with collaborators and add follow-up commits.Authentication documentationKeep your account and data secure with features like two-factor authentication, SSH, and commit signature verification.Getting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Managing remote repositoriesLearn to work with your local repositories on your computer and remote repositories hosted on GitHub.\n\n\n\nGitHub DocsHelp for wherever you are on your GitHub journey.Get startedGet startedMigrationsAccount and profileAuthenticationBilling and paymentsSite policyCollaborative codingCodespacesRepositoriesPull requestsGitHub DiscussionsGitHub CopilotGitHub CopilotGet code suggestionsPrompt engineeringChat in GitHubCopilot Chat CookbookExtensions quickstartCI/CD and DevOpsGitHub ActionsGitHub PackagesGitHub PagesSecuritySecure codingSecret scanningSupply chain securityDependabotCode scanningSecurity advisoriesClient appsGitHub CLIGitHub MobileGitHub DesktopProject managementGitHub IssuesProjectsSearch on GitHubEnterprise and TeamsOrganizationsSecure your organizationEnterprise onboardingEnterprise administratorsGitHub Well-ArchitectedDevelopersAppsREST APIGraphQL APIWebhooksBuild Copilot ExtensionsGitHub ModelsCommunityBuilding communitiesGitHub SponsorsGitHub EducationGitHub for NonprofitsGitHub SupportContribute to GitHub DocsMore docsCodeQL query writingElectronnpmGetting startedSet up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.Connecting to GitHub with SSHYou can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network.Creating and managing repositoriesYou can create a repository on GitHub to store and collaborate on your project's files, then manage the repository's name and location.Basic writing and formatting syntaxCreate sophisticated formatting for your prose and code on GitHub with simple syntax.PopularAbout pull requestsLearn about pull requests and draft pull requests on GitHub. Pull requests communicate changes to a branch in a repository. Once a pull request is opened, you can review changes with collaborators and add follow-up commits.Authentication documentationKeep your account and data secure with features like two-factor authentication, SSH, and commit signature verification.Getting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Managing remote repositoriesLearn to work with your local repositories on your computer and remote repositories hosted on GitHub.\n\n\n\nGet started with GitHub documentation Learn how to start building, shipping, and maintaining software with GitHub. Explore our products, sign up for an account, and connect with the world's largest development community.Quickstart Start hereAbout GitHub and GitYou can use GitHub and Git to collaborate on work.GitHub’s plansAn overview of GitHub's pricing plans.Getting started with your GitHub accountWith a personal account on GitHub, you can import or create repositories, collaborate with others, and connect with the GitHub community.Getting started with GitHub TeamWith GitHub Team groups of people can collaborate across many projects at the same time in an organization account.PopularCreating an account on GitHubCreate a personal account to get started with GitHub.Hello WorldFollow this Hello World exercise to learn GitHub's pull request workflow.Set up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.About versions of GitHub DocsYou can read documentation that reflects the GitHub product you're currently using.GuidesTypes of GitHub accountsAccounts on GitHub allow you to organize and control access to code.@GitHubFinding ways to contribute to open source on GitHubYou can find ways to contribute to open source projects on GitHub that are relevant to you.@GitHubTroubleshooting connectivity problemsIf you're having trouble connecting to GitHub, you can troubleshoot your connection, then use the GitHub Debug tool to diagnose problems.@GitHubAll Get started docsStart your journeyAbout GitHub and GitCreating an account on GitHubHello WorldSetting up your profileFinding inspiration on GitHubDownloading files from GitHubUploading a project to GitHubGit and GitHub learning resourcesOnboardingGetting started with your GitHub accountGetting started with GitHub TeamGetting started with the GitHub Enterprise Cloud trialGetting started with GitHub Enterprise CloudUsing GitHubGitHub flowConnecting to GitHubCommunicating on GitHubExploring early access releases with feature previewSupported browsersGitHub MobileAllowing access to GitHub's services from a restricted networkTroubleshooting connectivity problemsLearning about GitHubGitHub’s plansGitHub language supportTypes of GitHub accountsAccess permissions on GitHubAbout GitHub Advanced SecurityFAQ about changes to GitHub’s plansGitHub glossaryLearning to codeGetting started with GitFinding and understanding example codeReusing other people's code in your projectsSetting up Copilot for learning to codeLearning to debug with GitHub CopilotStoring your secrets safelyAccessibilityManaging your theme settingsKeyboard shortcutsGitHub Command PaletteWriting on GitHubGetting started with writing and formatting on GitHub • 3 articlesWorking with advanced formatting • 10 articlesWorking with saved replies • 5 articlesEditing and sharing content with gists • 4 articlesExploring projects on GitHubFinding ways to contribute to open source on GitHubUsing GitHub Copilot to explore projectsContributing to a projectSaving repositories with starsFollowing peopleFollowing organizationsGit basicsSet up GitSetting your username in GitCaching your GitHub credentials in GitWhy is Git always asking for my password?Updating credentials from the macOS KeychainGit workflowsAbout remote repositoriesManaging remote repositoriesAssociating text editors with GitConfiguring Git to handle line endingsIgnoring filesGit cheatsheetUsing GitAbout GitPushing commits to a remote repositoryGetting changes from a remote repositoryDealing with non-fast-forward errorsSplitting a subfolder out into a new repositoryAbout Git subtree mergesAbout Git rebaseUsing Git rebase on the command lineResolving merge conflicts after a Git rebaseDealing with special characters in branch and tag namesTroubleshooting the 2 GB push limitExploring integrationsAbout using integrationsAbout building integrationsFeatured GitHub integrationsGitHub Developer ProgramArchiving your GitHub personal account and public repositoriesRequesting an archive of your personal account’s dataOpting into or out of the GitHub Archive Program for your public repositoryUsing GitHub DocsAbout versions of GitHub DocsUsing hover cards on GitHub DocsShowcase your expertise with GitHub CertificationsAbout GitHub CertificationsRegistering for a GitHub Certifications exam\n\n\n\nMigrations documentation If you're moving to GitHub from another code hosting platform or moving between GitHub products, learn how to use our migration tooling to bring your work with you.Overview Plan your migration Start hereAbout GitHub ImporterIf your source code is stored on another Git-based hosting service, you can move the code to GitHub.com using GitHub Importer.About GitHub Enterprise ImporterWith GitHub Enterprise Importer, you can migrate your enterprise to GitHub Enterprise Cloud from various sources.Automating migration with GitHub Actions ImporterUse GitHub Actions Importer to plan and automate your migration to GitHub Actions.PopularImporting a repository with GitHub ImporterIf you have a project hosted on another Git-based hosting service, you can quickly import it to GitHub using the GitHub Importer tool.Adding locally hosted code to GitHubIf your code is stored locally on your computer and is tracked by Git or not tracked by any version control system (VCS), you can import the code to GitHub using GitHub CLI or Git commands.Migrating repositories from GitHub Enterprise Server to GitHub Enterprise CloudYou can migrate repositories from GitHub Enterprise Server to GitHub Enterprise Cloud, using the GitHub CLI or API.GuidesReclaiming mannequins for GitHub Enterprise ImporterAfter your migration, you can assign the history of a placeholder identity, or mannequin, to a member of your organization.@GitHubTroubleshooting your migration with GitHub Enterprise ImporterIf your migration fails or produces unexpected results, you can try common troubleshooting steps.@GitHubAll Migrations docsOverviewAbout GitHub's migration toolingPlanning your migration to GitHubMigration paths to GitHubAbout locked repositoriesProgrammatically importing repositoriesImporting source codeUsing GitHub Importer • 2 articlesUsing the command line to import source code • 6 articlesUsing GitHub Enterprise ImporterUnderstanding GitHub Enterprise Importer • 1 articlesMigrating from Azure DevOps to GitHub Enterprise Cloud • 4 articlesMigrating from Bitbucket Server to GitHub Enterprise Cloud • 4 articlesMigrating between GitHub products • 6 articlesCompleting your migration with GitHub Enterprise Importer • 3 articlesUsing ghe-migratorAbout ghe-migratorExporting migration data from GitHub Enterprise ServerExporting migration data from GitHub.comMigrating data to GitHub Enterprise Server\n\n\n\nAccount and profile documentation Make GitHub work best for you by adjusting the settings for your personal account, personalizing your profile page, and managing the notifications you receive.Quickstart Start hereChanging your GitHub usernameYou can change the username for your account on GitHub.Managing your profile READMEYou can add a README to your GitHub profile to tell other people about yourself.About notificationsNotifications provide updates about the activity on GitHub that you've subscribed to. You can use the notifications inbox to customize, triage, and manage your updates.PopularSetting your commit email addressYou can set the email address that is used to author commits on GitHub and on your computer.Inviting collaborators to a personal repositoryYou can invite users to become collaborators to your personal repository.Configuring notificationsChoose the type of activity on GitHub that you want to receive notifications for and how you want these updates delivered.What's newView all Sunset notice for automatic watching of repositories and teamsApril 15GitHub Actions workflow notifications in Slack and Microsoft TeamsDecember 06Local timezones available on profilesSeptember 23GuidesWhy are my contributions not showing up on my profile?Learn common reasons that contributions may be missing from your contributions graph.@GitHubManaging notifications from your inboxUse your inbox to quickly triage and sync your notifications across email and mobile.@GitHubBlocking command line pushes that expose your personal email addressIf you've chosen to keep your email address private when performing web-based operations, you can also choose to block command line pushes that may expose your personal email address.@GitHubAll Account and profile docsSetting up and managing your personal account on GitHubManaging user account settings • 9 articlesManaging your personal account • 6 articlesManaging email preferences • 9 articlesManaging access to your personal repositories • 4 articlesManaging your membership in organizations • 7 articlesSetting up and managing your GitHub profileCustomizing your profile • 7 articlesManaging contribution settings on your profile • 6 articlesManaging subscriptions and notifications on GitHubSetting up notifications • 2 articlesViewing and triaging notifications • 3 articlesManaging subscriptions for activity on GitHub • 2 articles\n\n\n\nAuthentication documentation Keep your account and data secure with features like two-factor authentication, SSH, and commit signature verification.Overview Start hereGenerating a new SSH key and adding it to the ssh-agentAfter you've checked for existing SSH keys, you can generate a new SSH key to use for authentication, then add it to the ssh-agent.Managing your personal access tokensYou can use a personal access token in place of a password when authenticating to GitHub in the command line or with the API.Configuring two-factor authenticationYou can choose among multiple options to add a second source of authentication to your account.PopularTroubleshooting SSHWhen using SSH to connect and authenticate to GitHub, you may need to troubleshoot unexpected issues that may arise.Checking for existing SSH keysBefore you generate an SSH key, you can check to see if you have any existing SSH keys.Adding a new SSH key to your GitHub accountTo configure your account on GitHub.com to use your new (or existing) SSH key, you'll also need to add the key to your account.Authenticating with SAML single sign-onYou can authenticate to GitHub with SAML single sign-on (SSO).What's newView all SSH CA support for enterprise-owned user accountsMarch 29New SSH CAs must sign expiring certificatesMarch 20You can pick your account during device flow loginJanuary 05GuidesRecovering your account if you lose your 2FA credentialsIf you lose access to your two-factor authentication credentials, you can use your recovery codes, or another recovery option, to regain access to your account.@GitHubError: Permission denied (publickey)A "Permission denied" error means that the server rejected your connection. There could be several reasons why, and the most common examples are explained below.@GitHubCreating a strong passwordSecure your account on GitHub with a strong and unique password using a password manager.@GitHubAll Authentication docsKeeping your account and data secureAbout authentication to GitHubCreating a strong passwordSwitching between accountsVerifying new devices when signing inUpdating your GitHub access credentialsManaging your personal access tokensReviewing your SSH keysReviewing your deploy keysToken expiration and revocationReviewing your security logSecurity log eventsRemoving sensitive data from a repositoryAbout anonymized URLsAbout GitHub's IP addressesGitHub's SSH key fingerprintsSudo modePreventing unauthorized accessViewing and managing your sessionsSecuring your account with two-factor authentication (2FA)About two-factor authenticationConfiguring two-factor authenticationConfiguring two-factor authentication recovery methodsAccessing GitHub using two-factor authenticationRecovering your account if you lose your 2FA credentialsChanging your two-factor authentication methodAbout mandatory two-factor authenticationCountries where SMS authentication is supportedDisabling two-factor authentication for your personal accountAuthenticating with a passkeyAbout passkeysManaging your passkeysSigning in with a passkeyConnecting to GitHub with SSHAbout SSHUsing SSH agent forwardingManaging deploy keysChecking for existing SSH keysGenerating a new SSH key and adding it to the ssh-agentAdding a new SSH key to your GitHub accountTesting your SSH connectionWorking with SSH key passphrasesTroubleshooting SSHUsing SSH over the HTTPS portRecovering your SSH key passphraseDeleted or missing SSH keysError: Host key verification failedError: Permission denied (publickey)Error: Bad file numberError: Key already in useError: Permission to user/repo denied to other-userError: Permission to user/repo denied to user/other-repoError: Agent admitted failure to signError: ssh-add: illegal option -- apple-use-keychainError: SSL certificate problem, verify that the CA cert is OKError: Unknown key typeError: We're doing an SSH key auditManaging commit signature verificationAbout commit signature verificationDisplaying verification statuses for all of your commitsChecking for existing GPG keysGenerating a new GPG keyAdding a GPG key to your GitHub accountTelling Git about your signing keyAssociating an email with your GPG keySigning commitsSigning tagsTroubleshooting commit signature verificationChecking your commit and tag signature verification statusUsing a verified email address in your GPG key\n\n\n\nBilling and payments documentation Learn about the different components of your bill, and how you can view and manage those components.Overview Start hereAdding or editing a payment methodYou can add a payment method to your account or update your account's existing payment method at any time.Setting your billing emailYour account's billing email is where GitHub sends receipts and other billing-related communication.About per-user pricingLearn about per-user pricing for organizations.PopularDowngrading your account's planYou can downgrade the plan for any type of account on GitHub at any time.About billing for GitHub ActionsIf you want to use GitHub Actions beyond the storage or minutes included in your account, you will be billed for additional usage.About billing for GitHub CodespacesLearn about the costs for using GitHub Codespaces, and the monthly usage quotas included with GitHub personal accounts.GuidesHow does upgrading or downgrading affect the billing process?When you upgrade the subscription for your personal account or organization, changes are applied immediately. When you downgrade your subscription, changes are applied at the end of your current billing cycle.@GitHubUpgrading Git Large File StorageYou can purchase additional data packs to increase your monthly bandwidth quota and total storage capacity for Git LFS.@GitHubAll Billing and payments docsUsing the billing platformAbout billing on GitHubViewing your subscriptions and billing dateAdding or editing a payment methodViewing your payment history and receiptsAdding information to your receiptsAdding a sales tax certificateSetting your billing emailChanging the duration of your billing cycleRedeeming a couponTroubleshooting a declined credit card chargeUnlocking a locked accountUsing the new billing platformAbout the new billing platformGetting started with the new billing platformAbout the billing cycleManaging licenses and plans for your accountRoles for the new billing platformEstimating spendingGathering insights on your spendingPreventing overspendingManaging your payment and billing informationAbout billing for Git Large File StorageManaging the plan for your GitHub accountAbout billing for plansAbout per-user pricingUpgrading your account's planViewing and managing pending changes to your planDowngrading your account's planConnecting an Azure subscriptionHow does upgrading or downgrading affect the billing process?One-time payments for customers in IndiaDiscounted plans for GitHub accountsManaging billing for your productsManaging billing for GitHub Actions • 3 articlesManaging billing for GitHub Codespaces • 3 articlesManaging billing for GitHub Packages • 3 articlesManaging billing for GitHub Copilot • 1 articlesManaging billing for GitHub Advanced Security products • 4 articlesManaging billing for GitHub Sponsors • 4 articlesManaging billing for GitHub Marketplace apps • 4 articlesManaging billing for Git Large File Storage • 4 articlesSetting up paid accounts for procurement companiesSetting up paid organizations for procurement companies • 4 articlesSetting up enterprise accounts for procurement companies • 4 articles\n\n\n\nSite policySite policy documentationGitHub TermsAcceptable Use PoliciesPrivacy PoliciesOther Site PoliciesContent Removal PoliciesSecurity PoliciesGitHub Company Policies\n\n\n\nCodespaces documentation Create a codespace to start developing in a secure, configurable, and dedicated development environment that works how and where you want it to.Overview Quickstart View video transcript Start hereView all Enabling or disabling GitHub Codespaces for your organizationYou can control which users can use GitHub Codespaces in your organization's private repositories.Understanding the codespace lifecycleLearn how to develop in a GitHub Codespaces environment, and maintain your data throughout the entire codespace lifecycle.Introduction to dev containersWhen you work in a codespace, the environment you are working in is created using a development container, or dev container, hosted on a virtual machine.Managing access to other repositories within your codespaceYou can manage the repositories that GitHub Codespaces can access.Set up your projectSetting up a Node.js project for GitHub CodespacesGet started with a Node.js, JavaScript, or TypeScript project in GitHub Codespaces by creating a custom dev container configuration.Setting up a Python project for GitHub CodespacesGet started with a Python project in GitHub Codespaces by creating a custom dev container configuration.Setting up a Java project for GitHub CodespacesGet started with a Java project in GitHub Codespaces by creating a custom dev container configuration.Setting up a C# (.NET) project for GitHub CodespacesGet started with a C# (.NET) project in GitHub Codespaces by creating a custom dev container configuration.What's newView all Enhanced Codespaces ConnectionFebruary 12Codespaces host image upgradeJanuary 17Codespaces host image upgrades Docker and composeDecember 21GuidesDeep dive into GitHub CodespacesExplore more detail about how GitHub Codespaces work.@GitHubCreating a codespace for a repositoryYou can create a codespace for a branch in a repository to develop online.@GitHubCreating a codespace from a templateIf you're starting a new project, you can create a codespace from a blank template or choose a template specially designed for the type of work you want to do.@GitHubOpening an existing codespaceYou can reopen a codespace that you have closed or stopped and return to your work.@GitHubExplore guides All Codespaces docsGetting started with GitHub CodespacesWhat are GitHub Codespaces?GitHub Codespaces featuresUnderstanding the codespace lifecycleDeep dive into GitHub CodespacesDeveloping in a codespaceDeveloping in a codespaceCreating a codespace for a repositoryCreating a codespace from a templateDeleting a codespaceOpening an existing codespaceWorking collaboratively in a codespaceUsing source control in your codespaceUsing GitHub Codespaces for pull requestsStopping and starting a codespaceForwarding ports in your codespaceRebuilding the container in a codespaceDefault environment variables for your codespacePersisting environment variables and temporary filesConnecting to a private networkGetting started with GitHub Codespaces for machine learningUsing GitHub Codespaces in Visual Studio CodeUsing GitHub Codespaces with GitHub CLICustomizing your codespaceRenaming a codespaceChanging the shell in a codespaceChanging the machine type for your codespaceSetting your user preferencesPersonalizing GitHub Codespaces for your accountSetting your default editor for GitHub CodespacesSetting your default region for GitHub CodespacesSetting your timeout period for GitHub CodespacesConfiguring automatic deletion of your codespacesChoosing the stable or beta host imageSetting up your project for GitHub CodespacesAdding a dev container configuration to your repository • 6 articlesConfiguring dev containers • 4 articlesSetting up your repository for GitHub Codespaces • 2 articlesPrebuilding your codespacesAbout GitHub Codespaces prebuildsConfiguring prebuildsAllowing a prebuild to access other repositoriesManaging prebuildsTesting dev container configuration changes on a prebuild-enabled branchManaging your codespacesManaging your account-specific secrets for GitHub CodespacesManaging access to other repositories within your codespaceReviewing your security logs for GitHub CodespacesManaging GPG verification for GitHub CodespacesManaging GitHub Codespaces for your organizationEnabling or disabling GitHub Codespaces for your organizationChoosing who owns and pays for codespaces in your organizationListing the codespaces in your organizationManaging the cost of GitHub Codespaces in your organizationManaging development environment secrets for your repository or organizationReviewing your organization's audit logs for GitHub CodespacesRestricting access to machine typesRestricting the number of organization-billed codespaces a user can createRestricting the base image for codespacesRestricting the visibility of forwarded portsRestricting the idle timeout periodRestricting the retention period for codespacesReferenceAllowing your codespace to access a private registryUsing GitHub Copilot in GitHub CodespacesUsing the Visual Studio Code Command Palette in GitHub CodespacesSecurity in GitHub CodespacesDisaster recovery for GitHub CodespacesTroubleshooting GitHub CodespacesGitHub Codespaces logsTroubleshooting GitHub Codespaces clientsGetting the most out of your included usageExporting changes to a branchTroubleshooting creation and deletion of codespacesTroubleshooting authentication to a repositoryTroubleshooting your connection to GitHub CodespacesTroubleshooting prebuildsTroubleshooting personalization options for GitHub CodespacesTroubleshooting port forwarding for GitHub CodespacesTroubleshooting GPG verification for GitHub CodespacesWorking with support for GitHub Codespaces\n\n\n\nRepositories documentation Learn to use and manage the repositories that allow you to store and collaborate on your project's code.Quickstart Overview Start hereCloning a repositoryWhen you create a repository on GitHub, it exists as a remote repository. You can clone your repository to create a local copy on your computer and sync between the two locations.Restoring a deleted repositoryYou can restore some deleted repositories to recover their contents.Adding a file to a repositoryYou can upload and commit an existing file to a repository on GitHub or by using the command line.Licensing a repositoryPublic repositories on GitHub are often used to share open source software. For your repository to truly be open source, you'll need to license it so that others are free to use, change, and distribute the software.PopularAbout protected branchesYou can protect important branches by setting branch protection rules, which define whether collaborators can delete or force push to the branch and set requirements for any pushes to the branch, such as passing status checks or a linear commit history.About releasesYou can create a release to package software, along with release notes and links to binary files, for other people to use.About READMEsYou can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it.About code ownersYou can use a CODEOWNERS file to define individuals or teams that are responsible for code in a repository.What's newView all Updates to repository pagesDecember 06New Organization Repositories List Feature PreviewDecember 06Upcoming changes to repository insightsNovember 29GuidesDeleting a repositoryYou can delete any repository or fork if you're either an organization owner or have admin permissions for the repository or fork. Deleting a forked repository does not delete the upstream repository.@GitHubManaging a branch protection ruleYou can create a branch protection rule to enforce certain workflows for one or more branches, such as requiring an approving review or passing status checks for all pull requests merged into the protected branch.@GitHubSetting repository visibilityYou can choose who can view your repository.@GitHubAll Repositories docsCreating and managing repositoriesAbout repositoriesBest practices for repositoriesQuickstart for repositoriesRepository limitsCreating a new repositoryCreating a repository from a templateCreating a template repositoryCreating an issues-only repositoryDuplicating a repositoryCloning a repositoryTroubleshooting cloning errorsRenaming a repositoryTransferring a repositoryDeleting a repositoryRestoring a deleted repositoryManaging your repository’s settings and featuresCustomizing your repository • 8 articlesEnabling features for your repository • 5 articlesManaging repository settings • 9 articlesConfiguring branches and merges in your repositoryManaging branches in your repository • 4 articlesConfiguring pull request merges • 8 articlesManaging protected branches • 2 articlesManaging rulesets for a repository • 5 articlesWorking with filesManaging files • 7 articlesUsing files • 5 articlesManaging large files • 9 articlesReleasing projects on GitHubAbout releasesManaging releases in a repositoryViewing your repository's releases and tagsSearching a repository's releasesLinking to releasesComparing releasesAutomatically generated release notesAutomation for release forms with query parametersViewing activity and data for your repositoryViewing deployment activity for your repositoryAbout repository graphsUsing Pulse to view a summary of repository activityViewing traffic to a repositoryViewing a project's contributorsAnalyzing changes to a repository's contentUnderstanding connections between repositoriesUsing the activity view to see changes to a repositoryArchiving a GitHub repositoryArchiving repositoriesAbout archiving content and data on GitHubReferencing and citing contentBacking up a repository\n\n\n\nPull requests documentation Learn how to use pull requests to suggest changes to a project, receive suggested changes to your own projects, and address issues in pull requests, such as merge conflicts.Overview Start hereChanging a commit messageIf a commit message contains unclear, incorrect, or sensitive information, you can amend it locally and push a new commit with a new message to GitHub. You can also change a commit message to add missing information.Resolving a merge conflict using the command lineYou can resolve merge conflicts using the command line and a text editor.Creating and deleting branches within your repositoryYou can create or delete branches directly on GitHub.Creating a pull requestCreate a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the default branch only contains finished and approved work.PopularAbout pull request reviewsReviews allow collaborators to comment on the changes proposed in pull requests, approve the changes, or request further changes before the pull request is merged. Repository administrators can require that all pull requests are approved before being merged.Resolving a merge conflict on GitHubYou can resolve simple merge conflicts that involve competing line changes on GitHub, using the conflict editor.Syncing a forkSync a fork of a repository to keep it up-to-date with the upstream repository.Merging a pull requestMerge a pull request into the upstream branch when work is completed. Anyone with push access to the repository can complete the merge.What's newView all Users can now choose whether merging linked pull requests automatically closes the issueApril 23The Comment Box Becomes More Consistent and AccessibleOctober 31Repository Rules –  Public Beta – History, Import, ExportOctober 12GuidesApproving a pull request with required reviewsIf your repository requires reviews, pull requests must have a specific number of approving reviews from people with write or admin permissions in the repository before they can be merged.@GitHubReverting a pull requestYou can revert a pull request after it's been merged to the upstream branch.@GitHubWhy are my commits linked to the wrong user?GitHub uses the email address in the commit header to link the commit to a GitHub user. If your commits are being linked to another user, or not linked to a user at all, you may need to change your local Git configuration settings, add an email address to your account email settings, or do both.@GitHubAll Pull requests docsCommitting changes to your projectCreating and editing commits • 4 articlesViewing and comparing commits • 2 articlesTroubleshooting commits • 3 articlesCollaborating with pull requestsGetting started • 3 articlesWorking with forks • 8 articlesCollaborating on repositories with code quality features • 2 articlesProposing changes to your work with pull requests • 12 articlesAddressing merge conflicts • 3 articlesReviewing changes in pull requests • 11 articlesIncorporating changes from a pull request • 6 articles\n\n\n\nGitHub Discussions documentation GitHub Discussions is a collaborative communication forum for the community around an open source or internal project. Community members can ask and answer questions, share updates, have open-ended conversations, and follow along on decisions affecting the community's way of working.Quickstart Start hereView all About discussionsUse discussions to ask and answer questions, share information, make announcements, and conduct or participate in a conversation about a project.Participating in a discussionYou can converse with the community and maintainers in a forum within the repository for a project on GitHub.Moderating discussionsYou can promote healthy collaboration by marking comments as answers, locking or unlocking discussions, converting issues to discussions, and editing or deleting comments, discussions, and categories that don't align with your community's code of conduct.PopularGranting higher permissions to top contributorsRepository administrators can promote any community member to a moderator and maintainer.Best practices for community conversations on GitHubYou can use discussions to brainstorm with your team, and eventually move the conversation to an issue when you are ready to scope out the work.Finding your discussionsYou can easily access every discussion you've created or participated in.Collaborating with maintainers using discussionsYou can contribute to the goals, plans, health, and community for a project on GitHub by communicating with the maintainers of the project in a discussion.What's newView all The Comment Box Becomes More Consistent and AccessibleOctober 31Filter answered discussions through the GraphQL APIOctober 10More secure private attachmentsMay 09Communities on GitHub.com using discussionsvercel/next.jsThe React Frameworkgatsbyjs/gatsbyBuild blazing fast, modern apps and websites with Reactnodejs/nodeNode.js JavaScript runtime ✨🐢🚀✨tailwindlabs/tailwindcssA utility-first CSS framework for rapid UI development.laravel/frameworkLaravel is a web application framework with expressive, elegant syntax.prisma/prismaModern database access (ORM alternative) for Node.js & TypeScript | PostgreSQL, MySQL, MariaDB & SQLitedotnet/csharplangThe official repo for the design of the C# programming languagehome-assistant/frontend🍭 Frontend for Home Assistantjspsych/jsPsychA JavaScript library for creating and running behavioral experiments in a web browseradonisjs/core🚀 The Node.js Framework highly focused on developer ergonomics, stability and confidenceImageMagick/ImageMagick🧙‍♂️ ImageMagick 7react-hook-form/react-hook-form📋 React Hooks for forms validation (Web + React Native)GuidesAbout discussionsUse discussions to ask and answer questions, share information, make announcements, and conduct or participate in a conversation about a project.@GitHubParticipating in a discussionYou can converse with the community and maintainers in a forum within the repository for a project on GitHub.@GitHubModerating discussionsYou can promote healthy collaboration by marking comments as answers, locking or unlocking discussions, converting issues to discussions, and editing or deleting comments, discussions, and categories that don't align with your community's code of conduct.@GitHubExplore guides All GitHub Discussions docsDiscussions guidesBest practices for community conversations on GitHubFinding your discussionsGranting higher permissions to top contributorsCollaborating with your community using discussionsAbout discussionsParticipating in a discussionCollaborating with maintainers using discussionsManaging discussions for your communityManaging discussionsManaging categories for discussionsModerating discussionsViewing insights for your discussionsCreating discussion category formsSyntax for discussion category forms\n\n\n\nGitHub Copilot documentation You can use GitHub Copilot to get autocomplete-style suggestions from an AI pair programmer as you code.Overview Quickstart Start hereWhat is GitHub Copilot?Learn what GitHub Copilot is and what you can do with it.Quickstart for GitHub CopilotQuickly learn how to use GitHub Copilot.Quickstart for GitHub Copilot Extensions using agentsBuild and try out GitHub's Blackbeard extension to learn about the development process for GitHub Copilot Extensions.PopularBest practices for using GitHub CopilotLearn how to get the most out of Copilot.Copilot Chat CookbookFind examples of prompts to use with GitHub Copilot Chat.Getting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Asking GitHub Copilot questions in your IDEUse Copilot Chat in your editor to give you code suggestions, explain code, generate unit tests, and suggest code fixes.What's newView all GitHub Copilot code review now supports C, C++, Kotlin, and SwiftApril 23GitHub Copilot for Xcode adds @workspace and support for Claude 3.7 Sonnet and GPT-4.5April 19Organization custom instructions now availableApril 17All GitHub Copilot docsAbout GitHub CopilotWhat is GitHub Copilot?GitHub Copilot featuresPlans for GitHub CopilotSetting up GitHub CopilotSetting up GitHub Copilot for your organizationSetting up GitHub Copilot for yourselfUsing GitHub CopilotBest practices for using GitHub CopilotGetting code suggestions in your IDE with GitHub CopilotCopilot Chat • 7 articlesAsking GitHub Copilot questions in Windows TerminalCode review • 3 articlesUsing GitHub Copilot in the command lineUsing extensions to integrate external tools with Copilot ChatAI models for Copilot • 9 articlesFinding public code that matches GitHub Copilot suggestionsUsing GitHub Copilot for pull requests • 2 articlesGuides on using GitHub Copilot • 4 articlesCopilot Chat CookbookDebugging errors • 2 articlesFunctionality analysis and feature suggestions • 2 articlesRefactoring code • 10 articlesDocumenting code • 5 articlesTesting code • 3 articlesSecurity analysis • 1 articlesManaging CopilotManaging Copilot as an individual subscriber • 3 articlesManaging GitHub Copilot in your organization • 5 articlesManaging GitHub Copilot in your enterprise • 1 articlesMonitoring usage and entitlements • 2 articlesConfiguring personal settings • 6 articlesConfiguring and auditing content exclusion • 2 articlesRolling out GitHub Copilot at scaleChoosing your enterprise's plan for GitHub CopilotDriving Copilot adoption in your companySetting up a self-serve process for GitHub Copilot licensesAnalyzing usage over time with the Copilot metrics APIReminding inactive users to use their GitHub Copilot licenseManaging your company's spending on GitHub CopilotCustomizing CopilotExtending the capabilities of GitHub Copilot in your organizationAbout customizing GitHub Copilot Chat responsesAdding personal custom instructions for GitHub CopilotAdding repository custom instructions for GitHub CopilotExtending Copilot Chat with the Model Context Protocol (MCP)Building Copilot ExtensionsAbout building Copilot ExtensionsQuickstart for GitHub Copilot Extensions using agentsSetting up Copilot ExtensionsCreating a Copilot Extension • 3 articlesBuilding a Copilot agent for your Copilot Extension • 5 articlesBuilding a Copilot skillset for your Copilot Extension • 2 articlesUsing OIDC with GitHub Copilot ExtensionsDebugging your GitHub Copilot ExtensionManaging the availability of your Copilot ExtensionCopilot Extensions FAQCopilot Extensions GlossaryTroubleshooting GitHub CopilotTroubleshooting common issues with GitHub CopilotViewing logs for GitHub Copilot in your environmentTroubleshooting firewall settings for GitHub CopilotTroubleshooting network errors for GitHub CopilotTroubleshooting issues with GitHub Copilot ChatResponsible use of GitHub Copilot featuresResponsible use of GitHub Copilot Chat in your IDEResponsible use of GitHub Copilot Chat in GitHubResponsible use of GitHub Copilot Chat in GitHub MobileResponsible use of GitHub Copilot in the CLIResponsible use of GitHub Copilot in Windows TerminalResponsible use of GitHub Copilot in GitHub DesktopResponsible use of GitHub Copilot pull request summariesResponsible use of GitHub Copilot text completionResponsible use of GitHub Copilot code review\n\n\n\nGitHub Copilot/Use GitHub Copilot/Get code suggestionsGetting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Tool navigationAzure Data StudioEclipseJetBrains IDEsVim/NeovimVisual StudioVisual Studio CodeXcodeIn this articleAbout GitHub Copilot and JetBrains IDEsPrerequisitesGetting code suggestionsShowing alternative suggestionsShowing multiple suggestions in a new tabAccepting partial suggestionsAbout GitHub Copilot and Visual StudioPrerequisitesGetting code suggestionsShowing alternative suggestionsGetting comment suggestionsAbout GitHub Copilot and Visual Studio CodePrerequisitesGetting code suggestionsShowing alternative suggestionsShowing multiple suggestions in a new tabAccepting partial suggestionsAbout next edit suggestionsChanging the AI modelAbout GitHub Copilot and Vim/NeovimPrerequisitesLearning to use GitHub Copilot in Vim/NeovimAbout GitHub Copilot and Azure Data StudioPrerequisitesGetting code suggestionsShowing alternative suggestionsAccepting partial suggestionsAbout GitHub Copilot in XcodePrerequisitesGetting code suggestionsAbout GitHub Copilot and EclipsePrerequisitesGetting code suggestionsManually triggering code completionAccepting partial suggestionsNext steps

    
        Get started for free 
    
    
    
        Open in Visual Studio Code 
    
    


About GitHub Copilot and JetBrains IDEs
This guide demonstrates how to get coding suggestions from GitHub Copilot in a JetBrains IDE. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
The examples in this guide use Java, however other languages will work similarly. GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, but works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++. GitHub Copilot can also assist in query generation for databases, generating suggestions for APIs and frameworks, and can help with infrastructure as code development.
Prerequisites


Access to Copilot. To use GitHub Copilot in JetBrains, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


Compatible JetBrains IDE. To use GitHub Copilot in JetBrains, you must have a compatible JetBrains IDE installed. GitHub Copilot is compatible with the following IDEs:

IntelliJ IDEA (Ultimate, Community, Educational)
Android Studio
AppCode
CLion
Code With Me Guest
DataGrip
DataSpell
GoLand
JetBrains Client
MPS
PhpStorm
PyCharm (Professional, Community, Educational)
Rider
RubyMine
RustRover
WebStorm
Writerside

See the JetBrains IDEs tool finder to download.


GitHub Copilot plugin. See the GitHub Copilot plugin in the JetBrains Marketplace. For installation instructions, see Installing the GitHub Copilot extension in your environment.


Log in to GitHub in your JetBrains IDE. For authentication instructions, see Installing the GitHub Copilot extension in your environment.


Getting code suggestions
GitHub Copilot offers coding suggestions as you type. For example, in a Java file, create a class by typing class Test.
GitHub Copilot will automatically suggest a class body in grayed text. To accept the suggestion, press Tab.
You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal. For example, type this comment in a Java file:
Java// find all images without alternate text
// and give them a red border
void process () {
// find all images without alternate text
// and give them a red border
void process () {

GitHub Copilot will automatically suggest code. To accept the suggestion, press Tab.
GitHub Copilot will attempt to match the context and style of your code. You can always edit the suggested code.
Tip

If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information about duplication detection, see Managing Copilot policies as an individual subscriber.

Showing alternative suggestions
For any given input, GitHub Copilot may offer multiple suggestions. You can select which suggestion to use, or reject all suggestions.
For example, type the following line in a Java file, and press Enter:
Javaprivate int calculateDaysBetweenDates(Date date1,
private int calculateDaysBetweenDates(Date date1,

GitHub Copilot will show you a suggestion.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To display next or previous suggestions, click the forward or back arrow button in the control.
You can also use keyboard shortcuts to show alternative suggestions:




















OSSee next suggestionSee previous suggestionmacOSOption+]Option+[Windows or LinuxAlt+]Alt+[
To accept a suggestion, click "Accept" in the Copilot command palette, or press Tab. To reject all suggestions, press Esc.
Showing multiple suggestions in a new tab
If you don't want to use any of the initial suggestions GitHub Copilot offers, you can show multiple suggestions in a new tab.
For example, type the following line in a Java file:
Javaprivate int calculateDaysBetweenDates(Date date1,
private int calculateDaysBetweenDates(Date date1,

GitHub Copilot will show you a suggestion.
To open a new tab with multiple additional suggestions, use the following keyboard shortcut, then click Open GitHub Copilot:

















OSOpen multiple suggestionsmacOSCommand+Shift+AWindows or LinuxCtrl+Enter
To accept a suggestion, below the suggestion, click Accept suggestion NUMBER. To reject all suggestions, close the tab.
Accepting partial suggestions
If you don't want to accept an entire suggestion from GitHub Copilot, you can accept the next word or the next line of a suggestion.
For example, type the following line in a Java file:
Javaprivate int calculateDaysBetweenDates(Date date1,
private int calculateDaysBetweenDates(Date date1,

GitHub Copilot will show a suggestion in grayed text. The exact suggestion may vary.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To accept only the next word of the suggestion, click Accept Word in the control.
Alternatively, you can use a keyboard shortcut to accept the next word of a suggestion:




















OSAccept Next WordAccept Next LinemacOSCommand+→Command+Control+→Windows or LinuxControl+→Control+Alt+→
If you want to accept the next line of a suggestion, you will need to set a custom keyboard shortcut for the command editor.action.inlineSuggest.acceptNextLine. For more information on setting custom keyboard shortcuts, see Configuring GitHub Copilot in your environment.


About GitHub Copilot and Visual Studio
This guide demonstrates how to get coding suggestions from GitHub Copilot in Visual Studio for Windows. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
The examples in this guide use C#, however other languages will work similarly. GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, but works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++. GitHub Copilot can also assist in query generation for databases, generating suggestions for APIs and frameworks, and can help with infrastructure as code development.
Prerequisites


Access to Copilot. To use GitHub Copilot in GitHub Copilot in Visual Studio, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


Compatible version of Visual Studio. To use GitHub Copilot in Visual Studio, you must have version 2022 17.8 or later of Visual Studio for Windows installed. For more information, see Install Visual Studio in the Microsoft documentation.


GitHub Copilot extension for Visual Studio. For instructions on how to install the Copilot extension, see Install GitHub Copilot in Visual Studio in the Microsoft documentation.


Add your GitHub account to Visual Studio. See Add your GitHub accounts to your Visual Studio keychain in the Microsoft documentation.


Getting code suggestions
GitHub Copilot offers coding suggestions as you type. For example, type this function
signature in a C# file:
C#int CalculateDaysBetweenDates(
int CalculateDaysBetweenDates(

GitHub Copilot will automatically suggest an entire function body in grayed text. To accept the suggestion, press Tab.
You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal. For example, type this comment in the C# file:
C#using System.Xml.Linq;

var doc = XDocument.Load("index.xhml");

// find all images
using System.Xml.Linq;

var doc = XDocument.Load("index.xhml");

// find all images

GitHub Copilot will suggest an implementation of the function. To accept the suggestion, press Tab.
Tip

If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information about duplication detection, see Managing Copilot policies as an individual subscriber.

Showing alternative suggestions
For any given input, GitHub Copilot may offer multiple suggestions. You can select which suggestion to use, or reject all suggestions.
For example, type this function signature in a C# file:
C#int CalculateDaysBetweenDates(
int CalculateDaysBetweenDates(

GitHub Copilot will show you a suggestion.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To display next or previous suggestions, click the forward or back arrow button in the control.
Alternatively, you can show alternate suggestions by pressing Alt+. (or Alt+,) on your keyboard.
To accept a suggestion, click "Accept" in the Copilot command palette, or press Tab. To reject all suggestions, press Esc.
Getting comment suggestions
Note


Comment suggestions are currently in public preview and are subject to change.
Comment suggestions are available in Visual Studio 17.14 Preview 2 and later.


GitHub Copilot can suggest comments for your code, by analyzing the code you write and generating comments that describe what the code does. For Copilot Free users, comment suggestions count towards your monthly Copilot Chat usage, not your code suggestions usage.
Comment suggestions are available in the following languages:

C#
C++

Enabling comment suggestions
To enable comment suggestions, you need to configure the comment style in Visual Studio.
For C++

In Visual Studio, in the Tools menu, click Options.
In the left-side panel, click Text Editor.
Click C++, then Code Style, then General.
Under "Comments", select Xml Doc Comments from the dropdown.
Select Insert existing comment style at the start of new lines when writing comments and Continue single line comments.

For C#

In Visual Studio, in the Tools menu, click Options.
In the left-side panel, click Text Editor.
Click C#, then Advanced.
Under "Comments", select Generate XML documentation comments for ///, Insert // at the start of new lines when writing // comments, and Insert * at the start of new lines when writing /* */ comments.

Using comment suggestions
To initiate comment suggestions, type the standard comment initiator for the language you are writing in (for example, ///), before the code you want to comment, and wait for the suggestion to appear.
To accept the suggestion, press Tab. To modify the suggestion, press Alt+/. To reject the suggestion, press Esc.


About GitHub Copilot and Visual Studio Code
This guide demonstrates how to get coding suggestions from GitHub Copilot in Visual Studio Code. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
Copilot in VS Code provides two kinds of suggestions:

Code completions. Copilot offers coding suggestions as you type. You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal.
Next edit suggestions (public preview). Based on the edits you are making, Copilot will predict the location of the next edit you are likely to make and suggest a completion for it.

The examples in this guide use JavaScript, however other languages will work similarly. GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, but works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++. GitHub Copilot can also assist in query generation for databases, generating suggestions for APIs and frameworks, and can help with infrastructure as code development.
Prerequisites


Access to Copilot. To use GitHub Copilot in Visual Studio Code, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


Sign in to GitHub in Visual Studio Code. See Set up GitHub Copilot in Visual Studio Code in the VS Code documentation..


Visual Studio Code. To use GitHub Copilot in Visual Studio Code, you must have Visual Studio Code installed. For more information, see the Visual Studio Code download page.


Copilot in Visual Studio Code. When you set up GitHub Copilot in Visual Studio Code for the first time, the required extensions are installed automatically. You don't need to download or install them manually. For detailed instructions, see Set up GitHub Copilot in Visual Studio Code in the Visual Studio Code documentation.


Getting code suggestions
GitHub Copilot offers coding suggestions as you type. For example, type this function header in a JavaScript file:
JavaScriptfunction calculateDaysBetweenDates(begin, end) {
function calculateDaysBetweenDates(begin, end) {

GitHub Copilot will automatically suggest the rest of the function. To accept the suggestion, press Tab.
You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal. For example, type this comment in a JavaScript file:
JavaScript// write a function to
// find all images without alternate text
// and give them a red border
// write a function to
// find all images without alternate text
// and give them a red border

GitHub Copilot will automatically suggest code. To accept the suggestion, press Tab.
Tip

If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information about duplication detection, see Managing Copilot policies as an individual subscriber.

Showing alternative suggestions
For any given input, GitHub Copilot may offer multiple suggestions. You can select which suggestion to use, or reject all suggestions.
For example, type this function header in a JavaScript file, and press Enter:
JavaScriptfunction calculateDaysBetweenDates(begin, end) {
function calculateDaysBetweenDates(begin, end) {

GitHub Copilot will show you a suggestion.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To display next or previous suggestions, click the forward or back arrow button in the control.
You can also use keyboard shortcuts to show alternative suggestions:




















OSSee next suggestionSee previous suggestionmacOSOption (⌥) or Alt+]Option (⌥) or Alt+[Windows or LinuxAlt+]Alt+[
To accept a suggestion, click "Accept" in the Copilot command palette, or press Tab. To reject all suggestions, press Esc.
Showing multiple suggestions in a new tab
If you don't want to use any of the initial suggestions GitHub Copilot offers, you can show multiple suggestions in a new tab.
For example, type this function header in a JavaScript file, and press Enter:
JavaScriptfunction calculateDaysBetweenDates(begin, end) {
function calculateDaysBetweenDates(begin, end) {

GitHub Copilot will show you a suggestion. Now press Ctrl+Enter to open a new tab with multiple additional options.
To accept a suggestion, below the suggestion, click Accept suggestion NUMBER. To reject all suggestions, close the tab.
Accepting partial suggestions
If you don't want to accept an entire suggestion from GitHub Copilot, you can accept the next word or the next line of a suggestion.
For example, type this function header in a JavaScript file, and press Enter:
JavaScriptfunction calculateDaysBetweenDates(begin, end) {
function calculateDaysBetweenDates(begin, end) {

GitHub Copilot will automatically suggest an entire function body in grayed text. The exact suggestion may vary.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To accept only the next word of the suggestion, click Accept Word in the control.
Alternatively, you can use a keyboard shortcut to accept the next word of a suggestion:

















OSAccept Next WordmacOSCommand+→Windows or LinuxControl+→
If you want to accept the next line of a suggestion, you will need to set a custom keyboard shortcut for the command editor.action.inlineSuggest.acceptNextLine. For more information on setting custom keyboard shortcuts, see Configuring GitHub Copilot in your environment.
About next edit suggestions
Inline suggestions autocomplete code, but many development tasks involve editing existing code. Next edit suggestions assists with edits both at the cursor and in other relevant parts of the code, helping maintain consistency and streamline changes.
Next edit suggestions predicts where and what edits may be needed based on ongoing changes. Suggestions may span a single symbol, an entire line, or multiple lines, depending on the scope of the potential change.
To enable next edit suggestions, see Configuring GitHub Copilot in your environment.
Navigating and accepting suggestions
You can navigate suggested code changes using Tab, making it easier to find the next relevant edit without manually searching through files or references. Press Tab again to accept a suggestion.
An arrow in the gutter indicates an available edit suggestion. Hover over the arrow to access the edit suggestion menu, which provides keyboard shortcuts and settings options. If an edit suggestion is outside the current editor view, the arrow will point up or down to indicate where the next suggestion is.

For more details and examples, see Code completions with GitHub Copilot in VS Code in the Visual Studio Code documentation.
Changing the AI model
You can change the large language model that's used to generate code completion suggestions. For more information, see Changing the AI model for Copilot code completion.


About GitHub Copilot and Vim/Neovim
This guide demonstrates how to get coding suggestions from GitHub Copilot in Vim/Neovim. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
Prerequisites


Access to Copilot. To use GitHub Copilot in Vim/Neovim, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


Compatible version of Vim/Neovim. To use GitHub Copilot in Vim/Neovim you must have Vim version 9.0.0185 / Neovim version 0.6 or above and Node.js version 18 or above installed. For more information, see the Vim / Neovim documentation and the Node.js website.


GitHub Copilot extension for Vim/Neovim. To use GitHub Copilot in Vim/Neovim, you must install the GitHub Copilot plugin. For more information, see Installing the GitHub Copilot extension in your environment.


Learning to use GitHub Copilot in Vim/Neovim
GitHub Copilot provides suggestions inline as you type in Vim/Neovim. To accept a suggestion, press the tab key.
For more information and guidance on using GitHub Copilot in Vim/Neovim run the following command to view the plugin documentation:
Shell:help copilot
:help copilot



About GitHub Copilot and Azure Data Studio
This guide demonstrates how to get coding suggestions from GitHub Copilot in Azure Data Studio. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
Prerequisites


Access to Copilot. To use GitHub Copilot in Azure Data Studio, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


Compatible version of Azure Data Studio. To use GitHub Copilot in Azure Data Studio, you must have Azure Data Studio version 1.44.0 or later installed. For more information, see the Azure Data Studio download page in the Azure Data Studio documentation.


GitHub Copilot extension for Azure Data Studio. To use GitHub Copilot in Azure Data Studio, you must install the GitHub Copilot extension. For more information, see Installing the GitHub Copilot extension in your environment.


Getting code suggestions
GitHub Copilot can provide you with inline suggestions as you create SQL databases in Azure Data Studio. For example, if you're writing a query that joins two tables, Copilot may suggest the join condition from columns in the open editor, other files in the workspace, and common syntax patterns.
In a SQL file, type the following query:
SQLSELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN
SELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN

GitHub Copilot will automatically suggest a join condition in grayed text. The exact suggestion may vary. To accept the suggestion, press Tab.
You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal. For example, type this comment in a SQL file:
SQLSELECT TokenColor, COUNT(UserID) AS UserCount
FROM Tag.Users
GROUP BY TokenColor
-- pivot that query on tokencolor for Purple, Blue, Green, Yellow, Orange, Red
-- and rename the columns to match the colors
SELECT [Purple], [Blue], [Green], [Yellow], [Orange], [Red]
SELECT TokenColor, COUNT(UserID) AS UserCount
FROM Tag.Users
GROUP BY TokenColor
-- pivot that query on tokencolor for Purple, Blue, Green, Yellow, Orange, Red
-- and rename the columns to match the colors
SELECT [Purple], [Blue], [Green], [Yellow], [Orange], [Red]

GitHub Copilot will automatically suggest code. To accept the suggestion, press Tab.
Tip

If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information on duplication detection, see Managing Copilot policies as an individual subscriber.

Showing alternative suggestions
For some suggestions, GitHub Copilot may provide multiple alternatives. You can select which suggestion you want to use, or reject all suggestions.
For example, type this query in a SQL file:
SQLSELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN
SELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN

GitHub Copilot will show you a suggestion.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To display next or previous suggestions, click the forward or back arrow button in the control.
You can also use keyboard shortcuts to show alternative suggestions:




















OSSee next suggestionSee previous suggestionmacOSOption+[Option+]Windows or LinuxAlt+[Alt+]
To accept a suggestion, click "Accept" in the Copilot control, or press Tab. To reject all suggestions, press Esc.
Accepting partial suggestions
If you don't want to accept an entire suggestion from GitHub Copilot, you can accept the next word or the next line of a suggestion.
For example, type this query in a SQL file:
SQLSELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN
SELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]
FROM [Tag].[Scoreboard]
INNER JOIN

GitHub Copilot will show you a suggestion in grayed text. The exact suggestion may vary.
Now hover over the suggestion to show the GitHub Copilot control for choosing suggestions. To accept only the next word of the suggestion, click Accept Word in the control.
Alternatively, you can use a keyboard shortcut to accept the next word of a suggestion:

















OSAccept Next WordmacOSCommand+→Windows or LinuxControl+→
If you want to accept the next line of the suggestion, you will need to set a custom keyboard shortcut for the command editor.action.inlineSuggest.acceptNextLine. For more information on setting custom keyboard shortcuts, see Keyboard shortcuts in Azure Data Studio in the Microsoft documentation.


About GitHub Copilot in Xcode
This guide demonstrates how to get coding suggestions from GitHub Copilot in Xcode. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
Prerequisites


Access to Copilot. To use GitHub Copilot in Xcode, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


GitHub Copilot extension for Xcode. To use GitHub Copilot for Xcode, you must install the GitHub Copilot for Xcode extension. See Installing the GitHub Copilot extension in your environment.


Getting code suggestions
GitHub Copilot offers coding suggestions as you type. For example, type this function
signature in a Swift file:
Swiftfunc calculateDaysBetweenDates(
func calculateDaysBetweenDates(

GitHub Copilot will automatically suggest an entire function body in grayed text. To accept the first line of a suggestion, press Tab. To view the full suggestion, hold Option, and to accept the full suggestion, press Option+Tab.
Improving code suggestions
If you encounter issues with code suggestions, such as conflicting or missing suggestions, you can try the following:

Disable Xcode's native predictive text completion: To avoid receiving two sets of code suggestions, you can disable Xcode's native predictive text completion. You can find this setting in the Xcode settings in the "Editing" tab under "Text Editing".
Check for duplication detection in Copilot: If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information on duplication detection, see Managing Copilot policies as an individual subscriber.
Check for updates and restart Xcode: Ensure you have the latest version of Copilot for Xcode in the extension application and restart Xcode.

You can also open an issue in the Copilot for Xcode repository.


About GitHub Copilot and Eclipse
This guide demonstrates how to get coding suggestions from GitHub Copilot in Eclipse. To see instructions for other popular coding environments, use the tool switcher at the top of the page.
Prerequisites


Access to Copilot. To use GitHub Copilot in Eclipse, you need either limited access through Copilot Free or a paid Copilot plan for full access. For information about how to get access to Copilot, see What is GitHub Copilot?.


GitHub Copilot extension for Eclipse.To use GitHub Copilot in Eclipse, you must install the GitHub Copilot extension. See Installing the GitHub Copilot extension in your environment.


Getting code suggestions
GitHub Copilot offers coding suggestions as you type. For example, type this function header in a Java file:
Javapublic int getDiff(int a, int b)
public int getDiff(int a, int b)

GitHub Copilot will automatically suggest the rest of the function. To accept the suggestion, press Tab.
To discard the suggestion, press Esc.
You can also describe something you want to do using natural language within a comment, and Copilot will suggest the code to accomplish your goal. For example, type this comment in a Java file:
Java/*
 * Return the difference between two different integers.
 */
/*
 * Return the difference between two different integers.
 */

GitHub Copilot will automatically suggest code.
Tip

If you receive limited or no suggestions from Copilot, you may have duplication detection enabled. For more information about duplication detection, see Managing Copilot policies as an individual subscriber.

Manually triggering code completion
You can also use keyboard shortcuts to trigger code completion.

















OSTrigger code completionmacOSOption+Command+/Windows or LinuxCtrl+Alt+/
Accepting partial suggestions
If you don't want to accept an entire suggestion from Copilot, you can accept the next word of a suggestion.

















OSAccept next wordmacOSCommand+→Windows or LinuxCtrl+→

Next steps

Learn how to write effective prompts - See Prompt engineering for Copilot Chat.
Configure Copilot in your editor - You can enable or disable GitHub Copilot from within your editor, and create your own preferred keyboard shortcuts for Copilot. See Configuring GitHub Copilot in your environment.
Get started with GitHub Copilot Chat - Learn how to ask Copilot for information and assistance, using GitHub Copilot Chat. See Asking GitHub Copilot questions in your IDE.
Troubleshoot issues - Learn more about how to troubleshoot common issues with GitHub Copilot. See Troubleshooting GitHub Copilot.\n\n\n\nGitHub Copilot/Use GitHub Copilot/Copilot Chat/Prompt engineeringPrompt engineering for Copilot ChatFollow these strategies to improve your Copilot results.In this articleStart general, then get specificGive examplesBreak complex tasks into simpler tasksAvoid ambiguityIndicate relevant codeExperiment and iterateKeep history relevantFollow good coding practicesFurther readingA prompt is a request that you make to GitHub Copilot. For example, a question that you ask Copilot Chat, or a code snippet that you ask Copilot to complete. In addition to your prompt, Copilot uses additional context, like the code in your current file and the chat history, to generate a response.
Follow the tips in this article to write prompts that generate better responses from Copilot.
Start general, then get specific
When writing a prompt for Copilot, first give Copilot a broad description of the goal or scenario. Then list any specific requirements.
For example:

Write a function that tells me if a number is prime
The function should take an integer and return true if the integer is prime
The function should error if the input is not a positive integer

Give examples
Use examples to help Copilot understand what you want. You can provide example input data, example outputs, and example implementations.
For example:

Write a function that finds all dates in a string and returns them in an array. Dates can be formatted like:

05/02/24
05/02/2024
5/2/24
5/2/2024
05-02-24
05-02-2024
5-2-24
5-2-2024

Example:
findDates("I have a dentist appointment on 11/14/2023 and book club on 12-1-23")
Returns: ["11/14/2023", "12-1-23"]

Unit tests can also serve as examples. Before writing your function, you can use Copilot to write unit tests for the function. Then, you can ask Copilot to write a function described by those unit tests.
Break complex tasks into simpler tasks
If you want Copilot to complete a complex or large task, break the task into multiple simple, small tasks.
For example, instead of asking Copilot to generate a word search puzzle, break the process down into smaller tasks, and ask Copilot to accomplish them one by one:

Write a function to generate a 10 by 10 grid of letters.
Write a function to find all words in a grid of letters, given a list of valid words.
Write a function that uses the previous functions to generate a 10 by 10 grid of letters that contains at least 10 words.
Update the previous function to print the grid of letters and 10 random words from the grid.

Avoid ambiguity
Avoid ambiguous terms. For example, don’t ask "what does this do" if "this" could be the current file, the last Copilot response, or a specific code block. Instead, be specific:

What does the createUser function do?
What does the code in your last response do?

Ambiguity can also apply to libraries:

If you are using an uncommon library, describe what the library does.
If you want to use a specific library, set the import statements at the top of the file or specify what library you want to use.

Indicate relevant code
If you are using Copilot in your IDE to get suggestions as you code, open any relevant files and close irrelevant files. Copilot will use the open files to understand your request.
If you are using Copilot Chat in your IDE, open the file or highlight the code that you want Copilot to reference. You can also use keywords to manually supply context to Copilot Chat. For example, you can add the @workspace chat participant in VS Code, or @project in JetBrains IDEs. See GitHub Copilot Chat cheat sheet.
Experiment and iterate
If you don’t get the result that you want, iterate on your prompt and try again.
If you are using Copilot to get suggestions as you code, you can delete the suggestion entirely and start over. Or you can keep the suggestion and request modifications.
If you are using Copilot Chat, you can reference the previous response in your next request. Or, you can delete the previous response and start over.
Keep history relevant
Copilot Chat uses the chat history to get context about your request. To give Copilot only the relevant history:

Use threads to start a new conversation for a new task
Delete requests that are no longer relevant or that didn’t give you the desired result

Follow good coding practices
If you aren't getting the responses you want when you ask Copilot for suggestions or explanations in your codebase, make sure that your existing code follows best practices and is easy to read. For example:

Use a consistent code style and patterns
Use descriptive names for variables and functions
Comment your code
Structure your code into modular, scoped components
Include unit tests

Tip

Use Copilot to help your code follow best practices. For example, ask Copilot to add comments or to break a large function into smaller functions.

Further reading

How to use GitHub Copilot: Prompts, tips, and use cases in the GitHub blog
Using GitHub Copilot in your IDE: Tips, tricks, and best practices in the GitHub blog
A developer’s guide to prompt engineering and LLMs in the GitHub blog
Prompting GitHub Copilot Chat to become your personal AI assistant for accessibility in the GitHub blog\n\n\n\nGitHub Copilot/Use GitHub Copilot/Copilot Chat/Chat in GitHubAsking GitHub Copilot questions in GitHubYou can use GitHub Copilot Chat in GitHub to answer general questions about software development, or specific questions about the issues or code in a repository.In this articleOverviewPowered by skillsCustomizing Copilot Chat responsesAI models for Copilot ChatSubmitting a question to Copilot ChatAsking Copilot Chat questions in different contextsAsking Copilot Chat questions in a repositoryAsking Copilot Chat questions about a specific file or symbolAsking Copilot Chat questions about specific pieces of codeAsking questions about alerts from GitHub Advanced Security productsAsking questions about a specific pull requestAsking a question about a specific issue or discussionAsking a question about a specific commitUsing images in Copilot ChatAccessing Copilot Chat from the search barAccessing Copilot Chat from the dashboardExtending Copilot Chat in GitHubSharing Copilot Chat conversationsSharing feedback about GitHub Copilot Chat in GitHubFurther readingOverview
GitHub Copilot Chat in GitHub is a chat interface that lets you ask and receive answers to coding-related questions on the GitHub website.
Copilot Chat can help you with a variety of coding-related tasks, like offering you code suggestions, providing natural language descriptions of a piece of code's functionality and purpose, generating unit tests for your code, and proposing fixes for bugs in your code. For more information, see Asking GitHub Copilot questions in GitHub.
On GitHub, you can use Copilot Chat to ask different questions in different contexts. For example, you can ask about a specific repository, a specific issue, or a specific pull request. You can also ask general questions about software development, or about a specific programming language.
Limitations
The quality of the results from Copilot Chat may, in some situations, be degraded if very large files, or a large number of files, are used as a context for a question.
Viewing and editing generated files within Copilot Chat
Note

This feature is currently in public preview and subject to change.

When you ask a question, Copilot may generate one or more files as part of its response. In the Copilot Chat panel, the files are displayed inline, within the chat response. In immersive view (that is, at https://github.com/copilot), the generated files are displayed in a side panel. You can view and edit the files in the panel, or download them to your computer.
For example, asking Generate a simple calculator using HTML, CSS, and JavaScript may generate multiple files, such as index.html, styles.css, and script.js.
In immersive view, you can also preview how some file formats, such as Markdown, render by toggling to the "Preview" tab in the side panel.
Powered by skills
When using the GPT-4o and Claude Sonnet models, Copilot has access to a collection of skills to fetch data from GitHub, which are dynamically selected based on the question you ask. You can tell which skill Copilot used by clicking  to expand the status information in the chat window.

You can explicitly ask GitHub Copilot Chat in GitHub to use a particular skill - for example, Use the Bing skill to find the latest GPT4 model from OpenAI.
You can generate a list of currently available skills by asking Copilot: What skills are available?
Customizing Copilot Chat responses
GitHub Copilot can provide chat responses that are tailored to the way your team works, the tools you use, the specifics of your project, or your personal preferences, if you provide it with enough context to do so. Instead of repeating instructions in each prompt, you can create and save instructions for Copilot Chat to customize what responses you receive.
There are two types of custom instructions you can add for Copilot Chat:

Repository instructions: You can create a custom instructions file for a repository, so that all prompts asked in the context of the repository automatically include the instructions you've defined
Personal instructions: You can add personal instructions so that all the chat responses you, as a user, receive are tailored to your preferences

For more information, see Adding repository custom instructions for GitHub Copilot and Adding personal custom instructions for GitHub Copilot.
AI models for Copilot Chat
You can change the large language model that Copilot uses to generate responses to chat prompts, including premium models with advanced capabilities. You may find that different models perform better, or provide more useful responses, depending on the type of questions you ask. For more information see Changing the AI model for Copilot Chat.
Submitting a question to Copilot Chat
You can open Copilot Chat from any page on GitHub. Certain questions may require you to be in a specific context, such as a repository, issue, or pull request. The following procedure describes how to ask a general software related question, and demonstrates the core functionality of Copilot Chat on GitHub. For more information on other scenarios, see Asking Copilot Chat questions in different contexts.
Depending on the question you ask, and your enterprise and organization settings, Copilot may respond using information based on the results of a Bing search. By using Bing search, Copilot can answer a broad range of tech-related questions with up-to-date details based on information currently available on the internet. For information on how to enable or disable Bing search integration, see Managing Copilot policies as an individual subscriber and Managing policies and features for Copilot in your enterprise.


At the top right of any page on GitHub, click  beside the  icon and click Immersive in the dropdown menu.



At the bottom of the page, in the "Ask Copilot" box, type a question and press Enter.
Some examples of general questions you could ask are:

What are the advantages of the Go programming language?
What is Agile software development?
What is the most popular JavaScript framework?
Give me some examples of regular expressions.
Write a bash script to output today's date.



Optionally, after submitting a question, you can click  in the text box to stop the response.


If Copilot uses a Bing search to answer your question, "Using web search results for 'SEARCH QUERY'" is displayed above the response. Click this to see the search results that Copilot used to answer your question.


Within a conversation thread, you can ask follow-up questions. Copilot will answer within the context of the conversation. For example, you could type "tell me more" to get Copilot to expand on its last comment.
You can use your initial question as a foundation for follow-up questions. A detailed foundational prompt can help Copilot provide more relevant answers to your follow-up questions. For more information, see Prompting GitHub Copilot Chat to become your personal AI assistant for accessibility on the GitHub Blog.


To start a new conversation, click  at the top left of the page.


To see a list of your previous conversations, click  at the top left of the page.


Regenerating a response with a different model
Note

This feature is currently in public preview and is subject to change.

After Copilot responds to your question, you can regenerate the same prompt using a different model by clicking the retry icon () below the response. The new response will use your selected model and maintain the full context of the conversation.
You can switch between responses to compare the results from different models.
For help deciding which model to use, see Choosing the right AI model for your task.
Using subthreads in a conversation
Note

Subthreading in Copilot Chat is currently in public preview and is subject to change.

Subthreads are branches of a conversation that are created from a point in a conversation where you asked a question. Subthreads offer more control and flexibility for exploring aspects of a topic, or new topics, all within the same thread.
You can create and navigate through subthreads in Copilot Chat's immersive view. In the Copilot Chat panel, if you open a conversation that contains subthreads, only the most recently edited subthread is displayed.
You can create a subthread in immersive mode by either editing or retrying any of your questions in the conversation.
To edit a question:


Hover over the question you want to edit.


Click the  button that's displayed.



Edit the question, then click Send.


Note

You can only edit the text of a question. You can't edit any attachments.

To retry a question:


Hover over the response to a question you want to retry. Resubmitting a question to Copilot may generate a different response.


Click the  button.



The response to your edited or retried question is displayed in a new subthread.
To navigate between subthreads:


If you have retried a question, a retry counter is displayed under the response, alongside the retry button.

Click  or  to navigate to the previous or next subthread.


If you have edited a question, an edit counter is added below the question.

Hover over the counter to display the edit and navigation buttons, then click  or  to navigate to the previous or next subthread.


Asking Copilot Chat questions in different contexts
You can ask Copilot Chat different types of questions depending on where you are on GitHub. For example, to ask a question about a specific repository, you must be in the context of that repository. The following sections describe how to access the different contexts.
For examples of the types of questions you can ask in different contexts, see Getting started with prompts for Copilot Chat.
Asking Copilot Chat questions in a repository
To ask a question about a specific repository, you must be viewing the repository on GitHub.


Navigate to a repository on GitHub.


At the top right of the page, click the  GitHub Copilot icon next to the search bar.
Copilot Chat will open a new conversation, with the repository you are viewing selected as the context for your question.



At the bottom of the panel, in the "Ask Copilot" box, type a question and press Enter.
Note

Copilot's ability to answer natural language questions in a repository context is improved when the repository has been indexed for semantic code search. The indexing status of the repository is displayed when you start a conversation that has a repository context. For more information, see Indexing repositories for Copilot Chat.



Asking Copilot Chat questions about a specific file or symbol
You can ask Copilot about a specific file, folder, or symbol within a repository.
Note
 A "symbol" is a named entity in code. This could be a variable, function, class, module, or any other identifier that's part of a codebase.



At the top right of the page, click the  GitHub Copilot icon next to the search bar.


To select a repository for context, click  at the bottom of the chat panel, then select "Repositories".



Once the repository has been attached, click  again, then select "Files, folders, and symbols".


Search for and select one or more files, folders, or symbols.


In the "Ask Copilot" box, type a question and press Enter.
Copilot replies in the chat panel.
Tip

Copilot's ability to answer natural language questions like these in a repository context is optimized when the semantic code search index for the repository is up to date. For more information, see Indexing repositories for Copilot Chat.



Asking Copilot Chat questions about specific pieces of code
You can chat with Copilot about a file in your repository, or about specific lines of code within a file.


On GitHub, navigate to a repository and open a file.


Do one of the following:


To ask a question about the entire file, click the Copilot icon () at the top right of the file view.



To ask a question about specific lines within the file:

Select the lines by clicking the line number for the first line you want to select, holding down Shift and clicking the line number for the last line you want to select.
To ask your own question about the selected lines, click the Copilot icon () to the right of your selection.
This displays the GitHub Copilot Chat panel with the selected lines indicated as the context of your question.
To ask a predefined question, click the downward-pointing button beside the Copilot icon, then choose one of the options.






If you clicked the Copilot icon, type a question in the "Ask Copilot" box at the bottom of the chat panel and press Enter.
Copilot responds to your request in the panel.



Asking questions about alerts from GitHub Advanced Security products
Copilot allows you to use natural language questions to ask about security alerts in repositories in your organization when these alerts are generated by GitHub Advanced Security features (code scanning, secret scanning, and Dependabot alerts).


At the top right of any page on GitHub, click  beside the  icon and click Immersive in the dropdown menu.



To select a repository for context, click  at the bottom of the chat panel, then select "Repositories".



In the "Search repositories" box, type the name of the repository you want to ask about, then click the repository in the list of search results.


In the "Ask Copilot" box, type a question and press Enter.

Tip

Copilot's ability to answer natural language questions like these in a repository context is optimized when the semantic code search index for the repository is up to date. For more information, see Indexing repositories for Copilot Chat.



Asking questions about a specific pull request
You can ask Copilot different questions about a pull request, from different views within the pull request. For example, you can ask Copilot to summarize a pull request, or explain what has changed within specific files or lines of code in a pull request.
Get a summary of a pull request

On GitHub, navigate to a pull request in a repository.
At the top right of the page, click the  GitHub Copilot icon next to the search bar.
If the panel contains a previous conversation you had with Copilot, click the  plus sign icon at the top right of the Copilot panel to start a new conversation.
At the bottom of the Copilot Chat panel, in the "Ask Copilot" box, type a question and press Enter.

Ask about changes to a specific file in a pull request

On GitHub, navigate to a pull request in a repository.
Click the Files changed tab.
Click  at the top right of the file, then click Ask Copilot about this diff.
Type a question in the "Ask Copilot" box at the bottom of the chat panel and press Enter.

Ask about specific lines within a file in a pull request

On GitHub, navigate to a pull request in a repository.
Click the Files changed tab.
Click the line number for the first line you want to select, then hold down Shift and click the line number for the last line you want to select.
Ask Copilot a question, or choose from a list of predefined questions.

To ask your own question about the selected lines, to the right of your selection, click the  Copilot icon.
This displays the GitHub Copilot Chat panel with the selected lines indicated as the context of your question.



Ask why a workflow has failed

On GitHub, navigate to a pull request in a repository.
Scroll to the bottom of the page, then, next to one of the failing checks, click Details.
At the top right of the page, click the  GitHub Copilot icon next to the search bar.
If the panel contains a previous conversation you had with Copilot, click the  plus sign icon at the top right of the Copilot panel to start a new conversation.
At the bottom of the Copilot Chat panel, in the "Ask Copilot" box, ask Copilot why the pull request has failed and press Enter.

Copilot will respond with information about why the pull request failed. Copilot may also provide suggestions for how to fix the issue.

If Copilot has provided steps to fix the issue, you can follow the steps to resolve the problem.

Asking a question about a specific issue or discussion
You can ask Copilot to summarize or answer questions about a specific issue or discussion.
Note
 The quality of Copilot Chat's responses may be degraded when working with issues or discussions that have very long bodies or a large number of comments. For example, this may occur if you ask Copilot to summarize a long-running discussion. Where this happens, Copilot will warn you so you can double check its output.



Navigate to an issue or discussion on GitHub.


At the top right of the page, click the  GitHub Copilot icon next to the search bar.


If the panel contains a previous conversation you had with Copilot, click the  plus sign icon at the top right of the Copilot panel to start a new conversation.


At the bottom of the Copilot chat panel, in the "Ask Copilot" box, type a question and press Enter.
Copilot responds to your request in the panel.
Tip
 Instead of navigating to an issue or discussion in your browser to ask a question, you can include the relevant URL in your message. For example, Summarize https://github.com/monalisa/octokit/issues/1.



Asking a question about a specific commit
You can ask Copilot to explain the changes in a commit.


Navigate to a commit on GitHub.


At the top right of the page, click the  GitHub Copilot icon next to the search bar.


If the panel contains a previous conversation you had with Copilot, click the  plus sign icon at the top right of the Copilot panel to start a new conversation.


At the bottom of the Copilot chat panel, in the "Ask Copilot" box, type a question and press Enter.
Tip

If you know the SHA for a commit, instead of navigating to the commit, you can ask Copilot about the commit from any page in the repository on GitHub by including the SHA in your message. For example, What changed in commit a778e0eab?



Optionally, after submitting a question, you can click  in the text box to stop the response.


Using images in Copilot Chat
Note


Attaching images to chat prompts is currently in public preview and is subject to change.
You can only attach an image in the immersive view of Copilot Chat (https://github.com/copilot), not in the chat panel.


You can attach an image to Copilot and then ask about the image. For example, you can attach:

A screenshot of a code snippet and ask Copilot to explain the code.
A mockup of the user interface for an application and ask Copilot to generate the code.
A flowchart and ask Copilot to describe the processes shown in the image.
A screenshot of a web page and ask Copilot to generate HTML for a similar page.

Note

The following types of image file are supported: JPEG (.jpg, .jpeg), PNG (.png), GIF (.gif), or WEBP (.webp).

Attaching an image to your chat prompt


Go to the immersive view of Copilot Chat (https://github.com/copilot).


If you see the AI model picker at the top of the page, select one of the models that supports adding images to prompts:

GPT-4o (the default that's used if you don't see a model picker)
Claude 3.5 Sonnet
Claude 3.7 Sonnet
Gemini 2.0 Flash
Gemini 2.5 Pro




Do one of the following:

Copy an image and paste it into the prompt box at the bottom of the page.
Click  in the prompt box, then click Image. Browse to the image file you want to attach, select it and click Open.
Drag and drop an image file from your operating system's file explorer into the prompt box.



Type your prompt into the chat view to accompany the image. For example, explain this diagram, describe each of these images in detail, what does this error message mean.


Accessing Copilot Chat from the search bar
You can ask Copilot a question about an entire repository by typing your question in the main search box of the repository.


Navigate to a repository on GitHub.


Press /, or click in the main search box at the top of the page.


In the search box, after repo:OWNER/REPO, type the question you want to ask Copilot.
For example, you could enter:

What does this repo do?
Where is authentication implemented in this codebase?
How does license file detection work in this repo?



Click Ask Copilot.

The GitHub Copilot Chat panel is displayed and Copilot responds to your request.


Optionally, after submitting a question, you can click  in the text box to stop the response.


Accessing Copilot Chat from the dashboard
You can access Copilot's immersive view from the dashboard. The dashboard is your personalized overview of your activity on GitHub, seen when you visit https://github.com while logged in.


Go to the dashboard at https://github.com.


In the "Ask Copilot" box, type a question and press Enter.

You will be taken to the immersive view where Copilot will respond to your request.


Extending Copilot Chat in GitHub
GitHub Copilot Extensions integrate the power of external tools into Copilot Chat, helping you reduce context switching and receive responses with domain-specific context. You can install Copilot Extensions from the GitHub Marketplace or build private ones within your organization, then type @ in a chat window to see a list of your available extensions. To use an extension, select the extension from the list or type the full slug name, then type your prompt.
To learn more, see Using extensions to integrate external tools with Copilot Chat.
Sharing Copilot Chat conversations
Note
 This feature is currently in public preview and subject to change. During the public preview, this feature is only available to users without enterprise or team memberships.

You can share Copilot Chat conversations from the immersive view (https://github.com/copilot). Shared conversations are public or private (i.e. permission-based), depending on the referenced content, for example, a conversation about a private repository. If you share a private conversation, the recipient must have the necessary permissions to view the content.
Once you share a conversation, the recipient can view the conversation, and continue it from the point you shared it. Any changes made to the conversation after you share it are not included in the shared link.


In the top right of any page on GitHub, click the  GitHub Copilot icon next to the search bar.


To view a conversation in immersive mode, click  Immersive.


Once you submit your first prompt, a share button will appear in the upper right corner. Click  Share to open the share dialog.



To share the conversation, click Share. This will generate a link to the conversation.


To copy the conversation link, click the  copy icon. The link is copied to your clipboard.


Sharing feedback about GitHub Copilot Chat in GitHub
Note
 The ability to provide feedback to GitHub about Copilot pull request summaries is dependent on enterprise settings. For more information, see Managing policies and features for Copilot in your enterprise.

To give feedback about a particular Copilot Chat response, click either the thumbs up or thumbs down icon at the bottom of each chat response.
To give feedback about Copilot Chat in general, click the ellipsis (...) at the top right of the chat panel, then click  Give feedback.
Further reading

Asking GitHub Copilot questions in your IDE.
Asking GitHub Copilot questions in GitHub Mobile.\n\n\n\nGitHub Copilot/Copilot Chat CookbookCopilot Chat CookbookFind examples of prompts to use with GitHub Copilot Chat.SpotlightGenerate unit testsCopilot Chat can help with generating unit tests for a function.Improving code readability and maintainabilityLearn how to improve your code readability and maintainability.Debugging invalid JSONCopilot can identify and resolve syntax errors or structural issues in JSON data.Explore 23 prompt articlesCategory: AllComplexity: AllReset filtersDebugging invalid JSONCopilot Chat can identify and resolve syntax errors or structural issues in JSON data.Debugging codeIntermediateHandling API rate limitsCopilot Chat can help handle API  rate limits by suggesting code that detects implements retry logic.Debugging codeIntermediateExploring potential feature implementationsCopilot Chat can help explore different approaches for implementing a single feature.Functionality analysisIntermediateAnalyzing and incorporating user feedbackCopilot Chat can enhance the process of incorporating user feedback into your project.Functionality analysisIntermediateImproving code readability and maintainabilityCopilot Chat can suggest ways to make your code easier to understand and maintain.Refactoring codeSimpleFixing lint errorsCopilot Chat can suggest ways to fix issues identified by a code linter.Refactoring codeIntermediateRefactoring for performance optimizationCopilot Chat can suggest ways to speed up slow-running code.Refactoring codeSimpleRefactoring to implement a design patternCopilot Chat can suggest design patterns that you can use to improve your code.Refactoring codeIntermediateRefactoring data access layersCopilot Chat can suggest ways to decouple your data access code from your business logic, making an application easier to maintain and scale.Refactoring codeAdvancedDecoupling business logic from UI componentsCopilot Chat can help you separate your business logic from your user interface code, making it easier to maintain and scale your application.Refactoring codeAdvancedHandling cross-cutting concernsCopilot Chat can help you avoid code that relates to a concern other than the core concern of the method or function in which the code is located.Refactoring codeIntermediateSimplifying complex inheritance hierarchiesCopilot Chat can help you to refactor code to avoid classes with multiple layers of inheritance.Refactoring codeIntermediateFixing database deadlocks or data integrity issuesCopilot Chat can help you avoid code that causes slow or blocked database operations, or tables with missing or incorrect data.Refactoring codeAdvancedTranslating code to a different programming languageCopilot Chat can help you rewrite code to perform the same operations but in a different programming language.Refactoring codeSimpleDocumenting legacy codeCopilot Chat can help with documenting legacy code.Documenting codeSimpleExplaining legacy codeCopilot Chat can help with explaining unfamiliar code.Documenting codeSimpleExplaining complex algorithms or logicCopilot Chat can help add clear and concise documentation on complex algorithms or logic.Documenting codeIntermediateSyncing documentation with code changesCopilot Chat can help with keeping code documentation up-to-date.Documenting codeIntermediateWriting discussions or blog postsCopilot Chat can help you generate ideas, outline, or draft discussions or blog posts.Documenting codeSimpleGenerate unit testsCopilot Chat can help with generating unit tests for a function.Testing codeIntermediateCreate mock objects to abstract layersCopilot Chat can help with creating mock objects that you can use for unit tests.Testing codeIntermediateCreate end-to-end tests for a webpageCopilot Chat can help with generating end-to-end tests.Testing codeAdvancedFinding existing vulnerabilities in codeCopilot Chat can help find common vulnerabilities in your code and suggest fixes.Security analysisIntermediate\n\n\n\nGitHub Copilot/Build Copilot Extensions/Extensions quickstartQuickstart for GitHub Copilot Extensions using agentsBuild and try out GitHub's Blackbeard extension to learn about the development process for GitHub Copilot Extensions.Tool navigationBashCodespacesVisual Studio CodeIn this article1. Create and install a GitHub App2. Clone and host the Blackbeard agent locally3. Integrate and test the Blackbeard extension2. Clone and host the Blackbeard agent in a codespace3. Integrate and test the Blackbeard extension2. Clone and start the Blackbeard agent locally3. Expose your local server4. Integrate and test the Blackbeard extensionNext stepsThe Blackbeard extension is a GitHub Copilot Extension built with a simple agent that responds to requests like a pirate using Copilot's large language model (LLM) API and special system prompts. This guide uses a simple agent implementation, but the process is similar for skillsets.
This quickstart is designed to help you build and chat with the Blackbeard extension as quickly as possible, so you can develop and test your extension without deploying infrastructure. For production, you'll need to host the application for your agent or skillset's endpoints on a publicly accessible server. To instead learn how to create a new GitHub Copilot Extension, see Setting up Copilot Extensions.
1. Create and install a GitHub App
In the developer settings for your GitHub account, create a GitHub App. Your GitHub App must have:

A name
A homepage URL
Webhooks deselected

After you create your app, click Install App in the sidebar, then install your app on your account.
For detailed instructions, see Creating a GitHub App for your Copilot Extension.

2. Clone and host the Blackbeard agent locally
Rather than deploying the Blackbeard agent as a web app, you can host your agent locally for a significantly faster build process.

Using the Terminal built into VS Code, clone the copilot-extensions/blackbeard-extension repository.
In the same Terminal, run npm install to install the necessary dependencies, then run npm start to start the Blackbeard agent on port 3000.
In the "Ports" tab of the VS Code panel, click Forward a port or Add port, then add port 3000.
Right-click the port and set the visibility to "Public," then copy the local address.

3. Integrate and test the Blackbeard extension
After you set up your GitHub App and Blackbeard agent, you can integrate the agent with your app and test the Blackbeard extension. You need to make the following changes to your GitHub App settings:

In the "General" settings, in the "Callback URL" field, paste the local address for your agent.
In the "Permissions & events" settings, grant read-only permissions to Copilot Chat.
In the "Copilot" settings, set your app type to "Agent," then fill out the remaining fields.

After you update your GitHub App settings, you can start chatting with your extension by typing @YOUR-EXTENSION-NAME in the Copilot Chat window, then sending a prompt as normal.
For more detailed instructions, see Configuring your GitHub App for your Copilot extension.


2. Clone and host the Blackbeard agent in a codespace
Rather than deploying the Blackbeard agent as a web app, you can host your agent in a codespace for a significantly faster build process.

Navigate to the copilot-extensions/blackbeard-extension repository. Select the  Code  dropdown menu, then click Create codespace on main.
To find your new codespace, select the  Code  dropdown menu. Next to your new codespace, select , then click  Open in Browser.
In the integrated Terminal, run npm start to start the Blackbeard agent on port 3000.
In the "Ports" tab of the VS Code panel, click Forward a port, then add port 3000.
Right-click the port and set the visibility to "Public," then copy the local address.

3. Integrate and test the Blackbeard extension
After you set up your GitHub App and Blackbeard agent, you can integrate the agent with your app and test the Blackbeard extension. You need to make the following changes to your GitHub App settings:

In the "General" settings, in the "Callback URL" field, paste the forwarded address for your agent.
In the "Permissions & events" settings, grant read-only permissions to Copilot Chat.
In the "Copilot" settings, set your app type to "Agent," then fill out the remaining fields.

After you update your GitHub App settings, you can start chatting with your extension by typing @YOUR-EXTENSION-NAME in the Copilot Chat window of a supported client or IDE, then sending a prompt as normal. For a list of supported clients and IDEs, see About building Copilot Extensions.
Note
 Chatting with GitHub Copilot Extensions in GitHub Codespaces is not supported.

For more detailed instructions, see Configuring your GitHub App for your Copilot extension.


2. Clone and start the Blackbeard agent locally
Rather than deploying the Blackbeard agent as a web app, you can host your agent locally for a significantly faster build process.

Using your command line application, clone the copilot-extensions/blackbeard-extension repository.
Run npm install to install the necessary dependencies, then run npm start to start the Blackbeard agent on port 3000.

3. Expose your local server
To make the Blackbeard agent accessible to the Copilot platform and GitHub, you need to expose your local server so it's reachable by HTTP requests. You can use any port forwarding or tunneling service to achieve this. For the following steps, we'll use ngrok.


Navigate to ngrok's download page, then install the appropriate version of ngrok for your operating system.


Navigate to the ngrok setup and installation page, then log in or sign up for an ngrok account.


To expose your local server, in a new window of your command line application, run the following command:
Shellngrok http http://localhost:3000
ngrok http http://localhost:3000



In your command line application, next to "Forwarding," copy the URL that ngrok assigned to your server.


4. Integrate and test the Blackbeard extension
To integrate your GitHub App with the Blackbeard agent, you need to make the following changes to your app settings:

In the "General" settings, in the "Callback URL" field, paste the URL for your exposed server.
In the "Permissions & events" settings, grant read-only permissions to Copilot Chat.
In the "Copilot" settings, set your app type to "Agent," then fill out the remaining fields.

After you update your GitHub App settings, you can start chatting with your extension by typing @YOUR-EXTENSION-NAME in the Copilot Chat window, then sending a prompt as normal.
For more detailed instructions, see Configuring your GitHub App for your Copilot extension.

Next steps
Now that you have a working GitHub Copilot Extension, you can try building on the Blackbeard agent to experiment with agent development.
To learn about more complex agent implementations, you can also review the following example agents and software development kit (SDK), all of which are available in the copilot-extensions organization:

GitHub Models: A more complex agent that lets you ask about and interact with various LLMs listed on the GitHub Marketplace through Copilot Chat. The GitHub Models agent makes use of function calling.
Function Calling: An example agent written in Go that demonstrates function calling and confirmation dialogs.
RAG Extension: An example agent written in Go that demonstrates a simple implementation of retrieval augmented generation.
Preview SDK: An SDK that streamlines the development of Copilot Extensions by handling request verification, payload parsing, and response formatting automatically. This SDK allows extension builders to focus more on creating core functionality and less on boilerplate code.\n\n\n\nGitHub Actions documentation Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.Overview Quickstart Start hereView all Writing workflowsGitHub Actions workflows can automate tasks throughout the software development lifecycle.Use cases and examplesExample workflows that demonstrate the features of GitHub Actions.About continuous integration with GitHub ActionsYou can create custom continuous integration (CI) workflows directly in your GitHub repository with GitHub Actions.Deploying with GitHub ActionsLearn how to control deployments with features like environments and concurrency.PopularWorkflow syntax for GitHub ActionsA workflow is a configurable automated process made up of one or more jobs. You must create a YAML file to define your workflow configuration.Writing workflowsGitHub Actions workflows can automate tasks throughout the software development lifecycle.Use cases and examplesExample workflows that demonstrate the features of GitHub Actions.What's newView all GitHub Actions workflow security analysis with CodeQL is now generally availableApril 22Upcoming breaking changes and releases for GitHub ActionsApril 15Windows arm64 hosted runners now available in public previewApril 14GuidesUsing workflow templatesGitHub provides workflow templates for a variety of languages and tooling.@GitHubPublishing Node.js packagesYou can publish Node.js packages to a registry as part of your continuous integration (CI) workflow.@GitHubBuilding and testing PowerShellYou can create a continuous integration (CI) workflow to build and test your PowerShell project.@potatoqualiteeExplore guides All GitHub Actions docsAbout GitHub ActionsUnderstanding GitHub ActionsAbout continuous integration with GitHub ActionsAbout continuous deployment with GitHub ActionsWriting workflowsQuickstart for GitHub ActionsAbout workflowsUsing workflow templatesChoosing when your workflow runs • 3 articlesChoosing where your workflow runs • 2 articlesChoosing what your workflow does • 16 articlesWorkflow syntax for GitHub ActionsManaging workflow runs and deploymentsManaging workflow runs • 10 articlesManaging deployments • 5 articlesSharing automationsAvoiding duplicationCreating actions • 10 articlesReusing workflowsCreating workflow templates for your organizationSharing actions and workflows from your private repositorySharing actions and workflows with your organizationMonitoring and troubleshooting workflowsMonitoring workflows • 7 articlesTroubleshooting workflows • 4 articlesUsing GitHub-hosted runnersUsing GitHub-hosted runners • 3 articlesUsing larger runners • 4 articlesConnecting to a private network with GitHub-hosted runners • 3 articlesHosting your own runnersManaging self-hosted runners • 15 articlesManaging self-hosted runners with Actions Runner Controller • 7 articlesSecurity for GitHub ActionsSecurity guides • 5 articlesUsing artifact attestations • 4 articlesSecurity hardening your deployments • 9 articlesUse cases and examplesCreating an example workflowBuilding and testing • 12 articlesDeploying • 12 articlesPublishing packages • 5 articlesManaging projects • 5 articlesUsing containerized services • 3 articlesMigrating to GitHub ActionsUsing GitHub Actions Importer to automate migrations • 10 articlesManually migrating to GitHub Actions • 5 articlesAdministering GitHub ActionsUsage limits, billing, and administrationViewing GitHub Actions metricsSharing workflows, secrets, and runners with your organization\n\n\n\nGitHub Packages documentation Learn to safely publish and consume packages, store your packages alongside your code, and share your packages privately with your team or publicly with the open source community. You can also automate your packages with GitHub Actions.Quickstart Reference Start hereLearn GitHub PackagesYou can find out more about using packages in GitHub, including publishing new packages to GitHub Packages, view and install existing packages, and, in special circumstances, delete existing packages.Managing GitHub packages using GitHub Actions workflowsYou can safely publish and consume packages by building custom workflows that can also build, test, and deploy your code.Installing a packageYou can install a package from GitHub Packages and use the package as a dependency in your own project.PopularWorking with the npm registryYou can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.Learn GitHub PackagesYou can find out more about using packages in GitHub, including publishing new packages to GitHub Packages, view and install existing packages, and, in special circumstances, delete existing packages.Working with the Apache Maven registryYou can configure Apache Maven to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Java project.What's newView all Changes to token permission on packagesSeptember 26Fine-grained permissions and organization-level publishing are now available for the GitHub Packages RubyGems registryJanuary 10Fine-grained permissions and organization-level publishing are now available for the GitHub Packages NuGet registryDecember 09GuidesWorking with the Container registryYou can store and manage Docker and OCI images in the Container registry.@GitHubWorking with the npm registryYou can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.@GitHubWorking with the RubyGems registryYou can configure RubyGems to publish a package to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Ruby project with Bundler.@GitHubAll GitHub Packages docsLearn GitHub PackagesIntroduction to GitHub PackagesAbout permissions for GitHub PackagesConfiguring a package's access control and visibilityConnecting a repository to a packagePublishing a packageViewing packagesInstalling a packageDeleting and restoring a packageWorking with a GitHub Packages registryWorking with the Container registryWorking with the Docker registryWorking with the RubyGems registryWorking with the npm registryWorking with the Apache Maven registryWorking with the Gradle registryWorking with the NuGet registryMigrating to the Container registry from the Docker registryManaging GitHub packages using GitHub Actions workflowsPublishing and installing a package with GitHub ActionsExample workflows for publishing a packageAbout GitHub Packages and GitHub Actions\n\n\n\nGitHub Pages documentation Learn how to create a website directly from a repository on GitHub. Explore website building tools like Jekyll and troubleshoot issues with your GitHub Pages site.Quickstart Overview Start hereConfiguring a publishing source for your GitHub Pages siteYou can configure your GitHub Pages site to publish when changes are pushed to a specific branch, or you can write a GitHub Actions workflow to publish your site.Creating a GitHub Pages siteYou can create a GitHub Pages site in a new or existing repository.Managing a custom domain for your GitHub Pages siteYou can set up or update certain DNS records and your repository settings to point the default domain for your GitHub Pages site to a custom domain.PopularAbout custom domains and GitHub PagesGitHub Pages supports using custom domains, or changing the root of your site's URL from the default, like octocat.github.io, to any domain you own.About GitHub Pages and JekyllJekyll is a static site generator with built-in support for GitHub Pages.Troubleshooting custom domains and GitHub PagesYou can check for common errors to resolve issues with custom domains or HTTPS for your GitHub Pages site.Securing your GitHub Pages site with HTTPSHTTPS adds a layer of encryption that prevents others from snooping on or tampering with traffic to your site. You can enforce HTTPS for your GitHub Pages site to transparently redirect all HTTP requests to HTTPS.What's newView all GitHub Pages with Custom GitHub Actions Workflows are now generally availableMarch 25GitHub Pages: Deprecating symlinks in non-Actions buildsFebruary 21GitHub Pages: Deprecating the theme pickerAugust 23GuidesCreating a custom 404 page for your GitHub Pages siteYou can display a custom 404 error page when people try to access nonexistent pages on your site.@GitHubAdding a theme to your GitHub Pages site using JekyllYou can personalize your Jekyll site by adding and customizing a theme.@GitHubTroubleshooting Jekyll build errors for GitHub Pages sitesYou can use Jekyll build error messages to troubleshoot problems with your GitHub Pages site.@GitHubAll GitHub Pages docsGetting started with GitHub PagesWhat is GitHub Pages?Creating a GitHub Pages siteGitHub Pages limitsUsing custom workflows with GitHub PagesConfiguring a publishing source for your GitHub Pages siteDeleting a GitHub Pages siteUnpublishing a GitHub Pages siteCreating a custom 404 page for your GitHub Pages siteSecuring your GitHub Pages site with HTTPSUsing submodules with GitHub PagesTroubleshooting 404 errors for GitHub Pages sitesSetting up a GitHub Pages site with JekyllAbout GitHub Pages and JekyllCreating a GitHub Pages site with JekyllTesting your GitHub Pages site locally with JekyllAdding content to your GitHub Pages site using JekyllSetting a Markdown processor for your GitHub Pages site using JekyllAdding a theme to your GitHub Pages site using JekyllAbout Jekyll build errors for GitHub Pages sitesTroubleshooting Jekyll build errors for GitHub Pages sitesConfiguring a custom domain for your GitHub Pages siteAbout custom domains and GitHub PagesManaging a custom domain for your GitHub Pages siteVerifying your custom domain for GitHub PagesTroubleshooting custom domains and GitHub Pages\n\n\n\nSecure coding documentation Build security into your GitHub workflow to secure your software supply chain, automatically find and fix vulnerabilities in your codebase, and prevent data leaks.Overview Run a point-in-time scan to assess your organization's exposure to secret leaks Start hereQuickstart for securing your repositoryManage access to your code. Find and fix vulnerable code and dependencies automatically.Working with secret scanning and push protectionAvoid leaking sensitive data by blocking pushes containing tokens and other secrets.Dependabot quickstart guideFind and fix vulnerable dependencies you rely on with Dependabot.Configuring default setup for code scanningQuickly set up code scanning to find and fix vulnerable code automatically.PopularAbout the secret risk assessmentLearn why it's so important to understand your organization's exposure to data leaks and how the secret risk assessment report gives an overview of your organization’s secret leak footprint.About coordinated disclosure of security vulnerabilitiesVulnerability disclosure is a coordinated effort between security reporters and repository maintainers.Best practices for preventing data leaks in your organizationLearn guidance and recommendations to help you avoid private or sensitive data present in your organization from being exposed.Best practices for fixing security alerts at scaleGuidance on how to create successful security campaigns that engage developers and help them grow their understanding of secure coding.What's newView all CodeQL improves JavaScript and Ruby analysis in version 2.21.1April 24Updates to security configuration settings for customers in existing grace periodsApril 22GitHub Actions workflow security analysis with CodeQL is now generally availableApril 22GuidesPlanning a trial of GitHub Advanced SecurityMake the most of your trial so you can decide whether Advanced Security products meet your business needs.@GitHubEnabling secret scanning featuresLearn how to enable secret scanning to detect secrets that are already visible in a repository, as well as push protection to proactively secure you against leaking additional secrets by blocking pushes containing secrets.@GitHubConfiguring default setup for code scanningQuickly set up code scanning to find and fix vulnerable code automatically.@GitHubConfiguring Dependabot security updatesYou can use Dependabot security updates or manual pull requests to easily update vulnerable dependencies.@GitHubAll Secure coding docsGetting started with secure codingGitHub security featuresDependabot quickstart guideQuickstart for securing your repositoryAdding a security policy to your repositoryAuditing security alertsBest practices for preventing data leaks in your organizationUnderstanding GitHub secret typesTrialing GitHub Advanced SecurityPlanning a trial of GitHub Advanced SecurityEnabling security features in your trial enterpriseExploring your enterprise trial of GitHub Secret ProtectionExploring your enterprise trial of GitHub Code SecuritySecuring your organizationIntroduction to securing your organization at scale • 2 articlesEnabling security features in your organization • 5 articlesManaging the security of your organization • 7 articlesUnderstanding your organization's exposure to leaked secrets • 4 articlesFixing security alerts at scale • 4 articlesTroubleshooting security configurations • 2 articlesKeeping secrets secure with secret scanningIntroduction to secret scanning • 4 articlesEnabling secret scanning features • 3 articlesManaging alerts from secret scanning • 5 articlesWorking with secret scanning and push protection • 4 articlesUsing advanced secret scanning and push protection features • 5 articlesEnhance your secret detection capabilities with Copilot secret scanning • 4 articlesTroubleshooting secret scanning and push protection • 1 articlesSecret scanning partnership program • 1 articlesFinding security vulnerabilities and errors in your code with code scanningIntroduction to code scanning • 2 articlesEnabling code scanning • 3 articlesCreating an advanced setup for code scanning • 6 articlesManaging code scanning alerts • 9 articlesManaging your code scanning configuration • 15 articlesIntegrating with code scanning • 4 articlesTroubleshooting code scanning • 21 articlesTroubleshooting SARIF uploads • 6 articlesUse the CodeQL CLI to secure your codeGetting started with the CodeQL CLI • 6 articlesUsing the advanced functionality of the CodeQL CLI • 15 articlesCodeQL CLI commands manual • 75 articlesUse CodeQL inside Visual Studio CodeGetting started with the CodeQL for Visual Studio Code extension • 6 articlesUsing the advanced functionality of the CodeQL for VS Code extension • 9 articlesTroubleshooting CodeQL for VS Code • 2 articlesWorking with security advisoriesWorking with global security advisories from the GitHub Advisory Database • 4 articlesWorking with repository security advisories • 12 articlesGuidance on reporting and writing information about vulnerabilities • 4 articlesSecuring your software supply chainUnderstanding your software supply chain • 13 articlesEnd-to-end supply chain • 4 articlesKeeping your supply chain secure with DependabotEcosystems supported by Dependabot • 2 articlesIdentifying vulnerabilities in your project's dependencies with Dependabot alerts • 4 articlesPrioritizing Dependabot alerts with Dependabot auto-triage rules • 4 articlesAutomatically updating dependencies with known vulnerabilities with Dependabot security updates • 3 articlesKeeping your dependencies updated automatically with Dependabot version updates • 5 articlesWorking with Dependabot • 7 articlesMaintaining dependencies at scale • 3 articlesTroubleshooting Dependabot • 6 articlesViewing security information for your organization or enterpriseAbout security overviewViewing security insightsAssessing adoption of security featuresAssessing the security risk of your codeFiltering alerts in security overviewExporting data from security overviewViewing metrics for secret scanning push protectionViewing metrics for pull request alertsReviewing requests to bypass push protection\n\n\n\nSecure coding/Secret scanningKeeping secrets secure with secret scanningLet GitHub do the hard work of ensuring that tokens, private keys, and other code secrets are not exposed in your repository.Who can use this feature?Secret scanning is available for the following repository types:

Public repositories on GitHub.com
Organization-owned repositories on GitHub Team with GitHub Secret Protection enabled
Introduction to secret scanningAbout secret scanningAbout push protectionAbout secret scanning for partnersSupported secret scanning patternsEnabling secret scanning featuresEnabling secret scanning for your repositoryEnabling push protection for your repositoryEnabling validity checks for your repositoryManaging alerts from secret scanningAbout secret scanning alertsViewing and filtering alerts from secret scanningEvaluating alerts from secret scanningResolving alerts from secret scanningMonitoring alerts from secret scanningWorking with secret scanning and push protectionPush protection for usersWorking with push protection from the command lineWorking with push protection from the REST APIWorking with push protection in the GitHub UIUsing advanced secret scanning and push protection featuresExcluding folders and files from secret scanningNon-provider patternsCustom patternsDelegated bypass for push protectionEnabling delegated alert dismissal for secret scanningEnhance your secret detection capabilities with Copilot secret scanningResponsible detection of generic secrets with Copilot secret scanningEnabling Copilot secret scanning's generic secret detectionResponsible generation of regular expressions with Copilot secret scanningGenerating regular expressions for custom patterns with Copilot secret scanningTroubleshooting secret scanning and push protectionTroubleshooting secret scanningSecret scanning partnership programSecret scanning partner program\n\n\n\nSecure coding/Supply chain securitySecuring your software supply chainVisualize, maintain, and secure the dependencies in your software supply chain.Understanding your software supply chainAbout supply chain securityAbout the dependency graphDependency graph supported package ecosystemsConfiguring the dependency graphConfiguring automatic dependency submission for your repositoryExporting a software bill of materials for your repositoryUsing the dependency submission APIAbout dependency reviewConfiguring the dependency review actionCustomizing your dependency review action configurationEnforcing dependency review across an organizationExploring the dependencies of a repositoryTroubleshooting the dependency graphEnd-to-end supply chainSecuring your end-to-end supply chainBest practices for securing accountsBest practices for securing code in your supply chainBest practices for securing your build system\n\n\n\nSecure coding/DependabotKeeping your supply chain secure with DependabotMonitor vulnerabilities in dependencies used in your project and keep your dependencies up-to-date with Dependabot.Ecosystems supported by DependabotDependabot supported ecosystems and repositoriesOptimizing Java packages for Dependabot updatesIdentifying vulnerabilities in your project's dependencies with Dependabot alertsAbout Dependabot alertsConfiguring Dependabot alertsViewing and updating Dependabot alertsConfiguring notifications for Dependabot alertsPrioritizing Dependabot alerts with Dependabot auto-triage rulesAbout Dependabot auto-triage rulesUsing GitHub preset rules to prioritize Dependabot alertsCustomizing auto-triage rules to prioritize Dependabot alertsManaging alerts that have been automatically dismissed by a Dependabot auto-triage ruleAutomatically updating dependencies with known vulnerabilities with Dependabot security updatesAbout Dependabot security updatesConfiguring Dependabot security updatesCustomizing pull requests for Dependabot security updatesKeeping your dependencies updated automatically with Dependabot version updatesAbout Dependabot version updatesConfiguring Dependabot version updatesOptimizing the creation of pull requests for Dependabot version updatesCustomizing Dependabot pull requests to fit your processesControlling which dependencies are updated by DependabotWorking with DependabotManaging pull requests for dependency updatesAbout Dependabot on GitHub Actions runnersAutomating Dependabot with GitHub ActionsKeeping your actions up to date with DependabotConfiguring access to private registries for DependabotGuidance for the configuration of private registries for DependabotDependabot options referenceMaintaining dependencies at scaleBest practices for maintaining dependenciesManaging Dependabot on self-hosted runnersRemoving Dependabot access to public registriesTroubleshooting DependabotListing dependencies configured for version updatesViewing Dependabot job logsDependabot update pull requests no longer generatedTroubleshooting Dependabot errorsTroubleshooting Dependabot on GitHub ActionsTroubleshooting the detection of vulnerable dependencies\n\n\n\nSecure coding/Code scanningFinding security vulnerabilities and errors in your code with code scanningKeep your code secure by using code scanning to identify and fix potential security vulnerabilities and other errors in your code.Who can use this feature?Code scanning is available for the following repository types:

Public repositories on GitHub.com
Organization-owned repositories on GitHub Team with GitHub Code Security enabled
Introduction to code scanningAbout code scanningAbout code scanning with CodeQLEnabling code scanningConfiguring default setup for code scanningEvaluating default setup for code scanningConfiguring default setup for code scanning at scaleCreating an advanced setup for code scanningConfiguring advanced setup for code scanningCustomizing your advanced setup for code scanningCodeQL code scanning for compiled languagesConfiguring advanced setup for code scanning with CodeQL at scaleRecommended hardware resources for running CodeQLRunning CodeQL code scanning in a containerManaging code scanning alertsAbout code scanning alertsResponsible use of Copilot Autofix for code scanningDisabling Copilot Autofix for code scanningAssessing code scanning alerts for your repositoryResolving code scanning alertsBest practices for participating in a security campaignFixing alerts in a security campaignTriaging code scanning alerts in pull requestsTracking code scanning alerts in issues using task listsManaging your code scanning configurationAbout the tool status page for code scanningEditing your configuration of default setupSet code scanning merge protectionEnabling delegated alert dismissal for code scanningCodeQL query suitesConfiguring larger runners for default setupViewing code scanning logsC and C++ queries for CodeQL analysisC# queries for CodeQL analysisGo queries for CodeQL analysisJava and Kotlin queries for CodeQL analysisJavaScript and TypeScript queries for CodeQL analysisPython queries for CodeQL analysisRuby queries for CodeQL analysisSwift queries for CodeQL analysisIntegrating with code scanningAbout integration with code scanningUsing code scanning with your existing CI systemUploading a SARIF file to GitHubSARIF support for code scanningTroubleshooting code scanningError: "GitHub Code Security or GitHub Advanced Security must be enabled for this repository to use code scanning"Alerts found in generated codeCode scanning analysis takes too longAutomatic build failed for a compiled languageC# compiler unexpectedly failingCannot enable CodeQL in a private repositoryEnabling default setup takes too longExtraction errors in the databaseCodeQL scanned fewer lines than expectedLogs are not detailed enoughError: "No source code was seen during the build"Error: "is not a .ql file, .qls file, a directory, or a query pack specification"Error: "Out of disk" or Error: "Out of memory"Error: 403 "Resource not accessible by integration"Results are different than expectedError: "Server error"Some languages were not analyzed with CodeQL advanced setupTwo CodeQL workflowsUnclear what triggered a workflow runWarning: "1 issue was detected with this workflow: git checkout HEAD^2 is no longer necessary"Warning: Detected X Kotlin files in your project that could not be processed without a buildTroubleshooting SARIF uploadsUpload fails because GitHub Code Security is disabledUpload was rejected because CodeQL default setup is enabled for code scanningGitHub token is required to upload SARIF resultsSARIF file is invalidSARIF results file is too largeSARIF results exceed one or more limits\n\n\n\nSecure coding/Security advisoriesWorking with security advisoriesLearn how to work with security advisories on GitHub, whether you want to contribute to an existing global advisory, or create a security advisory for a repository, improving collaboration between repository maintainers and security researchers.Working with global security advisories from the GitHub Advisory DatabaseAbout the GitHub Advisory databaseAbout global security advisoriesBrowsing security advisories in the GitHub Advisory DatabaseEditing security advisories in the GitHub Advisory DatabaseWorking with repository security advisoriesAbout repository security advisoriesPermission levels for repository security advisoriesConfiguring private vulnerability reporting for a repositoryConfiguring private vulnerability reporting for an organizationCreating a repository security advisoryEditing a repository security advisoryEvaluating the security settings of a repositoryCollaborating in a temporary private fork to resolve a repository security vulnerabilityPublishing a repository security advisoryAdding a collaborator to a repository security advisoryRemoving a collaborator from a repository security advisoryDeleting a repository security advisoryGuidance on reporting and writing information about vulnerabilitiesAbout coordinated disclosure of security vulnerabilitiesBest practices for writing repository security advisoriesPrivately reporting a security vulnerabilityManaging privately reported security vulnerabilities\n\n\n\nGitHub CLI documentation GitHub CLI is an open source tool for using GitHub from your computer's command line. When you're working from the command line, you can use the GitHub CLI to save time and avoid switching context.Overview Quickstart Reference Start hereCreating GitHub CLI extensionsLearn how to share new GitHub CLI commands with other users by creating custom extensions for GitHub CLI.Using GitHub CLI extensionsLearn how to use custom extensions written by other GitHub CLI users.Using GitHub CLI in workflowsYou can script with GitHub CLI in GitHub Actions workflows.Using GitHub Codespaces with GitHub CLIYou can work with GitHub Codespaces directly from your command line by using gh, the GitHub command line interface.Popular CLI tasksCreating a pull requestCreate a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the default branch only contains finished and approved work.Creating an issueIssues can be created in a variety of ways, so you can choose the most convenient method for your workflow.Adding a new SSH key to your GitHub accountTo configure your account on GitHub.com to use your new (or existing) SSH key, you'll also need to add the key to your account.Quickstart for repositoriesLearn how to create a new repository and commit your first change in 5 minutes.What's newView all GitHub CLI renews GPG signing key for Linux packagesSeptember 11GitHub Copilot General Availability in the CLIMarch 21Log in to multiple GitHub accounts with the CLIDecember 18All GitHub CLI docsGitHub CLIAbout GitHub CLIGitHub CLI quickstartUsing the GitHub CLI across GitHub platformsCreating GitHub CLI extensionsUsing GitHub CLI extensionsGitHub CLI reference\n\n\n\nGet started/Using GitHub/GitHub MobileGitHub MobileTriage, collaborate, and manage your work on GitHub from your mobile device.In this articleAbout GitHub MobileInstalling GitHub MobileManaging accountsSupported languages for GitHub MobileManaging Universal Links for GitHub Mobile on iOSSharing feedbackOpting out of public preview releases for iOSAbout GitHub Mobile
GitHub Mobile is available as an Android and iOS app.
GitHub Mobile gives you a way to do high-impact work on GitHub quickly and from anywhere. GitHub Mobile is a safe and secure way to access your data through a trusted, first-party client application.
With GitHub Mobile you can:

Manage, triage, and clear notifications
Read, review, and collaborate on issues and pull requests
Edit files in pull requests
Search for, browse, and interact with users, repositories, and organizations
Receive a push notification when someone mentions your username


Search through code in a specific repository
Secure your GitHub.com account with two-factor authentication


Verify your sign in attempts on unrecognized devices


Use GitHub Copilot Chat to ask and receive answers to coding-related questions

The following documentation contains more information about using GitHub features on GitHub Mobile.

For more information about notifications for GitHub Mobile, see Configuring notifications.


For more information about using GitHub code search on GitHub Mobile, see Using GitHub Code Search.
For more information on two-factor authentication using GitHub Mobile, see Configuring two-factor authentication and Authenticating using GitHub Mobile.
For more information about using GitHub Copilot Chat in GitHub Mobile, see Asking GitHub Copilot questions in GitHub Mobile.
For more information about using GitHub Copilot Extensions in GitHub Mobile, see Extending Copilot Chat in GitHub Mobile.

Installing GitHub Mobile
To install GitHub Mobile for Android or iOS, see GitHub Mobile.
Managing accounts
You can be simultaneously signed into mobile with multiple accounts on GitHub.com, on GHE.com, and on GitHub Enterprise Server. For more information about our different products, see GitHub’s plans.
GitHub Enterprise Server uses background fetch to support push notifications, so you may experience a delay in receiving push notifications.
GitHub Mobile may not work with your enterprise if you're required to access your enterprise over VPN.
Prerequisites for GHE.com accounts
To access accounts on GitHub Enterprise Cloud with data residency using GitHub Mobile, you need to install GitHub Mobile with at least version iOS 1.182.0 or Android 1.178.0.
Prerequisites for GitHub Enterprise Server accounts
You must install GitHub Mobile 1.4 or later on your device to use GitHub Mobile with GitHub Enterprise Server.
To use GitHub Mobile with GitHub Enterprise Server, GitHub must be version 3.0 or greater, and your enterprise owner must enable mobile support for your enterprise. For more information, see Managing GitHub Mobile for your enterprise in the GitHub Enterprise Server documentation.
During the public preview for GitHub Mobile with GitHub Enterprise Server, you must be signed in with a personal account on GitHub.com.
Adding, switching, or signing out of accounts
You can sign into mobile with any GitHub account, on GitHub.com, on SUBDOMAIN.ghe.com, or on GitHub Enterprise Server. At the bottom of the app, long-press  Profile, then tap  Add Enterprise Account. Follow the prompts to sign in.
After signing in with a second account, you can switch between the accounts you're currently logged into within the app. At the bottom of the app, long-press  Profile, then tap the account you want to switch to.
If you no longer need to access an account using GitHub Mobile, you can sign out of that account. At the bottom of the app, long-press  Profile, swipe left on the account to sign out of, then tap Sign out.
Alternatively, once logged into one account, access the account switcher to log into other accounts or log out of an existing account by navigating to the  Profile tab, then tapping , and then tapping Manage Accounts.
Supported languages for GitHub Mobile
GitHub Mobile is available in the following languages.

English
Spanish
Japanese
Brazilian Portuguese
Simplified Chinese
Korean
German

If you configure the language on your device to a supported language, GitHub Mobile will default to the language. You can change the language for GitHub Mobile in GitHub Mobile's Settings menu.
Managing Universal Links for GitHub Mobile on iOS
GitHub Mobile automatically enables Universal Links for iOS. When you tap any GitHub link, the destination URL will open in GitHub Mobile instead of Safari. For more information, see Universal Links on the Apple Developer site.
To disable Universal Links, long-press any GitHub link, then tap Open. Every time you tap a GitHub link in the future for the same GitHub instance, the destination URL will open in Safari instead of GitHub Mobile.
To re-enable Universal Links, long-press any GitHub link, then tap Open in GitHub.
Sharing feedback
You can submit feature requests or other feedback for GitHub Mobile on GitHub Community.
Opting out of public preview releases for iOS
If you're testing a public preview release of GitHub Mobile for iOS using TestFlight, you can leave the public preview at any time.

On your iOS device, open the TestFlight app.
Under "Apps", tap GitHub.
At the bottom of the page, tap Stop Testing.\n\n\n\nGitHub Desktop documentation With GitHub Desktop, you can interact with GitHub using a GUI instead of the command line or a web browser. You can use GitHub Desktop to complete most Git commands from your desktop, such as pushing to, pulling from, and cloning remote repositories, attributing commits, and creating pull requests, with visual confirmation of changes.Overview Quickstart Start hereCreating your first repository using GitHub DesktopYou can use GitHub Desktop to create and manage a Git repository without using the command line.Installing GitHub DesktopYou can install GitHub Desktop on supported Windows or macOS operating systems.Authenticating to GitHub in GitHub DesktopYou can securely access your account's resources on GitHub Desktop by authenticating to GitHub.PopularCloning and forking repositories from GitHub DesktopYou can use GitHub Desktop to clone and fork repositories that exist on GitHub.Managing branches in GitHub DesktopYou can use GitHub Desktop to create a new branch off of an existing branch in your repository so you can safely experiment with changes.Syncing your branch in GitHub DesktopAs commits are pushed to your project on GitHub, you can keep your local copy of the project in sync by pulling from the remote repository.Creating an issue or pull request from GitHub DesktopYou can create an issue or pull request to propose and collaborate on changes to a repository.What's newView all GitHub Desktop 3.3 – Repository rulesAugust 31GitHub Desktop community adds “Check Out a Commit” and “Double click to Open External Editor”August 16GitHub Desktop makes force pushing and fetching easy and adds pull request comment notificationsMay 03GuidesStashing changes in GitHub DesktopYou can temporarily save your changes without committing them to a branch by stashing the changes in GitHub Desktop.@GitHubReverting a commit in GitHub DesktopYou can use GitHub Desktop to revert a specific commit to remove its changes from your branch.@GitHubAmending a commit in GitHub DesktopYou can use GitHub Desktop to amend your last commit.@GitHubCherry-picking a commit in GitHub DesktopYou can use GitHub Desktop to pick a specific commit on one branch and copy the commit to another branch.@GitHubAll GitHub Desktop docsOverviewAbout GitHub DesktopGetting started with GitHub DesktopCreating your first repository using GitHub DesktopSupported operating systems for GitHub DesktopGitHub Desktop keyboard shortcutsLaunching GitHub Desktop from the command lineInstalling and authenticating to GitHub DesktopSetting up GitHub DesktopInstalling GitHub DesktopAuthenticating to GitHub in GitHub DesktopAbout connections to GitHub in GitHub DesktopUpdating GitHub DesktopUninstalling GitHub DesktopConfiguring and customizing GitHub DesktopConfiguring Git for GitHub DesktopConfiguring basic settings in GitHub DesktopConfiguring a default editor in GitHub DesktopSetting a theme for GitHub DesktopAbout Git Large File Storage and GitHub DesktopAdding and cloning repositoriesAdding a repository from your local computer to GitHub DesktopAdding an existing project to GitHub using GitHub DesktopCloning and forking repositories from GitHub DesktopCloning a repository from GitHub to GitHub DesktopMaking changes in a branchManaging branches in GitHub DesktopCommitting and reviewing changes to your project in GitHub DesktopStashing changes in GitHub DesktopViewing the branch history in GitHub DesktopPushing changes to GitHub from GitHub DesktopManaging commitsOptions for managing commits in GitHub DesktopUndoing a commit in GitHub DesktopResetting to a commit in GitHub DesktopAmending a commit in GitHub DesktopReverting a commit in GitHub DesktopCherry-picking a commit in GitHub DesktopReordering commits in GitHub DesktopSquashing commits in GitHub DesktopManaging tags in GitHub DesktopChecking out a commit in GitHub DesktopWorking with your remote repository on GitHub or GitHub EnterpriseCreating an issue or pull request from GitHub DesktopSyncing your branch in GitHub DesktopViewing a pull request in GitHub DesktopViewing and re-running checks in GitHub DesktopConfiguring notifications in GitHub DesktopChanging the remote URL for a repository in GitHub Desktop\n\n\n\nGitHub Issues documentation Learn how you can use GitHub Issues to plan and track your work.Overview Quickstart View video transcript Start hereView all Creating an issueIssues can be created in a variety of ways, so you can choose the most convenient method for your workflow.Quickstart for ProjectsExperience the speed, flexibility, and customization of Projects by creating a project in this interactive guide.Best practices for ProjectsLearn tips for managing your projects.Configuring issue templates for your repositoryYou can customize the templates that are available for contributors to use when they open new issues in your repository.PopularAbout issuesLearn how you can use GitHub Issues to track ideas, feedback, tasks, or bugs.About ProjectsProjects is an adaptable, flexible tool for planning and tracking work on GitHub.Creating a projectLearn how to create an organization or user project.About issue and pull request templatesWith issue and pull request templates, you can customize and standardize the information you'd like contributors to include when they open issues and pull requests in your repository.GuidesChanging the layout of a viewYou can view your project as a high-density table, as a kanban board, or as a timeline-style roadmap.@GitHubLinking a pull request to an issueYou can link a pull request or branch to an issue to show that a fix is in progress and to automatically close the issue when the pull request or branch is merged.@GitHubAutomating Projects using ActionsYou can use GitHub Actions to automate your projects.@GitHubExplore guides All GitHub Issues docsTracking your work with issuesAbout issuesConfiguring issues • 3 articlesUsing issues • 10 articlesAdministering issues • 5 articlesPlanning and tracking with ProjectsLearning about Projects • 5 articlesCreating projects • 2 articlesManaging items in your project • 4 articlesUnderstanding fields • 7 articlesCustomizing views in your project • 6 articlesAutomating your project • 5 articlesViewing insights from your project • 3 articlesManaging your project • 7 articlesUsing labels and milestones to track workManaging labelsAbout milestonesCreating and editing milestones for issues and pull requestsAssociating milestones with issues and pull requestsFiltering issues and pull requests by milestoneViewing your milestone's progress\n\n\n\nGitHub Issues/ProjectsPlanning and tracking with ProjectsBuild adaptable projects to track your work on GitHub.A project is an adaptable collection of items that you can view as a table, a kanban board, or a roadmap and that stays up-to-date with GitHub data. Your projects can track issues, pull requests, and ideas that you note down.
You can create and customize multiple views by filtering, sorting, and grouping issues and pull requests, visualize work with configurable charts, and add custom fields to track metadata specific to your team. Rather than enforcing a specific methodology, a project provides flexible features you can customize to your team’s needs and processes.Learning about ProjectsAbout ProjectsQuickstart for ProjectsBest practices for ProjectsFinding your projectsSharing project updatesCreating projectsCreating a projectCopying an existing projectManaging items in your projectAdding items to your projectConverting draft issues to issuesEditing items in your projectArchiving items from your projectUnderstanding fieldsAbout text and number fieldsAbout date fieldsAbout single select fieldsAbout iteration fieldsAbout parent issue and sub-issue progress fieldsRenaming custom fieldsDeleting custom fieldsCustomizing views in your projectChanging the layout of a viewCustomizing the table layoutCustomizing the board layoutCustomizing the roadmap layoutFiltering projectsManaging your viewsAutomating your projectUsing the built-in automationsUsing the API to manage ProjectsAutomating Projects using ActionsAdding items automaticallyArchiving items automaticallyViewing insights from your projectAbout insights for ProjectsCreating chartsConfiguring chartsManaging your projectManaging visibility of your projectsManaging access to your projectsManaging project templates in your organizationClosing and deleting your projectsAdding your project to a repositoryAdding your project to a teamExporting your project data\n\n\n\nSearch on GitHub documentation Learn how to use the search functions available on GitHub to find different types of information, like projects, people, and code.Overview Start hereSearching issues and pull requestsYou can search for issues and pull requests on GitHub and narrow the results using these search qualifiers in any combination.Understanding GitHub Code Search syntaxYou can build search queries for the results you want with specialized code qualifiers, regular expressions, and boolean operations.Searching for repositoriesYou can search for repositories on GitHub and narrow the results using these repository search qualifiers in any combination.Searching commitsYou can search for commits on GitHub and narrow the results using these commit search qualifiers in any combination.PopularAbout GitHub Code SearchYou can search, navigate and understand code across GitHub with code search.Understanding the search syntaxWhen searching GitHub, you can construct queries that match specific numbers and words.Searching usersYou can search for users on GitHub and narrow the results using these user search qualifiers in any combination.Finding files on GitHubYou can search for a file in a repository using the file finder. To search for a file in multiple repositories on GitHub, use the path code search qualifier.What's newView all Anonymous users have access to new code view and navigationJuly 06The new code search and code view is now generally availableMay 08No more waitlist – code search and code view are available to all in public betaFebruary 23GuidesSearching in forksBy default, forks are not shown in search results. You can choose to include them in repository searches, and in code searches if they meet certain criteria.@GitHubSearching topicsYou can search for topics associated with repositories on GitHub.@GitHubSearching for packagesYou can search for packages on GitHub and narrow the results using search qualifiers.@GitHubAll Search on GitHub docsGetting started with searching on GitHubAbout searching on GitHubUnderstanding the search syntaxTroubleshooting search queriesSorting search resultsSearching on GitHubFinding files on GitHubSearching for repositoriesSearching topicsSearching code (legacy)Searching commitsSearching issues and pull requestsSearching discussionsSearching GitHub MarketplaceSearching GitHub ModelsSearching usersSearching for packagesSearching wikisSearching in forksSearching gistsGitHub Code SearchAbout GitHub Code SearchUsing GitHub Code SearchUnderstanding GitHub Code Search syntax\n\n\n\nOrganizations and teams documentation You can use organizations to collaborate with a large number of people across many projects at once, while managing access to your data and customizing settings.Overview Start hereTypes of GitHub accountsAccounts on GitHub allow you to organize and control access to code.Repository roles for an organizationYou can customize access to each repository in your organization by assigning granular roles, giving people access to the features and tasks they need.About teamsTeams are groups of organization members that reflect your company or group's structure with cascading access permissions and mentions.About OAuth app access restrictionsOrganizations can choose which OAuth apps have access to their repositories and other resources by enabling OAuth app access restrictions.PopularCreating a new organization from scratchCreate an organization to apply fine-grained access permissions to repositories.Repository roles for an organizationYou can customize access to each repository in your organization by assigning granular roles, giving people access to the features and tasks they need.Verifying or approving a domain for your organizationYou can verify your ownership of domains with GitHub to confirm your organization's identity.About the secret risk assessmentLearn why it's so important to understand your organization's exposure to data leaks and how the secret risk assessment report gives an overview of your organization’s secret leak footprint.GuidesInviting users to join your organizationYou can invite anyone to become a member of your organization using their username or email address for GitHub.@GitHubAdding people to your organizationYou can make anyone a member of your organization using their GitHub username or email address.@GitHubManaging an individual's access to an organization repositoryYou can manage a person's access to a repository owned by your organization.@GitHubReviewing the audit log for your organizationThe audit log allows organization admins to quickly review the actions performed by members of your organization. It includes details such as who performed the action, what the action was, and when it was performed.@GitHubAll Organizations docsCollaborating with groups in organizationsAbout organizationsAbout your organization dashboardBest practices for organizationsCreating a new organization from scratchAccessing your organization's settingsCustomizing your organization's profileAbout your organization’s news feedViewing GitHub Actions metrics for your organizationManaging membership in your organizationInviting users to join your organizationCanceling or editing an invitation to join your organizationRemoving a member from your organizationReinstating a former member of your organizationExporting member information for your organizationCan I create accounts for people in my organization?Managing people's access to your organization with rolesRoles in an organizationUsing organization rolesMaintaining ownership continuity for your organizationAdding a billing manager to your organizationRemoving a billing manager from your organizationManaging security managers in your organizationManaging moderators in your organizationManaging user access to your organization's repositoriesManaging repository roles • 5 articlesManaging outside collaborators • 6 articlesOrganizing members into teamsAbout teamsCreating a teamAdding organization members to a teamAssigning the team maintainer role to a team memberSetting your team's profile pictureManaging code review settings for your teamRenaming a teamChanging team visibilityConfiguring team notificationsMoving a team in your organization’s hierarchyRequesting to add a child teamRequesting to add or change a parent teamRemoving organization members from a teamManaging scheduled reminders for your teamDeleting a teamManaging programmatic access to your organizationAbout programmatic access in your organizationAdding and removing GitHub App managers in your organizationReviewing GitHub Apps installed in your organizationSetting a personal access token policy for your organizationManaging requests for personal access tokens in your organizationReviewing and revoking personal access tokens in your organizationLimiting OAuth app and GitHub App access requestsManaging OAuth access to your organization's dataAbout OAuth app access restrictionsEnabling OAuth app access restrictions for your organizationDisabling OAuth app access restrictions for your organizationApproving OAuth apps for your organizationDenying access to a previously approved OAuth app for your organizationManaging organization settingsVerifying or approving a domain for your organizationRenaming an organizationTransferring organization ownershipRestricting repository creation in your organizationSetting permissions for deleting or transferring repositoriesRestricting repository visibility changes in your organizationManaging the forking policy for your organizationManaging pull request reviews in your organizationDisabling or limiting GitHub Actions for your organizationAbout networking for hosted compute products in your organizationAbout Azure private networking for GitHub-hosted runners in your organizationConfiguring private networking for GitHub-hosted runners in your organizationTroubleshooting Azure private network configurations for GitHub-hosted runners in your organizationConfiguring the retention period for GitHub Actions artifacts and logs in your organizationAllowing people to delete issues in your organizationEnabling or disabling GitHub Discussions for an organizationManaging discussion creation for repositories in your organizationManaging the commit signoff policy for your organizationSetting team creation permissions in your organizationManaging scheduled reminders for your organizationManaging the default branch name for repositories in your organizationManaging default labels for repositories in your organizationManaging the display of member names in your organizationManaging updates from accounts your organization sponsorsManaging the publication of GitHub Pages sites for your organizationArchiving an organizationDeleting an organization accountConverting an organization into a userUpgrading to the GitHub Customer AgreementDisabling projects in your organizationManaging base permissions for projectsAllowing project visibility changes in your organizationManaging custom properties for repositories in your organizationKeeping your organization secureManaging two-factor authentication for your organization • 4 articlesManaging security settings for your organization • 5 articlesMigrating to improved organization permissionsConverting an Owners team to improved organization permissionsConverting an admin team to improved organization permissionsMigrating admin teams to improved organization permissions\n\n\n\nSecure coding/Secure your organizationSecuring your organizationSecure your organization at scale with GitHub's security products through security configurations and global settings.Introduction to securing your organization at scaleAbout enabling security features at scaleChoosing a security configuration for your repositoriesEnabling security features in your organizationApplying the GitHub-recommended security configuration in your organizationCreating a custom security configurationApplying a custom security configurationConfiguring global security settings for your organizationGiving security features access to private registriesManaging the security of your organizationInterpreting security findingsFiltering repositories in your organization using the repository tableEditing a custom security configurationManaging your paid use of Advanced SecurityDetaching repositories from their security configurationsFinding and fixing configuration attachment failuresDeleting a custom security configurationUnderstanding your organization's exposure to leaked secretsAbout the secret risk assessmentViewing the secret risk assessment report for your organizationInterpreting secret risk assessment resultsChoosing GitHub Secret ProtectionFixing security alerts at scaleAbout security campaignsBest practices for fixing security alerts at scaleCreating and managing security campaignsTracking security campaignsTroubleshooting security configurationsA repository is using advanced setup for code scanningNot enough GitHub Advanced Security licenses\n\n\n\nEnterprise onboarding Learn how to successfully onboard your company to GitHub Enterprise Cloud.Overview Try GitHub's enterprise features Start hereGetting started with your enterpriseLearn how to start a trial of GitHub Enterprise, and about enterprise billing and migrations.Setting up organizations and teams in your enterpriseLearn how to add and manage organizations and teams in your enterprise.Creating a support model for your enterpriseLearn about GitHub support and how to set up a support model for your enterprise.PopularGitHub Actions for your enterpriseLearn how to plan and implement a rollout of GitHub Actions for your enterprise.Feature enhancementsTake advantage of features available with GitHub Enterprise Cloud.All Enterprise onboarding docsGetting started with your enterpriseSetting up a trial of GitHub EnterpriseEnding a trial of GitHub EnterpriseAbout enterprise billingAbout migrating to GitHub Enterprise CloudSecuring your enterprise with Managed UsersSecuring enterprise resources with single sign-onSetting up organizations and teams in your enterpriseSetting up an organizationManaging organization membersManaging your organizationsCreating teamsBest practices for organizations in your enterpriseCreating a support model for your enterpriseUnderstanding enterprise supportUsing the support portalManaging support entitlementsGitHub Actions for your enterpriseAbout GitHub Actions for enterprisesUnderstanding GitHub ActionsIntroducing GitHub Actions to your enterpriseMigrating your enterprise to GitHub ActionsGetting started with GitHub Actions for GitHub Enterprise CloudSecurity hardening for GitHub ActionsAbout billing for GitHub ActionsFeature enhancementsAbout the audit log for your enterpriseAbout access permissions on GitHubAbout rulesetsCreate a README for your enterpriseAbout enterprise security\n\n\n\nEnterprise administrator documentation Documentation and guides for enterprise administrators and security specialists who configure and manage GitHub Enterprise.Overview Try GitHub's enterprise features Start hereView all Choosing an enterprise type for GitHub Enterprise CloudDecide whether Enterprise Managed Users is right for your enterprise by asking yourself some questions.About identity and access managementAdministrators must decide how users will access the enterprise's resources on GitHub.Roles in an enterpriseLearn which roles you can assign to control access to your enterprise's settings and data.Best practices for structuring organizations in your enterpriseLearn to identify how many organizations to create within your enterprise, and how you should structure them.PopularVerifying or approving a domain for your enterpriseYou can verify your ownership of domains with GitHub to confirm the identity of organizations owned by your enterprise account. You can also approve domains where organization members can receive email notifications.About the audit log for your enterpriseTo support debugging and internal and external compliance, GitHub provides logs of audited user, organization, and repository events.Managing global webhooksYou can configure global webhooks to notify external web servers when events occur within your enterprise.Setting up Visual Studio subscriptions with GitHub EnterpriseYour team's subscription to Visual Studio can also provide access to GitHub Enterprise.GuidesEnforcing policies for GitHub Actions in your enterpriseYou can enforce policies to manage how GitHub Actions can be used within your enterprise.@GitHubEnforcing policies for code security and analysis for your enterpriseYou can enforce policies to manage the use of code security and analysis features within your enterprise's organizations.@GitHubEnforcing repository management policies in your enterpriseYou can enforce policies for repository management within your enterprise's organizations, or allow policies to be set in each organization.@GitHubExplore guides All Enterprise administrators docsOverviewAbout GitHub for enterprisesAbout GitHub Enterprise CloudSetting up a trial of GitHub Enterprise CloudFeature overview for GitHub Enterprise CloudSetting up a trial of GitHub Enterprise ServerBest practices for enterprisesEstablishing a governance framework for your enterpriseAccessing compliance reports for your enterpriseGitHub Enterprise Cloud with data residencyAbout GitHub Enterprise Cloud with data residencyAbout storage of your data with data residencyFeature overview for GitHub Enterprise Cloud with data residencyGetting started with data residency for GitHub Enterprise CloudNetwork details for GHE.comResolving issues with your enterprise on GHE.comManaging your enterprise accountAbout enterprise accountsCreating an enterprise accountCreating a README for an enterpriseDeleting an enterprise accountChanging the URL for your enterpriseCreating GitHub Apps for your enterpriseConfiguring GitHub EnterpriseConfiguring user applications for your enterprise • 1 articlesHardening security for your enterprise • 2 articlesConfiguring private networking for hosted compute products • 4 articlesIdentity and access managementUnderstanding IAM for enterprises • 7 articlesIAM configuration reference • 2 articlesUsing SAML for enterprise IAM • 7 articlesConfiguring authentication for Enterprise Managed Users • 6 articlesProvisioning accounts for Enterprise Managed Users • 6 articlesReconfiguring IAM for Enterprise Managed Users • 3 articlesManaging recovery codes for your enterprise • 2 articlesManaging accounts and repositoriesCommunicating information to users in your enterprise • 2 articlesManaging users in your enterprise • 11 articlesManaging organizations in your enterprise • 5 articlesManaging repositories in your enterprise • 4 articlesSetting policies for your enterpriseEnforcing policies for your enterprise • 13 articlesMonitoring activity in your enterpriseReviewing audit logs for your enterprise • 9 articlesExploring user activity in your enterprise • 1 articlesManaging GitHub Actions for your enterpriseGetting started with GitHub Actions for your enterprise • 5 articlesManaging a secure coding environment for your enterpriseConfiguring infrastructure for GitHub Advanced Security features • 1 articlesSecuring your enterprise • 7 articlesUsing a dedicated enterprise account for Copilot BusinessAbout enterprise accounts for Copilot BusinessSetting up a dedicated enterprise for Copilot Business (personal accounts)Setting up a dedicated enterprise for Copilot Business (Enterprise Managed Users)\n\n\n\nGitHub Apps documentation Go deeper with GitHub by integrating with our APIs and webhooks, customizing your GitHub workflow, and building and sharing apps with the community.Overview Quickstart Start hereAbout using GitHub AppsLearn about what a GitHub App is and why you would use a GitHub App.About creating GitHub AppsGitHub Apps let you build integrations to automate processes and extend GitHub's functionality.Differences between GitHub Apps and OAuth appsIn general, GitHub Apps are preferred to OAuth apps because they use fine-grained permissions, give more control over which repositories the app can access, and use short-lived tokens.About authentication with a GitHub AppYour GitHub App can authenticate as itself, as an app installation, or on behalf of a user.PopularRegistering a GitHub AppYou can register a GitHub App under your personal account or under any organization you own.Authorizing GitHub AppsYou can authorize a GitHub App to retrieve information about your GitHub account and to make changes on your behalf.Building a GitHub App that responds to webhook eventsLearn how to build a GitHub App that makes an API request in response to a webhook event.Building a "Login with GitHub" button with a GitHub AppFollow this tutorial to write Ruby code to generate a user access token via the web application flow for your GitHub App.What's newView all Updated GitHub App visibility for Enterprise Managed UsersMarch 29You can pick your account during device flow loginJanuary 05X-Accepted-GitHub-Permissions header for fine-grained permission actorsAugust 10GuidesBuilding a GitHub App that responds to webhook eventsLearn how to build a GitHub App that makes an API request in response to a webhook event.@GitHubBuilding a "Login with GitHub" button with a GitHub AppFollow this tutorial to write Ruby code to generate a user access token via the web application flow for your GitHub App.@GitHubBuilding a CLI with a GitHub AppFollow this tutorial to write a CLI in Ruby that generates a user access token for a GitHub App via the device flow.@GitHubMaking authenticated API requests with a GitHub App in a GitHub Actions workflowYou can use an installation access token from a GitHub App to make authenticated API requests in a GitHub Actions workflow. You can also pass the token to a custom action to enable the action to make authenticated API requests.@GitHubAll Apps docsUsing GitHub AppsAbout using GitHub AppsInstalling a GitHub App from GitHub Marketplace for your personal accountInstalling a GitHub App from GitHub Marketplace for your organizationsInstalling a GitHub App from a third partyInstalling your own GitHub AppRequesting a GitHub App from your organization ownerAuthorizing GitHub AppsApproving updated permissions for a GitHub AppReviewing and revoking authorization of GitHub AppsReviewing and modifying installed GitHub AppsPrivileged GitHub AppsCreating GitHub AppsAbout creating GitHub Apps • 4 articlesRegistering a GitHub App • 8 articlesAuthenticating with a GitHub App • 10 articlesWriting code for a GitHub App • 6 articlesSharing GitHub AppsSharing your GitHub AppMaking your GitHub App available for GitHub Enterprise ServerRegistering a GitHub App from a manifestRegistering a GitHub App using URL parametersMaintaining GitHub AppsModifying a GitHub App registrationActivating optional features for GitHub AppsAbout GitHub App managersManaging allowed IP addresses for a GitHub AppSuspending a GitHub App installationTransferring ownership of a GitHub AppDeleting a GitHub AppGitHub MarketplaceGitHub Marketplace Overview • 3 articlesCreating apps for GitHub Marketplace • 5 articlesUsing the GitHub Marketplace API in your app • 6 articlesListing an app on GitHub Marketplace • 6 articlesSelling your app on GitHub Marketplace • 3 articlesOAuth appsUsing OAuth apps • 6 articlesBuilding OAuth apps • 8 articlesMaintaining OAuth apps • 6 articles\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."GitHub REST API documentation Create integrations, retrieve data, and automate your workflows with the GitHub REST API.Overview Quickstart Start hereView all About the REST APIGet oriented to the REST API documentation.Getting started with the REST APILearn how to use the GitHub REST API.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Best practices for using the REST APIFollow these best practices when using GitHub's API.PopularRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.@GitHubUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.@GitHubUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.@GitHubExplore guides All REST API docsAbout the REST APIAbout the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST APIUsing the REST APIGetting started with the REST APIRate limits for the REST APIUsing pagination in the REST APILibraries for the REST APIBest practices for using the REST APITroubleshooting the REST APITimezones and the REST APIUsing CORS and JSONP to make cross-origin requestsIssue event typesGitHub event typesAuthenticating to the REST APIAuthenticating to the REST APIKeeping your API credentials secureEndpoints available for GitHub App installation access tokensEndpoints available for GitHub App user access tokensEndpoints available for fine-grained personal access tokensPermissions required for GitHub AppsPermissions required for fine-grained personal access tokensGuidesScripting with the REST API and JavaScriptScripting with the REST API and RubyDiscovering resources for a userDelivering deploymentsRendering data as graphsWorking with commentsBuilding a CI serverUsing the REST API to interact with your Git databaseUsing the REST API to interact with checksEncrypting secrets for the REST APIREST API endpoints for GitHub ActionsREST API endpoints for GitHub Actions artifactsREST API endpoints for GitHub Actions cacheGitHub-hosted runnersREST API endpoints for GitHub Actions OIDCREST API endpoints for GitHub Actions permissionsREST API endpoints for GitHub Actions SecretsREST API endpoints for self-hosted runner groupsREST API endpoints for self-hosted runnersREST API endpoints for GitHub Actions variablesREST API endpoints for workflow jobsREST API endpoints for workflow runsREST API endpoints for workflowsREST API endpoints for activityREST API endpoints for eventsREST API endpoints for feedsREST API endpoints for notificationsREST API endpoints for starringREST API endpoints for watchingREST API endpoints for appsREST API endpoints for GitHub AppsREST API endpoints for GitHub App installationsREST API endpoints for GitHub MarketplaceREST API endpoints for OAuth authorizationsREST API endpoints for GitHub App webhooksREST API endpoints for billingREST API endpoints for billingEnhanced billing platformREST API endpoints for branches and their settingsREST API endpoints for branchesREST API endpoints for protected branchesREST API endpoints for security campaignsREST API endpoints for security campaignsREST API endpoints for checksREST API endpoints for check runsREST API endpoints for check suitesREST API endpoints for GitHub ClassroomREST API endpoints for GitHub ClassroomREST API endpoints for code scanningREST API endpoints for code scanningSecurity settingsConfigurationsREST API endpoints for codes of conductREST API endpoints for codes of conductREST API endpoints for CodespacesREST API endpoints for CodespacesREST API endpoints for Codespaces organizationsREST API endpoints for Codespaces organization secretsREST API endpoints for Codespaces machinesREST API endpoints for Codespaces repository secretsREST API endpoints for Codespaces user secretsREST API endpoints for collaboratorsREST API endpoints for collaboratorsREST API endpoints for repository invitationsREST API endpoints for commitsREST API endpoints for commitsREST API endpoints for commit commentsREST API endpoints for commit statusesREST API endpoints for CopilotREST API endpoints for Copilot metricsREST API endpoints for Copilot user managementREST API endpoints for DependabotREST API endpoints for Dependabot alertsREST API endpoints for Dependabot secretsREST API endpoints for the dependency graphREST API endpoints for dependency reviewREST API endpoints for dependency submissionREST API endpoints for software bill of materials (SBOM)REST API endpoints for deploy keysREST API endpoints for deploy keysREST API endpoints for deploymentsREST API endpoints for deployment branch policiesREST API endpoints for deploymentsREST API endpoints for deployment environmentsREST API endpoints for protection rulesREST API endpoints for deployment statusesREST API endpoints for emojisREST API endpoints for emojisREST API endpoints for gists and gist commentsREST API endpoints for gistsREST API endpoints for gist commentsREST API endpoints for Git databaseREST API endpoints for Git blobsREST API endpoints for Git commitsREST API endpoints for Git referencesREST API endpoints for Git tagsREST API endpoints for Git treesREST API endpoints for gitignoreREST API endpoints for gitignoreREST API endpoints for interactionsREST API endpoints for organization interactionsREST API endpoints for repository interactionsREST API endpoints for user interactionsREST API endpoints for issuesREST API endpoints for issue assigneesREST API endpoints for issue commentsREST API endpoints for issue eventsREST API endpoints for issuesREST API endpoints for labelsREST API endpoints for milestonesREST API endpoints for sub-issuesREST API endpoints for timeline eventsREST API endpoints for licensesREST API endpoints for licensesREST API endpoints for MarkdownREST API endpoints for MarkdownREST API endpoints for meta dataREST API endpoints for meta dataREST API endpoints for metricsREST API endpoints for community metricsREST API endpoints for repository statisticsREST API endpoints for repository trafficREST API endpoints for migrationsREST API endpoints for organization migrationsREST API endpoints for source importsREST API endpoints for user migrationsREST API endpoints for organizationsREST API endpoints for API InsightsREST API endpoints for blocking usersREST API endpoints for custom propertiesREST API endpoints for issue typesREST API endpoints for organization membersREST API endpoints for network configurationsREST API endpoints for organization rolesREST API endpoints for organizationsREST API endpoints for outside collaboratorsREST API endpoints for personal access tokensREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for security managersREST API endpoints for organization webhooksREST API endpoints for packagesREST API endpoints for packagesREST API endpoints for GitHub PagesREST API endpoints for GitHub PagesPrivate registriesOrganization configurationsREST API endpoints for Projects (classic)REST API endpoints for Projects (classic)REST API endpoints for Project (classic) cardsREST API endpoints for Project (classic) collaboratorsREST API endpoints for Project (classic) columnsREST API endpoints for pull requestsREST API endpoints for pull requestsREST API endpoints for pull request review commentsREST API endpoints for review requestsREST API endpoints for pull request reviewsREST API endpoints for rate limitsREST API endpoints for rate limitsREST API endpoints for reactionsREST API endpoints for reactionsREST API endpoints for releases and release assetsREST API endpoints for releasesREST API endpoints for release assetsREST API endpoints for repositoriesREST API endpoints for repository autolinksREST API endpoints for repository contentsREST API endpoints for custom propertiesREST API endpoints for forksREST API endpoints for repositoriesREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for repository tagsREST API endpoints for repository webhooksREST API endpoints for searchREST API endpoints for searchREST API endpoints for secret scanningREST API endpoints for secret scanningREST API endpoints for security advisoriesREST API endpoints for global security advisoriesREST API endpoints for repository security advisoriesREST API endpoints for teamsREST API endpoints for teamsREST API endpoints for team discussion commentsREST API endpoints for team discussionsREST API endpoints for team membersREST API endpoints for usersREST API endpoints for artifact attestationsREST API endpoints for blocking usersREST API endpoints for emailsREST API endpoints for followersREST API endpoints for GPG keysREST API endpoints for Git SSH keysREST API endpoints for social accountsREST API endpoints for SSH signing keysREST API endpoints for users\n\n\n\nGitHub GraphQL API documentation To create integrations, retrieve data, and automate your workflows, use the GitHub GraphQL API. The GitHub GraphQL API offers more precise and flexible queries than the GitHub REST API.Overview Start hereView all Forming calls with GraphQLLearn how to authenticate to the GraphQL API, then learn how to create and run queries and mutations.Introduction to GraphQLLearn useful terminology and concepts for using the GitHub GraphQL API.Using the ExplorerYou can run queries on real GitHub data using the GraphQL Explorer, an integrated development environment in your browser that includes docs, syntax highlighting, and validation errors.PopularExplorerPublic schemaDownload the public schema for the GitHub GraphQL API.Schema previewsYou can preview upcoming features and changes to the GitHub GraphQL schema before they are added to the GitHub GraphQL API.Using pagination in the GraphQL APILearn how to traverse data sets using cursor based pagination with the GraphQL API.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesMigrating from REST to GraphQLLearn best practices and considerations for migrating from GitHub's REST API to GitHub's GraphQL API.@GitHubManaging enterprise accountsYou can manage your enterprise account and the organizations it owns with the GraphQL API.@GitHubUsing global node IDsYou can get global node IDs of objects via the REST API and use them in GraphQL operations.@GitHubExplore guides All GraphQL API docsOverviewAbout the GraphQL APIPublic schemaBreaking changesChangelogExplorerRate limits and node limits for the GraphQL APIReferenceQueriesMutationsObjectsInterfacesEnumsUnionsInput objectsScalarsGuidesIntroduction to GraphQLForming calls with GraphQLUsing global node IDsMigrating from REST to GraphQLUsing the ExplorerUsing pagination in the GraphQL APIUsing the GraphQL API for DiscussionsMigrating GraphQL global node IDs\n\n\n\nWebhooks documentation Webhooks can let your integrations take an action in response to events that occur on GitHub.Overview Reference Start hereCreating webhooksYou can create webhooks to subscribe to specific events that occur on GitHub.Handling webhook deliveriesLearn how to write code to listen for and respond to webhook deliveries.Validating webhook deliveriesYou can use a webhook secret to verify that a webhook delivery is from GitHub.PopularWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.Best practices for using webhooksFollow these best practices to improve security and performance when using webhooks.Troubleshooting webhooksLearn how to diagnose and resolve common errors for webhooks.What's newView all Secret scanning adds webhook support for validity checksFebruary 12Webhook delivery logs will only be retained for 3 daysOctober 18Merges by pull request merge queue now attributed to the GitHub Merge Queue botJune 21GuidesHandling webhook deliveriesLearn how to write code to listen for and respond to webhook deliveries.@GitHubHandling failed webhook deliveriesGitHub does not automatically redeliver failed webhook deliveries, but you can handle failed deliveries manually or by writing code.@GitHubTesting webhooksLearn how to test your webhooks and your code that handles webhook deliveries.@GitHubAll Webhooks docsUsing webhooksCreating webhooksHandling webhook deliveriesValidating webhook deliveriesDelivering webhooks to private systemsEditing webhooksDisabling webhooksBest practices for using webhooksHandling failed webhook deliveriesAutomatically redelivering failed deliveries for a repository webhookAutomatically redelivering failed deliveries for an organization webhookAutomatically redelivering failed deliveries for a GitHub App webhookTesting and troubleshooting webhooksViewing webhook deliveriesRedelivering webhooksTesting webhooksTroubleshooting webhooksUsing the GitHub CLI to forward webhooks for testing\n\n\n\nGitHub Copilot/Build Copilot ExtensionsBuilding Copilot ExtensionsLearn how to integrate external tools with Copilot.About building Copilot ExtensionsQuickstart for GitHub Copilot Extensions using agentsSetting up Copilot ExtensionsCreating a Copilot ExtensionConfiguring your server to host your Copilot extensionCreating a GitHub App for your Copilot ExtensionConfiguring your GitHub App for your Copilot extensionBuilding a Copilot agent for your Copilot ExtensionAbout Copilot agentsConfiguring your Copilot agent to communicate with the Copilot platformConfiguring your Copilot agent to communicate with GitHubContext passing for your agentUsing Copilot's LLM for your agentBuilding a Copilot skillset for your Copilot ExtensionAbout Copilot skillsetsBuilding Copilot skillsetsUsing OIDC with GitHub Copilot ExtensionsDebugging your GitHub Copilot ExtensionManaging the availability of your Copilot ExtensionCopilot Extensions FAQCopilot Extensions Glossary\n\n\n\nGitHub ModelsGitHub ModelsFind and experiment with AI models for free.Prototyping with AI modelsFind and experiment with AI models for free.Integrating AI models into your development workflowCall AI models in the tools you use every day.Responsible use of GitHub ModelsLearn how to use GitHub Models responsibly by understanding its purposes, capabilities, and limitations.\n\n\n\nBuilding communities documentation Learn best practices for moderating and setting up collaborative, safe, and effective communities using GitHub’s community-tested tools.Start hereSetting guidelines for repository contributorsYou can create guidelines to communicate how people should contribute to your project.Adding a code of conduct to your projectAdopt a code of conduct to define community standards, signal a welcoming and inclusive project, and outline procedures for handling abuse.Managing disruptive commentsYou can hide, edit, or delete comments on issues, pull requests, and commits.PopularCreating a pull request template for your repositoryWhen you add a pull request template to your repository, project contributors will automatically see the template's contents in the pull request body.Reporting abuse or spamYou can report behavior and content that violates community guidelines and terms.Adding a license to a repositoryYou can include an open source license in your repository to make it easier for other people to contribute.Configuring issue templates for your repositoryYou can customize the templates that are available for contributors to use when they open new issues in your repository.What's newView all Wikis are now available for Enterprise Managed User namespace repositoriesSeptember 01More secure private attachmentsMay 09Wikis now support math and Mermaid diagramsAugust 10GuidesEditing wiki contentYou can add images and links to content in your wiki, and use some supported MediaWiki formats.@GitHubBlocking a user from your personal accountYou can block a user to deny them access to your activity and repositories, and to prevent them from sending you notifications.@GitHubBlocking a user from your organizationOrganization owners and moderators can block anyone who is not a member of the organization from collaborating on the organization's repositories.@GitHubAll Building communities docsSetting up your project for healthy contributionsAbout community management and moderationAbout community profiles for public repositoriesAccessing a project's community profileAdding a code of conduct to your projectSetting guidelines for repository contributorsAdding a license to a repositoryAdding support resources to your projectCreating a default community health fileEncouraging helpful contributions to your project with labelsUsing templates to encourage useful issues and pull requestsAbout issue and pull request templatesConfiguring issue templates for your repositorySyntax for issue formsSyntax for GitHub's form schemaCreating a pull request template for your repositoryManually creating a single issue template for your repositoryCommon validation errors when creating issue formsModerating comments and conversationsManaging disruptive commentsLocking conversationsLimiting interactions in your repositoryLimiting interactions for your personal accountLimiting interactions in your organizationTracking changes in a commentManaging how contributors report abuse in your organization's repositoryManaging reported content in your organization's repositoryMaintaining your safety on GitHubBlocking a user from your personal accountViewing users you've blocked from your personal accountUnblocking a user from your personal accountBlocking a user from your organizationViewing users who are blocked from your organizationUnblocking a user from your organizationReporting abuse or spamDocumenting your project with wikisAbout wikisAdding or editing wiki pagesCreating a footer or sidebar for your wikiEditing wiki contentViewing a wiki's history of changesChanging access permissions for wikisDisabling wikis\n\n\n\nGitHub Sponsors documentation Invest in the open source projects you depend on, support digital infrastructure, and make open source careers possible by sponsoring open source contributors and their projects. Build a GitHub Sponsors profile and receive compensation for your open source work.Quickstart Start hereView all Managing your sponsorshipYou can manage who can see your sponsorship and whether you receive email updates from the sponsored account.Attributing sponsorships to your organizationYou can attribute the sponsorships paid by one of your organizations to another organization.Managing your payouts from GitHub SponsorsYou can view information about past and future payouts from GitHub Sponsors and edit your bank information.PopularSponsoring an open source contributor through GitHubYou can make payments through GitHub to a developer or organization who designs, creates, or maintains open source projects you depend on.About GitHub SponsorsGitHub Sponsors allows the developer community to financially support the people and organizations who design, build, and maintain the open source projects they depend on, directly on GitHub.Tax information for GitHub SponsorsSponsored developers and organizations must submit tax information to GitHub and are responsible for evaluating and paying their own taxes.Sponsoring open source contributorsYou can sponsor contributors, receive updates on developers and organizations you sponsor, and display a sponsor badge throughout GitHub.What's newView all Sponsors now supports Polar and Buy Me a Coffee as funding platform optionsMarch 14Sponsor your dependencies for recurring sponsorships in one checkoutMarch 06Email Preference UpdatesNovember 01GitHub Sponsors communitychaynHQChayn helps women experiencing abuse find the right information and support they need to take control of their lives.foosel👋 I'm Gina, and I'm mostly known for being the creator and main developer of OctoPrint 🐙.dayhaysoosWhat's up? I'm Nick. I'm an engineer who has a new-found passion for removing friction from the e-commerce developer experience.yyx990803I'm working fulltime on Vue.js, a frontend JavaScript framework for building web applications, and Vite, a modern web build tool.calebporzio🚶‍♂️I left my day job in Jan 2019 to pursue open-source. Since then, I've built Laravel Livewire, AlpineJS, and a bunch of other stuff.kjaymillerHi Y'all I'm Jay! 👋 I'm a Marine Corps Veteran turned developer that's been actively coding since 2014. I'm also involved in the productivity space where I can be found helping people with automations for some of their favorite apps and tools.GuidesSetting up GitHub Sponsors for your personal accountYou can become a sponsored developer by joining GitHub Sponsors, completing your sponsored developer profile, creating sponsorship tiers, submitting your bank and tax information, and enabling two-factor authentication for your account on GitHub.@GitHubSetting up GitHub Sponsors for your organizationYour organization can join GitHub Sponsors to receive payments for your work.@GitHubConfiguring webhooks for events in your sponsored accountYou can configure webhooks to alert you when you receive new sponsorships or existing sponsors make changes to their sponsorships.@GitHubExplore guides All GitHub Sponsors docsGetting started with GitHub SponsorsAbout GitHub SponsorsQuickstart for finding contributors to sponsorNavigating your Sponsors dashboardSponsoring open source contributorsAbout sponsorships, fees, and taxesSponsoring an open source contributor through GitHubSponsoring an open source contributor through PatreonManaging your sponsorshipAttributing sponsorships to your organizationPaying for GitHub Sponsors by invoiceUnlinking your Patreon account from GitHubReceiving sponsorships through GitHub SponsorsAbout GitHub Sponsors for open source contributorsSetting up GitHub Sponsors for your personal accountSetting up GitHub Sponsors for your organizationEnabling sponsorships through PatreonUsing a fiscal host to receive GitHub Sponsors payoutsEditing your profile details for GitHub SponsorsManaging your sponsorship goalManaging your sponsorship tiersViewing your sponsors and sponsorshipsManaging your payouts from GitHub SponsorsContacting your sponsorsTax information for GitHub SponsorsUnlinking your Patreon account from your GitHub Sponsors profileDisabling your GitHub Sponsors accountUnpublishing your GitHub Sponsors profileIntegrating with GitHub SponsorsConfiguring webhooks for events in your sponsored accountGetting started with the Sponsors GraphQL API\n\n\n\nGitHub Education documentation GitHub Education helps you teach or learn software development with the tools and support of GitHub's platform and community.Quickstart Start hereView all Apply to GitHub Education as a studentAs a student, you can apply to join GitHub Education and receive access to the student resources and benefits offered by GitHub EducationApply to GitHub Education as a teacherIf you're a teacher, you can apply to join GitHub Education and receive access to the resources and benefits of GitHub Education.Use GitHub at your educational institutionMaximize the benefits of using GitHub at your institution for your students, instructors, and IT staff with GitHub Education and our various training programs for students and instructors.PopularAbout GitHub ClassroomTeachers and school administrators can use GitHub Classroom to create virtual classrooms, make and edit assignments, automatically grade assignment submissions, and more.GitHub Education for studentsAs a student, use GitHub to collaborate on your school projects and build real-world experience.GitHub Education for teachersAs a teacher, use GitHub to collaborate on your work in a classroom, student or research group, and more.GitHub Desktop documentationWith GitHub Desktop, you can interact with GitHub using a GUI instead of the command line or a web browser. You can use GitHub Desktop to complete most Git commands from your desktop, such as pushing to, pulling from, and cloning remote repositories, attributing commits, and creating pull requests, with visual confirmation of changes.GuidesCreating an account on GitHubCreate a personal account to get started with GitHub.@GitHubGit and GitHub learning resourcesThere are a lot of helpful Git and GitHub resources available.@GitHubExplore guides All GitHub Education docsExplore the benefits of teaching and learning with GitHub EducationGitHub Education for students • 4 articlesGitHub Education for teachers • 3 articlesUse GitHub at your educational institution • 3 articlesContribute with GitHub Community ExchangeGetting started with GitHub Community ExchangeSubmitting your repository to GitHub Community ExchangeManaging your submissions to GitHub Community ExchangeManage coursework with GitHub ClassroomGet started with GitHub Classroom • 2 articlesTeach with GitHub Classroom • 15 articlesIntegrate GitHub Classroom with an IDE • 6 articlesLearn with GitHub Classroom • 2 articles\n\n\n\nGitHub for Nonprofits documentation GitHub for Nonprofits helps you teach or learn software development with the tools and support of GitHub's platform and community.Quickstart Start hereGitHub Enterprise Cloud for nonprofitsLearn how to apply for a discounted GitHub Enterprise Cloud plan for nonprofits.GitHub Team plan for nonprofitsLearn how to apply for a free GitHub Team plan for nonprofits.Frequently asked questionsTroubleshooting for GitHub for Nonprofits applicationsOpen Source Projects for GoodNonprofit organizations can partner with open source collaborators to build solutions together.PopularQuickstart for GitHub for NonprofitsLearn how to join the GitHub for Nonprofits community through exclusive discounts and GitHub programming.Frequently asked questionsTroubleshooting common errors with the GitHub for Nonprofits process.GuidesCreating an account on GitHubCreate a personal account to get started with GitHub.@GitHubGit and GitHub learning resourcesThere are a lot of helpful Git and GitHub resources available.@GitHubAll GitHub for Nonprofits docsGitHub Team plan for nonprofitsGetting started with the GitHub Team plan for nonprofitsGitHub Enterprise Cloud for nonprofitsGetting started with discounted GitHub Enterprise CloudOpen Source Projects for GoodAdding an open source projectContributing to an open source for good projectFrequently asked questionsFrequently asked questionsCannot find my organization on GitHub for Nonprofits\n\n\n\nGitHub Support documentation GitHub offers different levels of support with each product, including community forum support and limited email support for everyone, full email support for all paid products, and 24/7 email and callback support with a service level agreement (SLA) if your account includes GitHub Premium Support.Overview Start hereCreating a support ticketYou can use the GitHub Support portal to create a support ticket and speak to GitHub Support.Viewing and updating support ticketsYou can view your support tickets and respond to GitHub Support using the GitHub Support portal.PopularAbout GitHub SupportYou can contact GitHub Support for help troubleshooting issues you encounter while using GitHub.Creating a support ticketYou can use the GitHub Support portal to create a support ticket and speak to GitHub Support.All GitHub Support docsLearning about GitHub SupportAbout GitHub SupportAbout Copilot in GitHub SupportGitHub Marketplace supportContacting GitHub SupportCreating a support ticketUsing Copilot in GitHub SupportViewing and updating support tickets\n\n\n\nContributing to GitHub Docs documentation Learn about how the GitHub Docs team creates documentation and how you can contribute.Start hereBest practices for GitHub DocsFollow these best practices to create documentation that's user-friendly and easy to understand.Style guideFollow this guide to make sure GitHub's documentation stays consistent and follows clear patterns that our readers can understand.About the content modelThe content model describes the structure and types of content that we publish.About contributing to GitHub DocsYou can contribute to GitHub Docs content in several ways.What's newView all Contributing to GitHub DocsOctober 02Docs are being translated to French, German, Korean, and RussianDecember 05Webhook docs generated from the OpenAPI schemaNovember 16All Contribute to GitHub Docs docsWriting for GitHub DocsBest practices for GitHub DocsAbout GitHub's documentation philosophyAbout GitHub's documentation fundamentalsContent design principlesWriting content to be translatedMaking content findable in searchVersioning documentationUsing Markdown and Liquid in GitHub DocsUsing YAML frontmatterUsing videos in GitHub DocsCreating reusable contentCreating screenshotsCreating diagrams for GitHub DocsCreating tool switchers in articlesConfiguring redirectsChanging an article's titleAnnotating code examplesTemplatesStyle guide and content modelStyle guideAbout the content modelContents of a GitHub Docs articleAbout topicsConceptual content typeReferential content typeProcedural content typeTroubleshooting content typeRelease note content typeQuickstart content typeTutorial content typeAbout combining multiple content typesCollaborating on GitHub DocsAbout contributing to GitHub DocsUsing Git on GitHub DocsUsing the TODOCS placeholder to leave notesUsing the content linterLabel referenceSetting up your environment to work on GitHub DocsWorking on GitHub Docs in a codespaceCreating a local environmentTroubleshooting your environment\n\n\n\nGet started/Git basics/Set up GitSet up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.In this articleUsing GitSetting up GitAuthenticating with GitHub from GitNext stepsUsing Git
To use Git on the command line, you will need to download, install, and configure Git on your computer. You can also install GitHub CLI to use GitHub from the command line. For more information, see About GitHub CLI.
If you want to work with Git locally, but do not want to use the command line, you can download and install the GitHub Desktop client. For more information, see About GitHub Desktop.
If you do not need to work with files locally, GitHub lets you complete many Git-related actions directly in the browser, including:

Quickstart for repositories
Fork a repository
Managing files

Setting up Git


Download and install the latest version of Git.
Note

Most Chrome OS devices from 2020 onwards now have a built-in Linux environment, which includes Git. To enable it, go to the Launcher, search for Linux, and click Turn on.
If you are using an older Chrome OS device, another method is required:

Install a terminal emulator such as Termux from the Google Play Store on your Chrome OS device.
From the terminal emulator that you installed, install Git. For example, in Termux, enter apt install git and then type y when prompted.




Set your username in Git.


Set your commit email address in Git.


Authenticating with GitHub from Git
When you connect to a GitHub repository from Git, you will need to authenticate with GitHub using either HTTPS or SSH.
Note

You can authenticate to GitHub using GitHub CLI, for either HTTP or SSH. For more information, see gh auth login.

Connecting over HTTPS (recommended)
If you clone with HTTPS, you can cache your GitHub credentials in Git using a credential helper. For more information, see About remote repositories and Caching your GitHub credentials in Git.
Connecting over SSH
If you clone with SSH, you must generate SSH keys on each computer you use to push or pull from GitHub. For more information, see About remote repositories and Generating a new SSH key and adding it to the ssh-agent.
Next steps
You now have Git and GitHub all set up. You may now choose to create a repository where you can put your projects. Saving your code in a repository allows you to back up your code and share it around the world.


Creating a repository for your project allows you to store code in GitHub. This provides a backup of your work that you can choose to share with other developers. For more information, see Quickstart for repositories.


Forking a repository will allow you to make changes to another repository without affecting the original. For more information, see Fork a repository.


Each repository on GitHub is owned by a person or an organization. You can interact with the people, repositories, and organizations by connecting and following them on GitHub. For more information, see Finding inspiration on GitHub.


GitHub has a great support community where you can ask for help and talk to people from around the world. Join the conversation on GitHub Community.\n\n\n\nAuthentication/Connect with SSHConnecting to GitHub with SSHYou can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network.About SSHUsing the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit. You can also use an SSH key to sign commits.Using SSH agent forwardingTo simplify deploying to a server, you can set up SSH agent forwarding to securely use local SSH keys.Managing deploy keysLearn different ways to manage SSH keys on your servers when you automate deployment scripts and which way is best for you.Checking for existing SSH keysBefore you generate an SSH key, you can check to see if you have any existing SSH keys.Generating a new SSH key and adding it to the ssh-agentAfter you've checked for existing SSH keys, you can generate a new SSH key to use for authentication, then add it to the ssh-agent.Adding a new SSH key to your GitHub accountTo configure your account on GitHub.com to use your new (or existing) SSH key, you'll also need to add the key to your account.Testing your SSH connectionAfter you've set up your SSH key and added it to GitHub, you can test your connection.Working with SSH key passphrasesYou can secure your SSH keys and configure an authentication agent so that you won't have to reenter your passphrase every time you use your SSH keys.\n\n\n\nRepositories/Create & manage repositoriesCreating and managing repositoriesYou can create a repository on GitHub to store and collaborate on your project's files, then manage the repository's name and location.About repositoriesA repository contains all of your code, your files, and each file's revision history. You can discuss and manage your work within the repository.Best practices for repositoriesLearn how to use repositories effectively and securely.Quickstart for repositoriesLearn how to create a new repository and commit your first change in 5 minutes.Repository limitsLearn about limitations for repositories.Creating a new repositoryYou can create a new repository on your personal account or any organization where you have sufficient permissions.Creating a repository from a templateYou can generate a new repository with the same directory structure and files as an existing repository.Creating a template repositoryYou can make an existing repository a template, so you and others can generate new repositories with the same directory structure, branches, and files.Creating an issues-only repositoryGitHub does not provide issues-only access permissions, but you can accomplish this using a second repository which contains only the issues.Duplicating a repositoryTo maintain a mirror of a repository without forking it, you can run a special clone command, then mirror-push to the new repository.Cloning a repositoryWhen you create a repository on GitHub, it exists as a remote repository. You can clone your repository to create a local copy on your computer and sync between the two locations.Troubleshooting cloning errorsIf you're having trouble cloning a repository, check these common errors.Renaming a repositoryYou can rename a repository if you're either an organization owner or have admin permissions for the repository.Transferring a repositoryYou can transfer repositories to other users or organization accounts.Deleting a repositoryYou can delete any repository or fork if you're either an organization owner or have admin permissions for the repository or fork. Deleting a forked repository does not delete the upstream repository.Restoring a deleted repositoryYou can restore some deleted repositories to recover their contents.\n\n\n\nGet started/Writing on GitHub/Start writing on GitHub/Basic formatting syntaxBasic writing and formatting syntaxCreate sophisticated formatting for your prose and code on GitHub with simple syntax.Who can use this feature?Markdown can be used in the GitHub web interface.In this articleHeadingsStyling textQuoting textQuoting codeSupported color modelsLinksSection linksRelative linksCustom anchorsLine breaksImagesListsTask listsMentioning people and teamsReferencing issues and pull requestsReferencing external resourcesUploading assetsUsing emojisParagraphsFootnotesAlertsHiding content with commentsIgnoring Markdown formattingDisabling Markdown renderingFurther readingHeadings
To create a heading, add one to six # symbols before your heading text. The number of # you use will determine the hierarchy level and typeface size of the heading.
# A first-level heading
## A second-level heading
### A third-level heading


When you use two or more headings, GitHub automatically generates a table of contents that you can access by clicking  within the file header. Each heading title is listed in the table of contents and you can click a title to navigate to the selected section.

Styling text
You can indicate emphasis with bold, italic, strikethrough, subscript, or superscript text in comment fields and .md files.




































































StyleSyntaxKeyboard shortcutExampleOutputBold** ** or __ __Command+B (Mac) or Ctrl+B (Windows/Linux)**This is bold text**This is bold textItalic* * or _ _     Command+I (Mac) or Ctrl+I (Windows/Linux)_This text is italicized_This text is italicizedStrikethrough~~ ~~ or ~ ~None~~This was mistaken text~~This was mistaken textBold and nested italic** ** and _ _None**This text is _extremely_ important**This text is extremely importantAll bold and italic*** ***None***All this text is important***All this text is importantSubscript<sub> </sub>NoneThis is a <sub>subscript</sub> textThis is a subscript textSuperscript<sup> </sup>NoneThis is a <sup>superscript</sup> textThis is a superscript textUnderline<ins> </ins>NoneThis is an <ins>underlined</ins> textThis is an underlined text
Quoting text
You can quote text with a >.
Text that is not a quote

> Text that is a quote

Quoted text is indented with a vertical line on the left and displayed using gray type.

Note

When viewing a conversation, you can automatically quote text in a comment by highlighting the text, then typing R. You can quote an entire comment by clicking , then Quote reply. For more information about keyboard shortcuts, see Keyboard shortcuts.

Quoting code
You can call out code or a command within a sentence with single backticks. The text within the backticks will not be formatted. You can also press the Command+E (Mac) or Ctrl+E (Windows/Linux) keyboard shortcut to insert the backticks for a code block within a line of Markdown.
Use `git status` to list all new or modified files that haven't yet been committed.


To format code or text into its own distinct block, use triple backticks.
Some basic Git commands are:
```
git status
git add
git commit
```


For more information, see Creating and highlighting code blocks.
If you are frequently editing code snippets and tables, you may benefit from enabling a fixed-width font in all comment fields on GitHub. For more information, see About writing and formatting on GitHub.
Supported color models
In issues, pull requests, and discussions, you can call out colors within a sentence by using backticks. A supported color model within backticks will display a visualization of the color.
The background color is `#ffffff` for light mode and `#000000` for dark mode.


Here are the currently supported color models.





























ColorSyntaxExampleOutputHEX`#RRGGBB``#0969DA`RGB`rgb(R,G,B)``rgb(9, 105, 218)`HSL`hsl(H,S,L)``hsl(212, 92%, 45%)`
Note


A supported color model cannot have any leading or trailing spaces within the backticks.
The visualization of the color is only supported in issues, pull requests, and discussions.


Links
You can create an inline link by wrapping link text in brackets [ ], and then wrapping the URL in parentheses ( ). You can also use the keyboard shortcut Command+K to create a link. When you have text selected, you can paste a URL from your clipboard to automatically create a link from the selection.
You can also create a Markdown hyperlink by highlighting the text and using the keyboard shortcut Command+V. If you'd like to replace the text with the link, use the keyboard shortcut Command+Shift+V.
This site was built using [GitHub Pages](https://pages.github.com/).

Note

GitHub automatically creates links when valid URLs are written in a comment. For more information, see Autolinked references and URLs.

Section links
You can link directly to any section that has a heading. To view the automatically generated anchor in a rendered file, hover over the section heading to expose the  icon and click the icon to display the anchor in your browser.

If you need to determine the anchor for a heading in a file you are editing, you can use the following basic rules:

Letters are converted to lower-case.
Spaces are replaced by hyphens (-). Any other whitespace or punctuation characters are removed.
Leading and trailing whitespace are removed.
Markup formatting is removed, leaving only the contents (for example, _italics_ becomes italics).
If the automatically generated anchor for a heading is identical to an earlier anchor in the same document, a unique identifier is generated by appending a hyphen and an auto-incrementing integer.

For more detailed information on the requirements of URI fragments, see RFC 3986: Uniform Resource Identifier (URI): Generic Syntax, Section 3.5.
The code block below demonstrates the basic rules used to generate anchors from headings in rendered content.
# Example headings

## Sample Section

## This'll be a _Helpful_ Section About the Greek Letter Θ!
A heading containing characters not allowed in fragments, UTF-8 characters, two consecutive spaces between the first and second words, and formatting.

## This heading is not unique in the file

TEXT 1

## This heading is not unique in the file

TEXT 2

# Links to the example headings above

Link to the sample section: [Link Text](#sample-section).

Link to the helpful section: [Link Text](#thisll-be-a-helpful-section-about-the-greek-letter-Θ).

Link to the first non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file).

Link to the second non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file-1).

Note

If you edit a heading, or if you change the order of headings with "identical" anchors, you will also need to update any links to those headings as the anchors will change.

Relative links
You can define relative links and image paths in your rendered files to help readers navigate to other files in your repository.
A relative link is a link that is relative to the current file. For example, if you have a README file in root of your repository, and you have another file in docs/CONTRIBUTING.md, the relative link to CONTRIBUTING.md in your README might look like this:
[Contribution guidelines for this project](docs/CONTRIBUTING.md)

GitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works. The path of the link will be relative to the current file. Links starting with / will be relative to the repository root. You can use all relative link operands, such as ./ and ../.
Your link text should be on a single line. The example below will not work.
[Contribution
guidelines for this project](docs/CONTRIBUTING.md)

Relative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - we recommend using relative links to refer to other files within your repository.
Custom anchors
You can use standard HTML anchor tags (<a name="unique-anchor-name"></a>) to create navigation anchor points for any location in the document. To avoid ambiguous references, use a unique naming scheme for anchor tags, such as adding a prefix to the name attribute value.
Note

Custom anchors will not be included in the document outline/Table of Contents.

You can link to a custom anchor using the value of the name attribute you gave the anchor. The syntax is exactly the same as when you link to an anchor that is automatically generated for a heading.
For example:
# Section Heading

Some body text of this section.

<a name="my-custom-anchor-point"></a>
Some text I want to provide a direct link to, but which doesn't have its own heading.

(… more content…)

[A link to that custom anchor](#my-custom-anchor-point)

Tip

Custom anchors are not considered by the automatic naming and numbering behavior of automatic heading links.

Line breaks
If you're writing in issues, pull requests, or discussions in a repository, GitHub will render a line break automatically:
This example
Will span two lines

However, if you are writing in an .md file, the example above would render on one line without a line break. To create a line break in an .md file, you will need to include one of the following:


Include two spaces at the end of the first line.
This example  
Will span two lines



Include a backslash at the end of the first line.
This example\
Will span two lines



Include an HTML single line break tag at the end of the first line.
This example<br/>
Will span two lines



If you leave a blank line between two lines, both .md files and Markdown in issues, pull requests, and discussions will render the two lines separated by the blank line:
This example

Will have a blank line separating both lines

Images
You can display an image by adding ! and wrapping the alt text in [ ]. Alt text is a short text equivalent of the information in the image. Then, wrap the link for the image in parentheses ().
![Screenshot of a comment on a GitHub issue showing an image, added in the Markdown, of an Octocat smiling and raising a tentacle.](https://myoctocat.com/assets/images/base-octocat.svg)

GitHub supports embedding images into your issues, pull requests, discussions, comments and .md files. You can display an image from your repository, add a link to an online image, or upload an image. For more information, see Uploading assets.
Note

When you want to display an image that is in your repository, use relative links instead of absolute links.

Here are some examples for using relative links to display an image.





























ContextRelative LinkIn a .md file on the same branch/assets/images/electrocat.pngIn a .md file on another branch/../main/assets/images/electrocat.pngIn issues, pull requests and comments of the repository../blob/main/assets/images/electrocat.png?raw=trueIn a .md file in another repository/../../../../github/docs/blob/main/assets/images/electrocat.pngIn issues, pull requests and comments of another repository../../../github/docs/blob/main/assets/images/electrocat.png?raw=true
Note

The last two relative links in the table above will work for images in a private repository only if the viewer has at least read access to the private repository that contains these images.

For more information, see Relative Links.
The Picture element
The <picture> HTML element is supported.
Lists
You can make an unordered list by preceding one or more lines of text with -, *, or +.
- George Washington
* John Adams
+ Thomas Jefferson


To order your list, precede each line with a number.
1. James Madison
2. James Monroe
3. John Quincy Adams


Nested Lists
You can create a nested list by indenting one or more list items below another item.
To create a nested list using the web editor on GitHub or a text editor that uses a monospaced font, like Visual Studio Code, you can align your list visually. Type space characters in front of your nested list item until the list marker character (- or *) lies directly below the first character of the text in the item above it.
1. First list item
   - First nested list item
     - Second nested list item

Note

In the web-based editor, you can indent or dedent one or more lines of text by first highlighting the desired lines and then using Tab or Shift+Tab respectively.



To create a nested list in the comment editor on GitHub, which doesn't use a monospaced font, you can look at the list item immediately above the nested list and count the number of characters that appear before the content of the item. Then type that number of space characters in front of the nested list item.
In this example, you could add a nested list item under the list item 100. First list item by indenting the nested list item a minimum of five spaces, since there are five characters (100. ) before First list item.
100. First list item
     - First nested list item


You can create multiple levels of nested lists using the same method. For example, because the first nested list item has seven characters (␣␣␣␣␣-␣) before the nested list content First nested list item, you would need to indent the second nested list item by at least two more characters (nine spaces minimum).
100. First list item
     - First nested list item
       - Second nested list item


For more examples, see the GitHub Flavored Markdown Spec.
Task lists
To create a task list, preface list items with a hyphen and space followed by [ ]. To mark a task as complete, use [x].
- [x] #739
- [ ] https://github.com/octo-org/octo-repo/issues/740
- [ ] Add delight to the experience when all tasks are complete :tada:


If a task list item description begins with a parenthesis, you'll need to escape it with \:
- [ ] \(Optional) Open a followup issue
For more information, see About task lists.
Mentioning people and teams
You can mention a person or team on GitHub by typing @ plus their username or team name. This will trigger a notification and bring their attention to the conversation. People will also receive a notification if you edit a comment to mention their username or team name. For more information about notifications, see About notifications.
Note

A person will only be notified about a mention if the person has read access to the repository and, if the repository is owned by an organization, the person is a member of the organization.

@github/support What do you think about these updates?

When you mention a parent team, members of its child teams also receive notifications, simplifying communication with multiple groups of people. For more information, see About teams.
Typing an @ symbol will bring up a list of people or teams on a project. The list filters as you type, so once you find the name of the person or team you are looking for, you can use the arrow keys to select it and press either tab or enter to complete the name. For teams, enter the @organization/team-name and all members of that team will get subscribed to the conversation.
The autocomplete results are restricted to repository collaborators and any other participants on the thread.
Referencing issues and pull requests
You can bring up a list of suggested issues and pull requests within the repository by typing #. Type the issue or pull request number or title to filter the list, and then press either tab or enter to complete the highlighted result.
For more information, see Autolinked references and URLs.
Referencing external resources
If custom autolink references are configured for a repository, then references to external resources, like a JIRA issue or Zendesk ticket, convert into shortened links. To know which autolinks are available in your repository, contact someone with admin permissions to the repository. For more information, see Configuring autolinks to reference external resources.
Uploading assets
You can upload assets like images by dragging and dropping, selecting from a file browser, or pasting. You can upload assets to issues, pull requests, comments, and .md files in your repository.
Using emojis
You can add emoji to your writing by typing :EMOJICODE:, a colon followed by the name of the emoji.
@octocat :+1: This PR looks great - it's ready to merge! :shipit:

Typing : will bring up a list of suggested emoji. The list will filter as you type, so once you find the emoji you're looking for, press Tab or Enter to complete the highlighted result.
For a full list of available emoji and codes, see the Emoji-Cheat-Sheet.
Paragraphs
You can create a new paragraph by leaving a blank line between lines of text.
Footnotes
You can add footnotes to your content by using this bracket syntax:
Here is a simple footnote[^1].

A footnote can also have multiple lines[^2].

[^1]: My reference.
[^2]: To add line breaks within a footnote, prefix new lines with 2 spaces.
  This is a second line.

The footnote will render like this:

Note

The position of a footnote in your Markdown does not influence where the footnote will be rendered. You can write a footnote right after your reference to the footnote, and the footnote will still render at the bottom of the Markdown. Footnotes are not supported in wikis.

Alerts
Alerts are a Markdown extension based on the blockquote syntax that you can use to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the significance of the content.
Use alerts only when they are crucial for user success and limit them to one or two per article to prevent overloading the reader. Additionally, you should avoid placing alerts consecutively. Alerts cannot be nested within other elements.
To add an alert, use a special blockquote line specifying the alert type, followed by the alert information in a standard blockquote. Five types of alerts are available:
> [!NOTE]
> Useful information that users should know, even when skimming content.

> [!TIP]
> Helpful advice for doing things better or more easily.

> [!IMPORTANT]
> Key information users need to know to achieve their goal.

> [!WARNING]
> Urgent info that needs immediate user attention to avoid problems.

> [!CAUTION]
> Advises about risks or negative outcomes of certain actions.

Here are the rendered alerts:

Hiding content with comments
You can tell GitHub to hide content from the rendered Markdown by placing the content in an HTML comment.
<!-- This content will not appear in the rendered Markdown -->

Ignoring Markdown formatting
You can tell GitHub to ignore (or escape) Markdown formatting by using \ before the Markdown character.
Let's rename \*our-new-project\* to \*our-old-project\*.

For more information on backslashes, see Daring Fireball's Markdown Syntax.
Note

The Markdown formatting will not be ignored in the title of an issue or a pull request.

Disabling Markdown rendering
When viewing a Markdown file, you can click Code at the top of the file to disable Markdown rendering and view the file's source instead.

Disabling Markdown rendering enables you to use source view features, such as line linking, which is not possible when viewing rendered Markdown files.
Further reading

GitHub Flavored Markdown Spec
About writing and formatting on GitHub
Working with advanced formatting
Quickstart for writing on GitHub\n\n\n\nPull requests/Collaborate with pull requests/Propose changes/About pull requestsAbout pull requestsLearn about pull requests and draft pull requests on GitHub. Pull requests communicate changes to a branch in a repository. Once a pull request is opened, you can review changes with collaborators and add follow-up commits.Platform navigationMacWindowsLinuxIn this articleAbout pull requestsDraft pull requestsDifferences between commits on compare and pull request pagesFurther readingAbout pull requests
A pull request is a proposal to merge a set of changes from one branch into another. In a pull request, collaborators can review and discuss the proposed set of changes before they integrate the changes into the main codebase. Pull requests display the differences, or diffs, between the content in the source branch and the content in the target branch.
Note

When working with pull requests, keep the following in mind:

If you're working in the shared repository model, we recommend that you use a topic branch for your pull request. While you can send pull requests from any branch or commit, with a topic branch you can push follow-up commits if you need to update your proposed changes.
Be very careful when force pushing commits to a pull request. Force pushing changes the repository history and can corrupt your pull request. If other collaborators branch the project before a force push, the force push may overwrite commits that collaborators based their work on.


You can create pull requests on GitHub.com, with GitHub Desktop, in GitHub Codespaces, on GitHub Mobile, and when using GitHub CLI.
After initializing a pull request, you'll see a review page that shows a high-level overview of the changes between your branch (the compare branch) and the repository's base branch. You can add a summary of the proposed changes, review the changes made by commits, add labels, milestones, and assignees, and @mention individual contributors or teams. See Creating a pull request.
Once you've created a pull request, you can push commits from your topic branch to add them to your existing pull request. These commits will appear in chronological order within your pull request and the changes will be visible in the "Files changed" tab.
Other contributors can review your proposed changes, add review comments, contribute to the pull request discussion, and even add commits to the pull request. By default, in public repositories, any user can submit reviews that approve or request changes to a pull request. Organization owners and repository admins can limit who is able to give approving pull request reviews or request changes. For more information, see Managing pull request reviews in your organization and Managing pull request reviews in your repository.
You can see information about the branch's current deployment status and past deployment activity on the "Conversation" tab. See Viewing deployment activity for your repository.
After you're happy with the proposed changes, you can merge the pull request. If you're working in a shared repository model, you create a pull request and you, or someone else, will merge your changes from your feature branch into the base branch you specify in your pull request. See Merging a pull request.
If status checks are required for a repository, the required status checks must pass before you can merge your branch into the protected branch. For more information, see About protected branches.
You can link a pull request to an issue to show that a fix is in progress and to automatically close the issue when someone merges the pull request. For more information, see Linking a pull request to an issue.
Tip


To toggle between collapsing and expanding all outdated review comments in a pull request, hold down OptionAltAlt and click Show outdated or Hide outdated. For more shortcuts, see Keyboard shortcuts.
You can squash commits when merging a pull request to gain a more streamlined view of changes. See About pull request merges.


You can visit your dashboard to quickly find links to recently updated pull requests you're working on or subscribed to. See About your personal dashboard.
Draft pull requests
Draft pull requests are available in public repositories with GitHub Free for organizations and legacy per-repository billing plans. Draft pull requests are also available in public and private repositories with GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see GitHub’s plans.
When you create a pull request, you can choose to create a pull request that is ready for review or a draft pull request. Draft pull requests cannot be merged, and code owners are not automatically requested to review draft pull requests. See Creating a pull request and Creating a pull request from a fork.
When you're ready to get feedback on your pull request, you can mark your draft pull request as ready for review. Marking a pull request as ready for review will request reviews from any code owners. You can convert a pull request to a draft at any time. See Changing the stage of a pull request.
Differences between commits on compare and pull request pages
The compare and pull request pages use different methods to calculate the diff for changed files:

Compare pages show the diff between the tip of the head ref and the current common ancestor (that is, the merge base) of the head and base ref.
Pull request pages show the diff between the tip of the head ref and the common ancestor of the head and base ref at the time when the pull request was created. Consequently, the merge base used for the comparison might be different.

Further reading

GitHub glossary in the GitHub glossary
About branches
Commenting on a pull request
Closing a pull request\n\n\n\nGet started/Git basics/Manage remote repositoriesManaging remote repositoriesLearn to work with your local repositories on your computer and remote repositories hosted on GitHub.Platform navigationMacWindowsLinuxIn this articleAdding a remote repositoryChanging a remote repository's URLRenaming a remote repositoryRemoving a remote repositoryFurther readingAdding a remote repository
To add a new remote, use the git remote add command on the terminal, in the directory your repository is stored at.
The git remote add command takes two arguments:

A remote name, for example, origin
A remote URL, for example, https://github.com/OWNER/REPOSITORY.git

For example:
$ git remote add origin https://github.com/OWNER/REPOSITORY.git
# Set a new remote

$ git remote -v
# Verify new remote
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)

For more information on which URL to use, see About remote repositories.
Troubleshooting: Remote origin already exists
This error means you've tried to add a remote with a name that already exists in your local repository.
$ git remote add origin https://github.com/octocat/Spoon-Knife.git
> fatal: remote origin already exists.

To fix this, you can:

Use a different name for the new remote.
Rename the existing remote repository before you add the new remote. For more information, see Renaming a remote repository below.
Delete the existing remote repository before you add the new remote. For more information, see Removing a remote repository below.

Changing a remote repository's URL
The git remote set-url command changes an existing remote repository URL.
Tip

For information on the difference between HTTPS and SSH URLs, see About remote repositories.

The git remote set-url command takes two arguments:


An existing remote name. For example, origin or upstream are two common choices.


A new URL for the remote. For example:

If you're updating to use HTTPS, your URL might look like:

https://github.com/OWNER/REPOSITORY.git


If you're updating to use SSH, your URL might look like:

git@github.com:OWNER/REPOSITORY.git



Switching remote URLs from SSH to HTTPS


Open TerminalTerminalGit Bash.


Change the current working directory to your local project.


List your existing remotes in order to get the name of the remote you want to change.
$ git remote -v
> origin  git@github.com:OWNER/REPOSITORY.git (fetch)
> origin  git@github.com:OWNER/REPOSITORY.git (push)



Change your remote's URL from SSH to HTTPS with the git remote set-url command.
git remote set-url origin https://github.com/OWNER/REPOSITORY.git



Verify that the remote URL has changed.
$ git remote -v
# Verify new remote URL
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)



The next time you git fetch, git pull, or git push to the remote repository, you'll be asked for your GitHub username and password. When Git prompts you for your password, enter your personal access token. Alternatively, you can use a credential helper like Git Credential Manager. Password-based authentication for Git has been removed in favor of more secure authentication methods. For more information, see Managing your personal access tokens.
You can use a credential helper so Git will remember your GitHub username and personal access token every time it talks to GitHub.
Switching remote URLs from HTTPS to SSH


Open TerminalTerminalGit Bash.


Change the current working directory to your local project.


List your existing remotes in order to get the name of the remote you want to change.
$ git remote -v
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)



Change your remote's URL from HTTPS to SSH with the git remote set-url command.
git remote set-url origin git@github.com:OWNER/REPOSITORY.git



Verify that the remote URL has changed.
$ git remote -v
# Verify new remote URL
> origin  git@github.com:OWNER/REPOSITORY.git (fetch)
> origin  git@github.com:OWNER/REPOSITORY.git (push)



Troubleshooting: No such remote '[name]'
This error means that the remote you tried to change doesn't exist:
$ git remote set-url sofake https://github.com/octocat/Spoon-Knife
> fatal: No such remote 'sofake'

Check that you've correctly typed the remote name.
Renaming a remote repository
Use the git remote rename command to rename an existing remote.
The git remote rename command takes two arguments:

An existing remote name, for example, origin
A new name for the remote, for example, destination

Example of renaming a remote repository
These examples assume you're cloning using HTTPS, which is recommended.
$ git remote -v
# View existing remotes
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)

$ git remote rename origin destination
# Change remote name from 'origin' to 'destination'

$ git remote -v
# Verify remote's new name
> destination  https://github.com/OWNER/REPOSITORY.git (fetch)
> destination  https://github.com/OWNER/REPOSITORY.git (push)

Troubleshooting: Could not rename config section 'remote.[old name]' to 'remote.[new name]'
This error means that the old remote name you typed doesn't exist.
You can check which remotes currently exist with the git remote -v command:
$ git remote -v
# View existing remotes
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)

Troubleshooting: Remote [new name] already exists
This error means that the remote name you want to use already exists. To solve this, either use a different remote name, or rename the original remote.
Removing a remote repository
Use the git remote rm command to remove a remote URL from your repository.
The git remote rm command takes one argument:

A remote name, for example, destination

Removing the remote URL from your repository only unlinks the local and remote repositories. It does not delete the remote repository.
Example of removing a remote repository
These examples assume you're cloning using HTTPS, which is recommended.
$ git remote -v
# View current remotes
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)
> destination  https://github.com/FORKER/REPOSITORY.git (fetch)
> destination  https://github.com/FORKER/REPOSITORY.git (push)

$ git remote rm destination
# Remove remote
$ git remote -v
# Verify it's gone
> origin  https://github.com/OWNER/REPOSITORY.git (fetch)
> origin  https://github.com/OWNER/REPOSITORY.git (push)

Note

git remote rm does not delete the remote repository from the server. It simply removes the remote and its references from your local repository.

Troubleshooting: Could not remove config section 'remote.[name]'
This error means that the remote you tried to delete doesn't exist:
$ git remote rm sofake
> error: Could not remove config section 'remote.sofake'

Check that you've correctly typed the remote name.
Further reading

"Working with Remotes" from the Pro Git book\n\n\n\nSite policy/Privacy Policies/GitHub General Privacy StatementGitHub General Privacy StatementIn this articleGitHub Privacy StatementPersonal Data We CollectProcessing Purposes: How We Use Your Personal DataSharing of Personal DataPrivate repositories: GitHub AccessLawful Bases for Processing Personal Data (Applicable to EEA and UK End Users)Your Privacy RightsInternational data transfersData Privacy Framework (DPF)Security and RetentionSecurityContact UsInformation for MinorsChanges to Our Privacy StatementTranslationsOur use of cookies and tracking technologiesUS State Specific InformationGitHub Privacy Statement
Effective date: February 1, 2024
Welcome to the GitHub Privacy Statement. This is where we describe how we handle your “Personal Data”, which is information that is directly linked or can be linked to you. It applies to the Personal Data that GitHub, Inc. or GitHub B.V., processes as the “Data Controller” when you interact with websites, applications, and services that display this Statement (collectively, “Services”). This Statement does not apply to services or products that do not display this Statement, such as Previews, where relevant.
End User Notice: Organization-Provided GitHub Accounts
When a school or employer supplies your GitHub account, they assume the role of Data Controller for most Personal Data used in our Services. This enables them to:

Manage and administer your GitHub account, including adjusting privacy settings.
Access and utilize your Personal Data, which includes details on how you use the Services, as well as your content and files.

Should you access a GitHub Service through an account provided by an organization, such as your employer or school, the organization becomes the Data Controller, and this Privacy Statement's direct applicability to you changes. Even so, GitHub remains dedicated to preserving your privacy rights. In such circumstances, GitHub functions as a Data Processor, adhering to the Data Controller's instructions regarding your Personal Data's processing. A Data Protection Agreement governs the relationship between GitHub and the Data Controller. For further details regarding their privacy practices, please refer to the privacy statement of the organization providing your account.
In cases where your organization grants access to GitHub products, GitHub acts as the Data Controller solely for specific processing activities. These activities are clearly defined in a contractual agreement with your organization, known as a Data Protection Agreement. You can review our standard Data Protection Agreement at GitHub Data Protection Agreement. For those limited purposes, this Statement governs the handling of your Personal Data. For all other aspects of GitHub product usage, your organization's policies apply.
Third Party Access and Data Protection
When you use third-party extensions, integrations, or follow references and links within our Services, the privacy policies of these third parties apply to any Personal Data you provide or consent to share with them. Their privacy statements will govern how this data is processed.
Personal Data We Collect
Personal Data is collected from you directly, automatically from your device, and also from third parties. The Personal Data GitHub processes when you use the Services depends on variables like how you interact with our Services (such as through web interfaces, desktop or mobile applications), the features you use (such as pull requests, Codespaces, or GitHub Copilot) and your method of accessing the Services (your preferred IDE). Below, we detail the information we collect through each of these channels:
From You

Account Data: We collect certain information when you open an account such as your GitHub handle, name, email address, password, payment information and transaction information.
User Content and Files: When you use our Services, we collect Personal Data included as part of the information you provide such as code, inputs, text, documents, images, or feedback.
Demographic information: In some cases, you provide us with ethnicity, gender, or similar demographic details.
Feedback Data: This consists of information you submit through surveys, reviews, or interactive features.
Payment Information: For paid subscriptions, we collect details like name, billing address, and payment specifics.
Profile Information: We collect information to create a user profile, which may include a photo, additional email addresses, job title, or biography.
Sales and Marketing Data: This includes information provided for promotional communications, such as name, email address, and company name.
Support Data: When you seek customer support, we collect details like code, text, or multimedia files.

Automatically

Buttons, Tools, and Content from Other Companies: Our Services may contain links or buttons that lead to third-party services like Twitter or LinkedIn. Use of these features may result in data collection. Engaging with these buttons, tools, or content may automatically send certain browser information to these companies. Please review the privacy statements of these companies for more information.
Essential Cookies and Similar Tracking Technologies: We use cookies and similar technologies to provide essential functionality like storing settings and recognizing you while using our Services.
Non-essential Cookies: Depending on your jurisdiction, we may use online analytics products that use cookies to help us analyze how de-identified users use our Services and to enhance your experience when you use the Services. We may also employ third-party Cookies to gather data for interest-based advertising. In some jurisdictions, we only use non-essential cookies after obtaining your consent. See this section for more details and control options.
Email Marketing Interactions: Our emails may have web beacons that offer information on your device type, email client, email reception, opens, and link clicks.
Geolocation Information: Depending on the Service's functionality, we collect regional geolocation data.
Service Usage Information: We collect data about your interactions with the Services, such as IP address, device information, session details, date and time of requests, device type and ID, operating system and application version, information related to your contributions to repositories, and performance of specific features or Services.
Website Usage Data: We automatically log data about your Website interactions, including the referring site, date and time of visit, pages viewed, and links clicked.

From Third Parties

Information from Other Users of the Services: Other users may share information about you when they submit issues and comments. We may also receive information about you if you are identified as a representative or administrator on your company's account.
Publicly Available Sources: We may acquire information about you from publicly available sources like public GitHub repositories.
Services you linked to your GitHub account: When you or your administrator integrate third-party apps or services with our Services, we receive information based on your settings with those services. This can include details like your name and email from services like Google for authentication. The information we receive depends on the third-party's settings and privacy policies. Always review these to understand what data is shared with our Services.
Vendors, Partners, and Affiliates: We may receive information about you from third parties, like vendors, resellers, partners, or affiliates for the purposes outlined in this statement.

Processing Purposes: How We Use Your Personal Data
The Personal Data we process depends on your interaction and access methods with our Services, including the interfaces (web, desktop, mobile apps), features used (pull requests, Codespaces, GitHub Copilot), and your preferred access tools (like your IDE). This section details all the potential ways GitHub may process your Personal Data:

Business Operations: We use Personal Data for activities like billing, accounting, and compensation. This includes creating aggregated statistical data for internal reporting, financial reporting, revenue planning, capacity planning, and forecast modeling (including product strategy).
Communication: We use Personal Data to inform you about new Services, features, offers, promotions, and other pertinent information. This also includes sending confirmations, invoices, technical notices, updates, security alerts, and administrative messages.
Inference: We generate new information from other data we collect to derive likely preferences or other characteristics. For instance, we infer your general geographic location based on your IP address.
Personalization: We use Personal Data to customize the Service to your preferences, to evaluate the effectiveness of enterprise business ads and promotional communications, and to ensure a seamless and consistent user experience.
Safety and Security: To promote safety, integrity, and security across our Services, we process Personal Data, using both automated and, at times, manual techniques for abuse detection, prevention, and violations of terms of service.
Service Provision: We use Personal Data to deliver and update our Services as configured and used by You, and to make ongoing personalized experiences and recommendations.
Troubleshooting: We use Personal Data to identify and resolve technical issues.
Ongoing Service Performance: Personal Data helps us keep the Services up to date and performant, and meet user productivity, reliability, efficacy, quality, privacy, accessibility and security needs.
Complying with and resolving legal obligations: including responding to Data Subject Requests for Personal Data processed by GitHub as Controller (for example website data), tax requirements, agreements and disputes.
Delivering Professional Services: We use Personal Data to deliver training, consulting or implementation (“Professional Services”). This includes providing technical support, professional planning, advice, guidance, data migration, deployment, and solution/software development services.
Improving Professional Services: Enhancing delivery, efficacy, quality, and security of Professional Services and the underlying product(s) based on issues identified while providing Professional Services, including fixing software defects, and otherwise keeping the Professional Services up to date and performant.

When carrying out these activities, GitHub practices data minimization and uses the minimum amount of Personal Information required.
Sharing of Personal Data
We may share Personal Data with the following recipients:

Abuse and Fraud Prevention Entities: We may disclose Personal Data based on a good faith belief it is needed to prevent fraud, abuse, or attacks on our Services, or to protect the safety of GitHub and our users.
Affiliates: Personal Data may be shared with GitHub affiliates, including Microsoft, to facilitate customer service, marketing and advertising, order fulfillment, billing, technical support, and legal and compliance obligations. Our affiliates may only use the Personal Data in a manner consistent with this Privacy Statement.
GitHub Organization Accounts: If an organization adds you to their GitHub account, we might share Personal Data with that organization to fulfill the commercial relationship. In such a case, your use of the Services is protected by a data protection agreement and terms between your organization and GitHub
Competent Authorities: We may disclose Personal Data to authorized law enforcement, regulators, courts, or other public authorities in response to lawful requests or to protect our rights and safety. Please refer to our Guidelines for Legal Requests of User Data for more information.
Corporate Transaction Entities: we might disclose Personal Data within the limits of the law and in accordance with this Privacy Statement for strategic business transactions such as sales or a merger.
Partners and Resellers: We cooperate with third-parties that offer sales, consulting, support, and technical services for our Services. We may share your data with these partners and resellers where allowed, and with your consent when required.
Subprocessors and Service Providers: We may use vendors to provide services on our behalf, including hosting, marketing, advertising, social, analytics, support ticketing, credit card processing, or security services. They are bound by contractual obligations to ensure the security, privacy, and confidentiality of your information. Please visit https://docs.github.com/en/site-policy/privacy-policies/github-subprocessors to see our list of Subprocessors.
Visual Studio Code (GitHub Codespaces): GitHub Codespaces and github.dev offer Visual Studio Code in a web browser, where some telemetry is collected by default. Details on telemetry collection are on the VS Code website. To opt out, go to File > Preferences > Settings in the top left menu of VS Code. Opting out will sync this preference across all future web sessions in GitHub Codespaces and github.dev.
Other Third-party Applications: Upon your instruction, we may share Personal Data with third-party applications available on our Marketplace. You are responsible for the data you instruct us to share with these applications.
Other Users and the Public: Depending on your account settings, we may share Personal Data with other users of the Services and the public. You control what information is made public. To adjust your settings, visit User Settings in your profile. Please be aware that any information you share in a collaborative context may become publicly accessible.

Private repositories: GitHub Access
If your GitHub account has private repositories, you control the access to that information. GitHub personnel does not access private repository information without your consent except as provided in this Privacy Statement and for:

security purposes
automated scanning or manual review for known vulnerabilities, active malware, or other content known to violate our Terms of Service
to assist the repository owner with a support matter
to maintain the integrity of the Services, or
to comply with our legal obligations if we have reason to believe the contents are in violation of the law.

GitHub will provide you with notice regarding private repository access unless doing so is prohibited by law or if GitHub acted in response to a security threat or other risk to security.
Lawful Bases for Processing Personal Data (Applicable to EEA and UK End Users)
GitHub processes Personal Data in compliance with the GDPR, ensuring a lawful basis for each processing activity. The basis varies depending on the data type and the context, including how you access the services. Our processing activities typically fall under these lawful bases:

Contractual Necessity: Processing is required to fulfill our contractual duties to you, in accordance with the GitHub Terms of Service.
Legal Obligation: We process data when it's necessary to comply with applicable laws or to protect the rights, safety, and property of GitHub, our affiliates, users, or third parties.
Legitimate Interests: We process data for purposes that are in our legitimate interests, such as securing our Services, communicating with you, and improving our Services. This is done only when these interests are not overridden by your data protection rights or your fundamental rights and freedoms.
Consent: We process data when you have explicitly consented to such processing. When we rely on consent as the legal basis, you have the right to withdraw your consent for data processing at any time. The procedures for withdrawal are detailed in this Statement and available on our website.

Your Privacy Rights
Depending on your residence location, you may have specific legal rights regarding your Personal Data:

The right to access the data collected about you
The right to request detailed information about the specific types of Personal Data we've collected over the past 12 months, including data disclosed for business purposes
The right to rectify or update inaccurate or incomplete Personal Data under certain circumstances
The right to erase or limit the processing of your Personal Data under specific conditions
The right to object to the processing of your Personal Data, as allowed by applicable law
The right to withdraw consent, where processing is based on your consent
The right to receive your collected Personal Data in a structured, commonly used, and machine-readable format to facilitate its transfer to another company, where technically feasible

To exercise these rights, please send an email to privacy[at]github[dot]com and follow the instructions provided. To verify your identity for security, we may request extra information before addressing your data-related request. Please contact our Data Protection Officer at dpo[at]github[dot]com for any feedback or concerns. Depending on your region, you have the right to complain to your local Data Protection Authority. European users can find authority contacts on the European Data Protection Board website, and UK users on the Information Commissioner’s Office website.
We aim to promptly respond to requests in compliance with legal requirements. Please note that we may retain certain data as necessary for legal obligations or for establishing, exercising, or defending legal claims.
International data transfers
GitHub stores and processes Personal Data in a variety of locations, including your local region, the United States, and other countries where GitHub, its affiliates, subsidiaries, or subprocessors have operations. We transfer Personal Data from the European Union, the United Kingdom, and Switzerland to countries that the European Commission has not recognized as having an adequate level of data protection. When we engage in such transfers, we generally rely on the standard contractual clauses published by the European Commission under Commission Implementing Decision 2021/914, to help protect your rights and enable these protections to travel with your data. To learn more about the European Commission’s decisions on the adequacy of the protection of personal data in the countries where GitHub processes personal data, see this article on the European Commission website.
Data Privacy Framework (DPF)
GitHub also complies with the EU-U.S. Data Privacy Framework (EU-U.S. DPF), the UK Extension to the EU-U.S. DPF, and the Swiss-U.S. Data Privacy Framework (Swiss-U.S. DPF) as set forth by the U.S. Department of Commerce. GitHub has certified to the U.S. Department of Commerce that it adheres to the EU-U.S. Data Privacy Framework Principles (EU-U.S. DPF Principles) with regard to the processing of personal data received from the European Union in reliance on the EU-U.S. DPF and from the United Kingdom (and Gibraltar) in reliance on the UK Extension to the EU-U.S. DPF. GitHub has certified to the U.S. Department of Commerce that it adheres to the Swiss-U.S. Data Privacy Framework Principles (Swiss-U.S. DPF Principles) with regard to the processing of personal data received from Switzerland in reliance on the Swiss-U.S. DPF. If there is any conflict between the terms in this privacy statement and the EU-U.S. DPF Principles and/or the Swiss-U.S. DPF Principles, the Principles shall govern. To learn more about the Data Privacy Framework (DPF) program, and to view our certification, please visit https://www.dataprivacyframework.gov/.
GitHub has the responsibility for the processing of Personal Data it receives under the Data Privacy Framework (DPF) Principles and subsequently transfers to a third party acting as an agent on GitHub’s behalf. GitHub shall remain liable under the DPF Principles if its agent processes such Personal Data in a manner inconsistent with the DPF Principles, unless the organization proves that it is not responsible for the event giving rise to the damage.
Dispute resolution process
In compliance with the EU-U.S. DPF, the UK Extension to the EU-U.S. DPF, and the Swiss-U.S. DPF, GitHub commits to resolve DPF Principles-related complaints about our collection and use of your personal information. EU, UK, and Swiss individuals with inquiries or complaints regarding our handling of personal data received in reliance on the EU-U.S. DPF, the UK Extension, and the Swiss-U.S. DPF should first contact GitHub at: dpo[at]github[dot]com.
If you do not receive timely acknowledgment of your DPF Principles-related complaint from us, or if we have not addressed your DPF Principles-related complaint to your satisfaction, please visit https://go.adr.org/dpf_irm.html for more information or to file a complaint. The services of the International Centre for Dispute Resolution are provided at no cost to you.
An individual has the possibility, under certain conditions, to invoke binding arbitration for complaints regarding DPF compliance not resolved by any of the other DPF mechanisms. For additional information visit https://www.dataprivacyframework.gov/s/article/ANNEX-I-introduction-dpf?tabset-35584=2.
Government Enforcement
GitHub is subject to the investigatory and enforcement powers of the Federal Trade Commission (FTC). Under Section 5 of the Federal Trade Commission Act (15 U.S.C. § 45), an organization's failure to abide by commitments to implement the DPF Principles may be challenged as deceptive by the FTC. The FTC has the power to prohibit such misrepresentations through administrative orders or by seeking court orders.
Security and Retention
GitHub uses appropriate administrative, technical, and physical security controls to protect your Personal Data. We’ll retain your Personal Data as long as your account is active and as needed to fulfill contractual obligations, comply with legal requirements, resolve disputes, and enforce agreements. The retention duration depends on the purpose of data collection and any legal obligations.
Security
GitHub uses administrative, technical, and physical security controls where appropriate to protect your Personal Data.
Contact Us
Contact us via our contact form or by emailing our Data Protection Officer at dpo[at]github[dot]com.
Our addresses are:
GitHub B.V.
Prins Bernhardplein 200, Amsterdam
1097JB
The Netherlands
GitHub, Inc.
88 Colin P. Kelly Jr. St.
San Francisco, CA 94107
United States
Information for Minors
Our Services are not intended for individuals under the age of 13. We do not intentionally gather Personal Data from such individuals. If you become aware that a minor has provided us with Personal Data, please notify us.
Changes to Our Privacy Statement
GitHub may periodically revise this Privacy Statement. If there are material changes to the statement, we will provide at least 30 days prior notice by updating our website or sending an email to your primary email address associated with your GitHub account.
Translations
Below are translations of this document into other languages. In the event of any conflict, uncertainty, or apparent inconsistency between any of those versions and the English version, this English version is the controlling version.
French
Cliquez ici pour obtenir la version française: Déclaration de confidentialité de GitHub (PDF).
Other translations
For translations of this statement into other languages, please visit https://docs.github.com/ and select a language from the drop-down menu under “English.”
Our use of cookies and tracking technologies
Cookies and tracking technologies
GitHub uses cookies to provide, secure and improve our Service or to develop new features and functionality of our Service. For example, we use them to (i) keep you logged in, (ii) remember your preferences, (iii) identify your device for security and fraud purposes, including as needed to maintain the integrity of our Service, (iv) compile statistical reports, and (v) provide information and insight for future development of GitHub. We provide more information about cookies on GitHub that describes the cookies we set, the needs we have for those cookies, and the expiration of such cookies.
For Enterprise Marketing Pages, we may also use non-essential cookies to (i) gather information about enterprise users’ interests and online activities to personalize their experiences, including by making the ads, content, recommendations, and marketing seen or received more relevant and (ii) serve and measure the effectiveness of targeted advertising and other marketing efforts. If you disable the non-essential cookies on the Enterprise Marketing Pages, the ads, content, and marketing you see may be less relevant.
Our emails to users may contain a pixel tag, which is a small, clear image that can tell us whether or not you have opened an email and what your IP address is. We use this pixel tag to make our email communications more effective and to make sure we are not sending you unwanted email.
The length of time a cookie will stay on your browser or device depends on whether it is a “persistent” or “session” cookie. Session cookies will only stay on your device until you stop browsing. Persistent cookies stay until they expire or are deleted. The expiration time or retention period applicable to persistent cookies depends on the purpose of the cookie collection and tool used. You may be able to delete cookie data. For more information, see GitHub General Privacy Statement.
What are cookies and similar technologies?
We use cookies and similar technologies, such as web beacons, local storage, and mobile analytics, to operate and provide our Services. When visiting Enterprise Marketing Pages, like resources.github.com, these and additional cookies, like advertising IDs, may be used for sales and marketing purposes.
Cookies are small text files stored by your browser on your device. A cookie can later be read when your browser connects to a web server in the same domain that placed the cookie. The text in a cookie contains a string of numbers and letters that may uniquely identify your device and can contain other information as well. This allows the web server to recognize your browser over time, each time it connects to that web server.
Web beacons are electronic images (also called “single-pixel” or “clear GIFs”) that are contained within a website or email. When your browser opens a webpage or email that contains a web beacon, it automatically connects to the web server that hosts the image (typically operated by a third party). This allows that web server to log information about your device and to set and read its own cookies. In the same way, third-party content on our websites (such as embedded videos, plug-ins, or ads) results in your browser connecting to the third-party web server that hosts that content.
Mobile identifiers for analytics can be accessed and used by apps on mobile devices in much the same way that websites access and use cookies. When visiting Enterprise Marketing pages, like resources.github.com, on a mobile device these may allow us and our third-party analytics and advertising partners to collect data for sales and marketing purposes.
We may also use so-called “flash cookies” (also known as “Local Shared Objects” or “LSOs”) to collect and store information about your use of our Services. Flash cookies are commonly used for advertisements and videos.
How do we and our partners use cookies and similar technologies?
The GitHub Services use cookies and similar technologies for a variety of purposes, including to store your preferences and settings, enable you to sign-in, analyze how our Services perform, track your interaction with the Services, develop inferences, combat fraud, and fulfill other legitimate purposes. Some of these cookies and technologies may be provided by third parties, including service providers and advertising partners. For example, our analytics and advertising partners may use these technologies in our Services to collect personal information (such as the pages you visit, the links you click on, and similar usage information, identifiers, and device information) related to your online activities over time and across Services for various purposes, including targeted advertising. GitHub will place non-essential cookies on pages where we market products and services to enterprise customers, for example, on resources.github.com.
We and/or our partners also share the information we collect or infer with third parties for these purposes.
The table below provides additional information about how we use different types of cookies:

























PurposeDescriptionRequired CookiesGitHub uses required cookies to perform essential website functions and to provide the services. For example, cookies are used to log you in, save your language preferences, provide a shopping cart experience, improve performance, route traffic between web servers, detect the size of your screen, determine page load times, improve user experience, and for audience measurement. These cookies are necessary for our websites to work.AnalyticsWe allow third parties to use analytics cookies to understand how you use our websites so we can make them better. For example, cookies are used to gather information about the pages you visit and how many clicks you need to accomplish a task. We also use some analytics cookies to provide personalized advertising.Social MediaGitHub and third parties use social media cookies to show you ads and content based on your social media profiles and activity on GitHub’s websites. This ensures that the ads and content you see on our websites and on social media will better reflect your interests. This also enables third parties to develop and improve their products, which they may use on websites that are not owned or operated by GitHub.AdvertisingIn addition, GitHub and third parties use advertising cookies to show you new ads based on ads you've already seen. Cookies also track which ads you click or purchases you make after clicking an ad. This is done both for payment purposes and to show you ads that are more relevant to you. For example, cookies are used to detect when you click an ad and to show you ads based on your social media interests and website browsing history.
What are your cookie choices and controls?
You have several options to disable non-essential cookies:


Specifically on GitHub Enterprise Marketing Pages
Any GitHub page that serves non-essential cookies will have a link in the page’s footer to cookie settings. You can express your preferences at any time by clicking on that linking and updating your settings.
Some users will also be able to manage non-essential cookies via a cookie consent banner, including the options to accept, manage, and reject all non-essential cookies.


Generally for all websites
You can control the cookies you encounter on the web using a variety of widely-available tools. For example:



If your browser sends a Do Not Track (DNT) signal, GitHub will not set non-essential cookies and will not load third party resources which set non-essential cookies.
Many browsers provide cookie controls which may limit the types of cookies you encounter online. Check out the documentation for your browser to learn more.
If you enable a browser extension designed to block tracking, such as Privacy Badger, non-essential cookies set by a website or third parties may be disabled.
If you enable a browser extension designed to block unwanted content, such as uBlock Origin, non-essential cookies will be disabled to the extent that content that sets non-essential cookies will be blocked.
You may use the Global Privacy Control (GPC) to communicate your privacy preferences. If GitHub detects the GPC signal from your device, GitHub will not share your data (we do not sell your data). To learn more, visit Global Privacy Control — Take Control Of Your Privacy
Advertising controls. Our advertising partners may participate in associations that provide simple ways to opt out of ad targeting, which you can access at:
United States: NAI and DAA
Canada: Digital Advertising Alliance of Canada
Europe: European Digital Advertising Alliance

These choices are specific to the browser you are using. If you access our Services from other devices or browsers, take these actions from those systems to ensure your choices apply to the data collected when you use those systems.
US State Specific Information
This section provides extra information specifically for residents of certain US states that have distinct data privacy laws and regulations. These laws may grant specific rights to residents of these states when the laws come into effect. This section uses the term “personal information” as an equivalent to the term “Personal Data.”
Privacy Rights
These rights are common to the US State privacy laws:

Right to Knowledge and Correction: You have the right to request details on the specific personal information we’ve collected about you and the right to correct inaccurate information. You can exercise this right by contacting us. You can also access and edit basic account information in your settings.
Right to Know Data Recipients: We share your information with service providers for legitimate business operations, such as data storage and hosting. For more details, please see “Sharing Your Information” below.
Right to request Deletion: You reserve the right to request the deletion of your data, barring a few exceptions. Such exceptions include circumstances where we are required to retain data to comply with legal obligations, detect fraudulent activity, investigate reports of abuse or other violations of our Terms of Service, or rectify security issues. Upon receiving your verified request, we will promptly delete your personal information (unless an exception applies), and instruct our service providers to do the same. We employ brief retention terms by design.
Right to a Timely Response: You are allowed to make two free requests in any 12-month period. We commit to responding to your request within 45 days. In complex cases, we may extend our response time by an additional 45 days.
Non-Discrimination: We will not hold it against you when you exercise any of your rights. On the contrary, we encourage you to review your privacy settings closely and contact us with any questions.

Notice of Collection of Personal Information
We may collect various categories of personal information about our website visitors and users of "Services" which includes GitHub applications, software, products, or services. That information includes identifiers/contact information, demographic information, payment information, commercial information, internet or electronic network activity information, geolocation data, audio, electronic, visual, or similar information, and inferences drawn from such information.
We collect this information for various purposes. This includes identifying accessibility gaps and offering targeted support, fostering diversity and representation, providing services, troubleshooting, conducting business operations such as billing and security, improving products and supporting research, communicating important information, ensuring personalized experiences, and promoting safety and security.
Exercising your Privacy Rights
To make an access, deletion, correction, or opt-out request, please send an email to privacy[at]github[dot]com and follow the instructions provided. We may need to verify your identity before processing your request. If you choose to use an authorized agent to submit a request on your behalf, please ensure they have your signed permission or power of attorney as required.
To opt out of the sharing of your personal information, you can click on the "Do Not Share My Personal Information" link on the footer of our Websites or use the Global Privacy Control ("GPC") if available. Authorized agents can also submit opt-out requests on your behalf.
California
Mandatory Disclosures
We also make the following disclosures for purposes of compliance with California privacy law:

We collected the following categories of personal information in the last 12 months: identifiers/contact information, demographic information (such as gender), payment card information associated with you, commercial information, Internet or other electronic network activity information, geolocation data, audio, electronic, visual or similar information, and inferences drawn from the above.
The sources of personal information from whom we collected are: directly from you, automatically or from third parties.
The business or commercial purposes of collecting personal information are as summarized above and in our Privacy Statement under Processing Purposes.
We disclosed the following categories of personal information for a business purpose in the last 12 months: identifiers/contact information, demographic information (such as gender and rough geographic location), payment information, commercial information, Internet or other electronic network activity information, geolocation data, audio, electronic, visual or similar information, and inferences drawn from the above. We disclosed each category to third-party business partners and service providers, third-party sites or platforms such as social networking sites, and other third parties as described in the Sharing of Personal Data section of our Privacy Statement.
As defined by applicable law, we “shared” the following categories of personal information in the last 12 months: identifiers/contact information, Internet or other electronic network activity information, and inferences drawn from the above. We shared each category to or with advertising networks, data analytics providers, and social networks.
The business or commercial purpose of sharing personal information is to assist us with marketing, advertising, and audience measurement.
We do not “sell” or “share” the personal information of known minors under 16 years of age.

Shine the Light Act
Under California Civil Code section 1798.83, also known as the “Shine the Light” law, California residents who have provided personal information to a business with which the individual has established a business relationship for personal, family, or household purposes (“California Customers”) may request information about whether the business has disclosed personal information to any third parties for the third parties’ direct marketing purposes. Please be aware that we do not disclose personal information to any third parties for their direct marketing purposes as defined by this law. California Customers may request further information about our compliance with this law by emailing (privacy[at]github[dot]com). Please note that businesses are required to respond to one request per California Customer each year and may not be required to respond to requests made by means other than through the designated email address.
Removal of Content
California residents under the age of 18 who are registered users of online sites, services, or applications have a right under California Business and Professions Code Section 22581 to remove, or request and obtain removal of, content or information they have publicly posted. To remove content or information you have publicly posted, please submit a Private Information Removal request. Alternatively, to request that we remove such content or information, please send a detailed description of the specific content or information you wish to have removed to GitHub support. Please be aware that your request does not guarantee complete or comprehensive removal of content or information posted online and that the law may not permit or require removal in certain circumstances. If you have any questions about our privacy practices with respect to California residents, please send an email to privacy[at]github[dot]com.
We value the trust you place in us and are committed to handling your personal information with care and respect. If you have any questions or concerns about our privacy practices, please email our Data Protection Officer at dpo[at]github[dot]com.
Colorado/Connecticut/Virginia
If you live in Colorado, Connecticut, or Virginia you have some additional rights:

If we deny your rights request, you have the right to appeal that decision. We will provide you with the necessary information to submit an appeal at that time.
You have the right to opt out of profiling in furtherance of decisions that produce legal or similarly significant effects concerning the consumer. GitHub does not engage in such profiling as defined by Colorado law, so there’s no need to opt out.

Nevada
We do not sell your covered information, as defined under Chapter 603A of the Nevada Revised Statutes. If you still have questions about your covered information or anything else in our Privacy Statement, please send an email to privacy[at]github[dot]com.\n\n\n\nContributing to GitHub Docs documentation Learn about how the GitHub Docs team creates documentation and how you can contribute.Start hereBest practices for GitHub DocsFollow these best practices to create documentation that's user-friendly and easy to understand.Style guideFollow this guide to make sure GitHub's documentation stays consistent and follows clear patterns that our readers can understand.About the content modelThe content model describes the structure and types of content that we publish.About contributing to GitHub DocsYou can contribute to GitHub Docs content in several ways.What's newView all Contributing to GitHub DocsOctober 02Docs are being translated to French, German, Korean, and RussianDecember 05Webhook docs generated from the OpenAPI schemaNovember 16All Contribute to GitHub Docs docsWriting for GitHub DocsBest practices for GitHub DocsAbout GitHub's documentation philosophyAbout GitHub's documentation fundamentalsContent design principlesWriting content to be translatedMaking content findable in searchVersioning documentationUsing Markdown and Liquid in GitHub DocsUsing YAML frontmatterUsing videos in GitHub DocsCreating reusable contentCreating screenshotsCreating diagrams for GitHub DocsCreating tool switchers in articlesConfiguring redirectsChanging an article's titleAnnotating code examplesTemplatesStyle guide and content modelStyle guideAbout the content modelContents of a GitHub Docs articleAbout topicsConceptual content typeReferential content typeProcedural content typeTroubleshooting content typeRelease note content typeQuickstart content typeTutorial content typeAbout combining multiple content typesCollaborating on GitHub DocsAbout contributing to GitHub DocsUsing Git on GitHub DocsUsing the TODOCS placeholder to leave notesUsing the content linterLabel referenceSetting up your environment to work on GitHub DocsWorking on GitHub Docs in a codespaceCreating a local environmentTroubleshooting your environment\n\n\n\nSite policy/GitHub Terms/GitHub Terms of ServiceGitHub Terms of ServiceIn this articleSummaryThe GitHub Terms of ServiceA. DefinitionsB. Account TermsC. Acceptable UseD. User-Generated ContentE. Private RepositoriesF. Copyright Infringement and DMCA PolicyG. Intellectual Property NoticeH. API TermsI. GitHub Additional Product TermsJ. Beta PreviewsK. PaymentL. Cancellation and TerminationM. Communications with GitHubN. Disclaimer of WarrantiesO. Limitation of LiabilityP. Release and IndemnificationQ. Changes to These TermsR. MiscellaneousThank you for using GitHub! We're happy you're here. Please read this Terms of Service agreement carefully before accessing or using GitHub. Because it is such an important contract between us and our users, we have tried to make it as clear as possible. For your convenience, we have presented these terms in a short non-binding summary followed by the full legal terms.
Summary

















































































SectionWhat can you find there?A. DefinitionsSome basic terms, defined in a way that will help you understand this agreement. Refer back up to this section for clarification.B. Account TermsThese are the basic requirements of having an Account on GitHub.C. Acceptable UseThese are the basic rules you must follow when using your GitHub Account.D. User-Generated ContentYou own the content you post on GitHub. However, you have some responsibilities regarding it, and we ask you to grant us some rights so we can provide services to you.E. Private RepositoriesThis section talks about how GitHub will treat content you post in private repositories.F. Copyright & DMCA PolicyThis section talks about how GitHub will respond if you believe someone is infringing your copyrights on GitHub.G. Intellectual Property NoticeThis describes GitHub's rights in the website and service.H. API TermsThese are the rules for using GitHub's APIs, whether you are using the API for development or data collection.I. Additional Product TermsWe have a few specific rules for GitHub's features and products.J. Beta PreviewsThese are some of the additional terms that apply to GitHub's features that are still in development.K. PaymentYou are responsible for payment. We are responsible for billing you accurately.L. Cancellation and TerminationYou may cancel this agreement and close your Account at any time.M. Communications with GitHubWe only use email and other electronic means to stay in touch with our users. We do not provide phone support.N. Disclaimer of WarrantiesWe provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect.O. Limitation of LiabilityWe will not be liable for damages or losses arising from your use or inability to use the service or otherwise arising under this agreement. Please read this section carefully; it limits our obligations to you.P. Release and IndemnificationYou are fully responsible for your use of the service.Q. Changes to these Terms of ServiceWe may modify this agreement, but we will give you 30 days' notice of material changes.R. MiscellaneousPlease see this section for legal details including our choice of law.
The GitHub Terms of Service
Effective date: November 16, 2020
A. Definitions
Short version: We use these basic terms throughout the agreement, and they have specific meanings. You should know what we mean when we use each of the terms. There's not going to be a test on it, but it's still useful information.

An "Account" represents your legal relationship with GitHub. A “Personal Account” represents an individual User’s authorization to log in to and use the Service and serves as a User’s identity on GitHub. “Organizations” are shared workspaces that may be associated with a single entity or with one or more Users where multiple Users can collaborate across many projects at once. A Personal Account can be a member of any number of Organizations.
The “Agreement” refers, collectively, to all the terms, conditions, notices contained or referenced in this document (the “Terms of Service” or the "Terms") and all other operating rules, policies (including the GitHub Privacy Statement, available at github.com/site/privacy) and procedures that we may publish from time to time on the Website. Most of our site policies are available at docs.github.com/categories/site-policy.
"Beta Previews" mean software, services, or features identified as alpha, beta, preview, early access, or evaluation, or words or phrases with similar meanings.
“Content” refers to content featured or displayed through the Website, including without limitation code, text, data, articles, images, photographs, graphics, software, applications, packages, designs, features, and other materials that are available on the Website or otherwise available through the Service. "Content" also includes Services. “User-Generated Content” is Content, written or otherwise, created or uploaded by our Users. "Your Content" is Content that you create or own.
“GitHub,” “We,” and “Us” refer to GitHub, Inc., as well as our affiliates, directors, subsidiaries, contractors, licensors, officers, agents, and employees.
The “Service” refers to the applications, software, products, and services provided by GitHub, including any Beta Previews.
“The User,” “You,” and “Your” refer to the individual person, company, or organization that has visited or is using the Website or Service; that accesses or uses any part of the Account; or that directs the use of the Account in the performance of its functions. A User must be at least 13 years of age. Special terms may apply for business or government Accounts (See Section B(5): Additional Terms).
The “Website” refers to GitHub’s website located at github.com, and all content, services, and products provided by GitHub at or through the Website. It also refers to GitHub-owned subdomains of github.com, such as education.github.com and pages.github.com. These Terms also govern GitHub’s conference websites, such as githubuniverse.com, and product websites, such as electronjs.org. Occasionally, websites owned by GitHub may provide different or additional terms of service. If those additional terms conflict with this Agreement, the more specific terms apply to the relevant page or service.

B. Account Terms
Short version: Personal Accounts and Organizations have different administrative controls; a human must create your Account; you must be 13 or over; you must provide a valid email address; and you may not have more than one free Account. You alone are responsible for your Account and anything that happens while you are signed in to or using your Account. You are responsible for keeping your Account secure.
1. Account Controls


Users. Subject to these Terms, you retain ultimate administrative control over your Personal Account and the Content within it.


Organizations. The "owner" of an Organization that was created under these Terms has ultimate administrative control over that Organization and the Content within it. Within the Service, an owner can manage User access to the Organization’s data and projects. An Organization may have multiple owners, but there must be at least one Personal Account designated as an owner of an Organization. If you are the owner of an Organization under these Terms, we consider you responsible for the actions that are performed on or through that Organization.


2. Required Information
You must provide a valid email address in order to complete the signup process. Any other information requested, such as your real name, is optional, unless you are accepting these terms on behalf of a legal entity (in which case we need more information about the legal entity) or if you opt for a paid Account, in which case additional information will be necessary for billing purposes.
3. Account Requirements
We have a few simple rules for Personal Accounts on GitHub's Service.

You must be a human to create an Account. Accounts registered by "bots" or other automated methods are not permitted. We do permit machine accounts:
A machine account is an Account set up by an individual human who accepts the Terms on behalf of the Account, provides a valid email address, and is responsible for its actions. A machine account is used exclusively for performing automated tasks. Multiple users may direct the actions of a machine account, but the owner of the Account is ultimately responsible for the machine's actions. You may maintain no more than one free machine account in addition to your free Personal Account.
One person or legal entity may maintain no more than one free Account (if you choose to control a machine account as well, that's fine, but it can only be used for running a machine).
You must be age 13 or older. While we are thrilled to see brilliant young coders get excited by learning to program, we must comply with United States law. GitHub does not target our Service to children under 13, and we do not permit any Users under 13 on our Service. If we learn of any User under the age of 13, we will terminate that User’s Account immediately. If you are a resident of a country outside the United States, your country’s minimum age may be older; in such a case, you are responsible for complying with your country’s laws.
Your login may only be used by one person — i.e., a single login may not be shared by multiple people. A paid Organization may only provide access to as many Personal Accounts as your subscription allows.
You may not use GitHub in violation of export control or sanctions laws of the United States or any other applicable jurisdiction. You may not use GitHub if you are or are working on behalf of a Specially Designated National (SDN) or a person subject to similar blocking or denied party prohibitions administered by a U.S. government agency. GitHub may allow persons in certain sanctioned countries or territories to access certain GitHub services pursuant to U.S. government authorizations. For more information, please see our Export Controls policy.

4. Account Security
You are responsible for keeping your Account secure while you use our Service. We offer tools such as two-factor authentication to help you maintain your Account's security, but the content of your Account and its security are up to you.

You are responsible for all content posted and activity that occurs under your Account (even when content is posted by others who have Accounts under your Account).
You are responsible for maintaining the security of your Account and password. GitHub cannot and will not be liable for any loss or damage from your failure to comply with this security obligation.
You will promptly notify GitHub by contacting us through the GitHub Support portal if you become aware of any unauthorized use of, or access to, our Service through your Account, including any unauthorized use of your password or Account.

5. Additional Terms
In some situations, third parties' terms may apply to your use of GitHub. For example, you may be a member of an organization on GitHub with its own terms or license agreements; you may download an application that integrates with GitHub; or you may use GitHub to authenticate to another service. Please be aware that while these Terms are our full agreement with you, other parties' terms govern their relationships with you.
If you are a government User or otherwise accessing or using any GitHub Service in a government capacity, this Government Amendment to GitHub Terms of Service applies to you, and you agree to its provisions.
If you have signed up for GitHub Enterprise Cloud, the Enterprise Cloud Addendum applies to you, and you agree to its provisions.
C. Acceptable Use
Short version: GitHub hosts a wide variety of collaborative projects from all over the world, and that collaboration only works when our users are able to work together in good faith. While using the service, you must follow the terms of this section, which include some restrictions on content you can post, conduct on the service, and other limitations. In short, be excellent to each other.
Your use of the Website and Service must not violate any applicable laws, including copyright or trademark laws, export control or sanctions laws, or other laws in your jurisdiction. You are responsible for making sure that your use of the Service is in compliance with laws and any applicable regulations.
You agree that you will not under any circumstances violate our Acceptable Use Policies or Community Guidelines.
D. User-Generated Content
Short version: You own content you create, but you allow us certain rights to it, so that we can display and share the content you post. You still have control over your content, and responsibility for it, and the rights you grant us are limited to those we need to provide the service. We have the right to remove content or close Accounts if we need to.
1. Responsibility for User-Generated Content
You may create or upload User-Generated Content while using the Service. You are solely responsible for the content of, and for any harm resulting from, any User-Generated Content that you post, upload, link to or otherwise make available via the Service, regardless of the form of that Content. We are not responsible for any public display or misuse of your User-Generated Content.
2. GitHub May Remove Content
We have the right to refuse or remove any User-Generated Content that, in our sole discretion, violates any laws or GitHub terms or policies. User-Generated Content displayed on GitHub Mobile may be subject to mobile app stores' additional terms.
3. Ownership of Content, Right to Post, and License Grants
You retain ownership of and responsibility for Your Content. If you're posting anything you did not create yourself or do not own the rights to, you agree that you are responsible for any Content you post; that you will only submit Content that you have the right to post; and that you will fully comply with any third party licenses relating to Content you post.
Because you retain ownership of and responsibility for Your Content, we need you to grant us — and other GitHub Users — certain legal permissions, listed in Sections D.4 — D.7. These license grants apply to Your Content. If you upload Content that already comes with a license granting GitHub the permissions we need to run our Service, no additional license is required. You understand that you will not receive any payment for any of the rights granted in Sections D.4 — D.7. The licenses you grant to us will end when you remove Your Content from our servers, unless other Users have forked it.
4. License Grant to Us
We need the legal right to do things like host Your Content, publish it, and share it. You grant us and our legal successors the right to store, archive, parse, and display Your Content, and make incidental copies, as necessary to provide the Service, including improving the Service over time. This license includes the right to do things like copy it to our database and make backups; show it to you and other users; parse it into a search index or otherwise analyze it on our servers; share it with other users; and perform it, in case Your Content is something like music or video.
This license does not grant GitHub the right to sell Your Content. It also does not grant GitHub the right to otherwise distribute or use Your Content outside of our provision of the Service, except that as part of the right to archive Your Content, GitHub may permit our partners to store and archive Your Content in public repositories in connection with the GitHub Arctic Code Vault and GitHub Archive Program.
5. License Grant to Other Users
Any User-Generated Content you post publicly, including issues, comments, and contributions to other Users' repositories, may be viewed by others. By setting your repositories to be viewed publicly, you agree to allow others to view and "fork" your repositories (this means that others may make their own copies of Content from your repositories in repositories they control).
If you set your pages and repositories to be viewed publicly, you grant each User of GitHub a nonexclusive, worldwide license to use, display, and perform Your Content through the GitHub Service and to reproduce Your Content solely on GitHub as permitted through GitHub's functionality (for example, through forking). You may grant further rights if you adopt a license. If you are uploading Content you did not create or own, you are responsible for ensuring that the Content you upload is licensed under terms that grant these permissions to other GitHub Users.
6. Contributions Under Repository License
Whenever you add Content to a repository containing notice of a license, you license that Content under the same terms, and you agree that you have the right to license that Content under those terms. If you have a separate agreement to license that Content under different terms, such as a contributor license agreement, that agreement will supersede.
Isn't this just how it works already? Yep. This is widely accepted as the norm in the open-source community; it's commonly referred to by the shorthand "inbound=outbound". We're just making it explicit.
7. Moral Rights
You retain all moral rights to Your Content that you upload, publish, or submit to any part of the Service, including the rights of integrity and attribution. However, you waive these rights and agree not to assert them against us, to enable us to reasonably exercise the rights granted in Section D.4, but not otherwise.
To the extent this agreement is not enforceable by applicable law, you grant GitHub the rights we need to use Your Content without attribution and to make reasonable adaptations of Your Content as necessary to render the Website and provide the Service.
E. Private Repositories
Short version: We treat the content of private repositories as confidential, and we only access it as described in our Privacy Statement—for security purposes, to assist the repository owner with a support matter, to maintain the integrity of the Service, to comply with our legal obligations, if we have reason to believe the contents are in violation of the law, or with your consent.
1. Control of Private Repositories
Some Accounts may have private repositories, which allow the User to control access to Content.
2. Confidentiality of Private Repositories
GitHub considers the contents of private repositories to be confidential to you. GitHub will protect the contents of private repositories from unauthorized use, access, or disclosure in the same manner that we would use to protect our own confidential information of a similar nature and in no event with less than a reasonable degree of care.
3. Access
GitHub personnel may only access the content of your private repositories in the situations described in our Privacy Statement.
You may choose to enable additional access to your private repositories. For example:

You may enable various GitHub services or features that require additional rights to Your Content in private repositories. These rights may vary depending on the service or feature, but GitHub will continue to treat your private repository Content as confidential. If those services or features require rights in addition to those we need to provide the GitHub Service, we will provide an explanation of those rights.

Additionally, we may be compelled by law to disclose the contents of your private repositories.
GitHub will provide notice regarding our access to private repository content, unless for legal disclosure, to comply with our legal obligations, or where otherwise bound by requirements under law, for automated scanning, or if in response to a security threat or other risk to security.
F. Copyright Infringement and DMCA Policy
If you believe that content on our website violates your copyright, please contact us in accordance with our Digital Millennium Copyright Act Policy. If you are a copyright owner and you believe that content on GitHub violates your rights, please contact us via our convenient DMCA form or by emailing copyright@github.com. There may be legal consequences for sending a false or frivolous takedown notice. Before sending a takedown request, you must consider legal uses such as fair use and licensed uses.
We will terminate the Accounts of repeat infringers of this policy.
G. Intellectual Property Notice
Short version: We own the service and all of our content. In order for you to use our content, we give you certain rights to it, but you may only use our content in the way we have allowed.
1. GitHub's Rights to Content
GitHub and our licensors, vendors, agents, and/or our content providers retain ownership of all intellectual property rights of any kind related to the Website and Service. We reserve all rights that are not expressly granted to you under this Agreement or by law. The look and feel of the Website and Service is copyright © GitHub, Inc. All rights reserved. You may not duplicate, copy, or reuse any portion of the HTML/CSS, JavaScript, or visual design elements or concepts without express written permission from GitHub.
2. GitHub Trademarks and Logos
If you’d like to use GitHub’s trademarks, you must follow all of our trademark guidelines, including those on our logos page: https://github.com/logos.
3. License to GitHub Policies
This Agreement is licensed under this Creative Commons Zero license. For details, see our site-policy repository.
H. API Terms
Short version: You agree to these Terms of Service, plus this Section H, when using any of GitHub's APIs (Application Provider Interface), including use of the API through a third party product that accesses GitHub.
Abuse or excessively frequent requests to GitHub via the API may result in the temporary or permanent suspension of your Account's access to the API. GitHub, in our sole discretion, will determine abuse or excessive usage of the API. We will make a reasonable attempt to warn you via email prior to suspension.
You may not share API tokens to exceed GitHub's rate limitations.
You may not use the API to download data or Content from GitHub for spamming purposes, including for the purposes of selling GitHub users' personal information, such as to recruiters, headhunters, and job boards.
All use of the GitHub API is subject to these Terms of Service and the GitHub Privacy Statement.
GitHub may offer subscription-based access to our API for those Users who require high-throughput access or access that would result in resale of GitHub's Service.
I. GitHub Additional Product Terms
Short version: You need to follow certain specific terms and conditions for GitHub's various features and products, and you agree to the Supplemental Terms and Conditions when you agree to this Agreement.
Some Service features may be subject to additional terms specific to that feature or product as set forth in the GitHub Additional Product Terms. By accessing or using the Services, you also agree to the GitHub Additional Product Terms.
J. Beta Previews
Short version: Beta Previews may not be supported or may change at any time. You may receive confidential information through those programs that must remain confidential while the program is private. We'd love your feedback to make our Beta Previews better.
1. Subject to Change
Beta Previews may not be supported and may be changed at any time without notice. In addition, Beta Previews are not subject to the same security measures and auditing to which the Service has been and is subject. By using a Beta Preview, you use it at your own risk.
2. Confidentiality
As a user of Beta Previews, you may get access to special information that isn’t available to the rest of the world. Due to the sensitive nature of this information, it’s important for us to make sure that you keep that information secret.
Confidentiality Obligations. You agree that any non-public Beta Preview information we give you, such as information about a private Beta Preview, will be considered GitHub’s confidential information (collectively, “Confidential Information”), regardless of whether it is marked or identified as such. You agree to only use such Confidential Information for the express purpose of testing and evaluating the Beta Preview (the “Purpose”), and not for any other purpose. You should use the same degree of care as you would with your own confidential information, but no less than reasonable precautions to prevent any unauthorized use, disclosure, publication, or dissemination of our Confidential Information. You promise not to disclose, publish, or disseminate any Confidential Information to any third party, unless we don’t otherwise prohibit or restrict such disclosure (for example, you might be part of a GitHub-organized group discussion about a private Beta Preview feature).
Exceptions. Confidential Information will not include information that is: (a) or becomes publicly available without breach of this Agreement through no act or inaction on your part (such as when a private Beta Preview becomes a public Beta Preview); (b) known to you before we disclose it to you; (c) independently developed by you without breach of any confidentiality obligation to us or any third party; or (d) disclosed with permission from GitHub. You will not violate the terms of this Agreement if you are required to disclose Confidential Information pursuant to operation of law, provided GitHub has been given reasonable advance written notice to object, unless prohibited by law.
3. Feedback
We’re always trying to improve of products and services, and your feedback as a Beta Preview user will help us do that. If you choose to give us any ideas, know-how, algorithms, code contributions, suggestions, enhancement requests, recommendations or any other feedback for our products or services (collectively, “Feedback”), you acknowledge and agree that GitHub will have a royalty-free, fully paid-up, worldwide, transferable, sub-licensable, irrevocable and perpetual license to implement, use, modify, commercially exploit and/or incorporate the Feedback into our products, services, and documentation.
K. Payment
Short version: You are responsible for any fees associated with your use of GitHub. We are responsible for communicating those fees to you clearly and accurately, and letting you know well in advance if those prices change.
1. Pricing
Our pricing and payment terms are available at github.com/pricing. If you agree to a subscription price, that will remain your price for the duration of the payment term; however, prices are subject to change at the end of a payment term.
2. Upgrades, Downgrades, and Changes

We will immediately bill you when you upgrade from the free plan to any paying plan.
If you change from a monthly billing plan to a yearly billing plan, GitHub will bill you for a full year at the next monthly billing date.
If you upgrade to a higher level of service, we will bill you for the upgraded plan immediately.
You may change your level of service at any time by choosing a plan option or going into your Billing settings. If you choose to downgrade your Account, you may lose access to Content, features, or capacity of your Account. Please see our section on Cancellation for information on getting a copy of that Content.

3. Billing Schedule; No Refunds
Payment Based on Plan For monthly or yearly payment plans, the Service is billed in advance on a monthly or yearly basis respectively and is non-refundable. There will be no refunds or credits for partial months of service, downgrade refunds, or refunds for months unused with an open Account; however, the service will remain active for the length of the paid billing period. In order to treat everyone equally, no exceptions will be made.
Payment Based on Usage Some Service features are billed based on your usage. A limited quantity of these Service features may be included in your plan for a limited term without additional charge. If you choose to use paid Service features beyond the quantity included in your plan, you pay for those Service features based on your actual usage in the preceding month. Monthly payment for these purchases will be charged on a periodic basis in arrears. See GitHub Additional Product Terms for Details.
Invoicing For invoiced Users, User agrees to pay the fees in full, up front without deduction or setoff of any kind, in U.S. Dollars. User must pay the fees within thirty (30) days of the GitHub invoice date. Amounts payable under this Agreement are non-refundable, except as otherwise provided in this Agreement. If User fails to pay any fees on time, GitHub reserves the right, in addition to taking any other action at law or equity, to (i) charge interest on past due amounts at 1.0% per month or the highest interest rate allowed by law, whichever is less, and to charge all expenses of recovery, and (ii) terminate the applicable order form. User is solely responsible for all taxes, fees, duties and governmental assessments (except for taxes based on GitHub's net income) that are imposed or become due in connection with this Agreement.
4. Authorization
By agreeing to these Terms, you are giving us permission to charge your on-file credit card, PayPal account, or other approved methods of payment for fees that you authorize for GitHub.
5. Responsibility for Payment
You are responsible for all fees, including taxes, associated with your use of the Service. By using the Service, you agree to pay GitHub any charge incurred in connection with your use of the Service. If you dispute the matter, contact us through the GitHub Support portal. You are responsible for providing us with a valid means of payment for paid Accounts. Free Accounts are not required to provide payment information.
L. Cancellation and Termination
Short version: You may close your Account at any time. If you do, we'll treat your information responsibly.
1. Account Cancellation
It is your responsibility to properly cancel your Account with GitHub. You can cancel your Account at any time by going into your Settings in the global navigation bar at the top of the screen. The Account screen provides a simple, no questions asked cancellation link. We are not able to cancel Accounts in response to an email or phone request.
2. Upon Cancellation
We will retain and use your information as necessary to comply with our legal obligations, resolve disputes, and enforce our agreements, but barring legal requirements, we will delete your full profile and the Content of your repositories within 90 days of cancellation or termination (though some information may remain in encrypted backups). This information cannot be recovered once your Account is canceled.
We will not delete Content that you have contributed to other Users' repositories or that other Users have forked.
Upon request, we will make a reasonable effort to provide an Account owner with a copy of your lawful, non-infringing Account contents after Account cancellation, termination, or downgrade. You must make this request within 90 days of cancellation, termination, or downgrade.
3. GitHub May Terminate
GitHub has the right to suspend or terminate your access to all or any part of the Website at any time, with or without cause, with or without notice, effective immediately. GitHub reserves the right to refuse service to anyone for any reason at any time.
4. Survival
All provisions of this Agreement which, by their nature, should survive termination will survive termination — including, without limitation: ownership provisions, warranty disclaimers, indemnity, and limitations of liability.
M. Communications with GitHub
Short version: We use email and other electronic means to stay in touch with our users.
1. Electronic Communication Required
For contractual purposes, you (1) consent to receive communications from us in an electronic form via the email address you have submitted or via the Service; and (2) agree that all Terms of Service, agreements, notices, disclosures, and other communications that we provide to you electronically satisfy any legal requirement that those communications would satisfy if they were on paper. This section does not affect your non-waivable rights.
2. Legal Notice to GitHub Must Be in Writing
Communications made through email or GitHub Support's messaging system will not constitute legal notice to GitHub or any of its officers, employees, agents or representatives in any situation where notice to GitHub is required by contract or any law or regulation. Legal notice to GitHub must be in writing and served on GitHub's legal agent.
3. No Phone Support
GitHub only offers support via email, in-Service communications, and electronic messages. We do not offer telephone support.
N. Disclaimer of Warranties
Short version: We provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect.
GitHub provides the Website and the Service “as is” and “as available,” without warranty of any kind. Without limiting this, we expressly disclaim all warranties, whether express, implied or statutory, regarding the Website and the Service including without limitation any warranty of merchantability, fitness for a particular purpose, title, security, accuracy and non-infringement.
GitHub does not warrant that the Service will meet your requirements; that the Service will be uninterrupted, timely, secure, or error-free; that the information provided through the Service is accurate, reliable or correct; that any defects or errors will be corrected; that the Service will be available at any particular time or location; or that the Service is free of viruses or other harmful components. You assume full responsibility and risk of loss resulting from your downloading and/or use of files, information, content or other material obtained from the Service.
O. Limitation of Liability
Short version: We will not be liable for damages or losses arising from your use or inability to use the service or otherwise arising under this agreement. Please read this section carefully; it limits our obligations to you.
You understand and agree that we will not be liable to you or any third party for any loss of profits, use, goodwill, or data, or for any incidental, indirect, special, consequential or exemplary damages, however arising, that result from

the use, disclosure, or display of your User-Generated Content;
your use or inability to use the Service;
any modification, price change, suspension or discontinuance of the Service;
the Service generally or the software or systems that make the Service available;
unauthorized access to or alterations of your transmissions or data;
statements or conduct of any third party on the Service;
any other user interactions that you input or receive through your use of the Service; or
any other matter relating to the Service.

Our liability is limited whether or not we have been informed of the possibility of such damages, and even if a remedy set forth in this Agreement is found to have failed of its essential purpose. We will have no liability for any failure or delay due to matters beyond our reasonable control.
P. Release and Indemnification
Short version: You are responsible for your use of the service. If you harm someone else or get into a dispute with someone else, we will not be involved.
If you have a dispute with one or more Users, you agree to release GitHub from any and all claims, demands and damages (actual and consequential) of every kind and nature, known and unknown, arising out of or in any way connected with such disputes.
You agree to indemnify us, defend us, and hold us harmless from and against any and all claims, liabilities, and expenses, including attorneys’ fees, arising out of your use of the Website and the Service, including but not limited to your violation of this Agreement, provided that GitHub (1) promptly gives you written notice of the claim, demand, suit or proceeding; (2) gives you sole control of the defense and settlement of the claim, demand, suit or proceeding (provided that you may not settle any claim, demand, suit or proceeding unless the settlement unconditionally releases GitHub of all liability); and (3) provides to you all reasonable assistance, at your expense.
Q. Changes to These Terms
Short version: We want our users to be informed of important changes to our terms, but some changes aren't that important — we don't want to bother you every time we fix a typo. So while we may modify this agreement at any time, we will notify users of any material changes and give you time to adjust to them.
We reserve the right, at our sole discretion, to amend these Terms of Service at any time and will update these Terms of Service in the event of any such amendments. We will notify our Users of material changes to this Agreement, such as price increases, at least 30 days prior to the change taking effect by posting a notice on our Website or sending email to the primary email address specified in your GitHub account. Customer's continued use of the Service after those 30 days constitutes agreement to those revisions of this Agreement. For any other modifications, your continued use of the Website constitutes agreement to our revisions of these Terms of Service. You can view all changes to these Terms in our Site Policy repository.
We reserve the right at any time and from time to time to modify or discontinue, temporarily or permanently, the Website (or any part of it) with or without notice.
R. Miscellaneous
1. Governing Law
Except to the extent applicable law provides otherwise, this Agreement between you and GitHub and any access to or use of the Website or the Service are governed by the federal laws of the United States of America and the laws of the State of California, without regard to conflict of law provisions. You and GitHub agree to submit to the exclusive jurisdiction and venue of the courts located in the City and County of San Francisco, California.
2. Non-Assignability
GitHub may assign or delegate these Terms of Service and/or the GitHub Privacy Statement, in whole or in part, to any person or entity at any time with or without your consent, including the license grant in Section D.4. You may not assign or delegate any rights or obligations under the Terms of Service or Privacy Statement without our prior written consent, and any unauthorized assignment and delegation by you is void.
3. Section Headings and Summaries
Throughout this Agreement, each section includes titles and brief summaries of the following terms and conditions. These section titles and brief summaries are not legally binding.
4. Severability, No Waiver, and Survival
If any part of this Agreement is held invalid or unenforceable, that portion of the Agreement will be construed to reflect the parties’ original intent. The remaining portions will remain in full force and effect. Any failure on the part of GitHub to enforce any provision of this Agreement will not be considered a waiver of our right to enforce such provision. Our rights under this Agreement will survive any termination of this Agreement.
5. Amendments; Complete Agreement
This Agreement may only be modified by a written amendment signed by an authorized representative of GitHub, or by the posting by GitHub of a revised version in accordance with Section Q. Changes to These Terms. These Terms of Service, together with the GitHub Privacy Statement, represent the complete and exclusive statement of the agreement between you and us. This Agreement supersedes any proposal or prior agreement oral or written, and any other communications between you and GitHub relating to the subject matter of these terms including any confidentiality or nondisclosure agreements.
6. Questions
Questions about the Terms of Service? Contact us through the GitHub Support portal.\n\n\n\nGet started with GitHub documentation Learn how to start building, shipping, and maintaining software with GitHub. Explore our products, sign up for an account, and connect with the world's largest development community.Quickstart Start hereAbout GitHub and GitYou can use GitHub and Git to collaborate on work.GitHub’s plansAn overview of GitHub's pricing plans.Getting started with your GitHub accountWith a personal account on GitHub, you can import or create repositories, collaborate with others, and connect with the GitHub community.Getting started with GitHub TeamWith GitHub Team groups of people can collaborate across many projects at the same time in an organization account.PopularCreating an account on GitHubCreate a personal account to get started with GitHub.Hello WorldFollow this Hello World exercise to learn GitHub's pull request workflow.Set up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.About versions of GitHub DocsYou can read documentation that reflects the GitHub product you're currently using.GuidesTypes of GitHub accountsAccounts on GitHub allow you to organize and control access to code.@GitHubFinding ways to contribute to open source on GitHubYou can find ways to contribute to open source projects on GitHub that are relevant to you.@GitHubTroubleshooting connectivity problemsIf you're having trouble connecting to GitHub, you can troubleshoot your connection, then use the GitHub Debug tool to diagnose problems.@GitHubAll Get started docsStart your journeyAbout GitHub and GitCreating an account on GitHubHello WorldSetting up your profileFinding inspiration on GitHubDownloading files from GitHubUploading a project to GitHubGit and GitHub learning resourcesOnboardingGetting started with your GitHub accountGetting started with GitHub TeamGetting started with the GitHub Enterprise Cloud trialGetting started with GitHub Enterprise CloudUsing GitHubGitHub flowConnecting to GitHubCommunicating on GitHubExploring early access releases with feature previewSupported browsersGitHub MobileAllowing access to GitHub's services from a restricted networkTroubleshooting connectivity problemsLearning about GitHubGitHub’s plansGitHub language supportTypes of GitHub accountsAccess permissions on GitHubAbout GitHub Advanced SecurityFAQ about changes to GitHub’s plansGitHub glossaryLearning to codeGetting started with GitFinding and understanding example codeReusing other people's code in your projectsSetting up Copilot for learning to codeLearning to debug with GitHub CopilotStoring your secrets safelyAccessibilityManaging your theme settingsKeyboard shortcutsGitHub Command PaletteWriting on GitHubGetting started with writing and formatting on GitHub • 3 articlesWorking with advanced formatting • 10 articlesWorking with saved replies • 5 articlesEditing and sharing content with gists • 4 articlesExploring projects on GitHubFinding ways to contribute to open source on GitHubUsing GitHub Copilot to explore projectsContributing to a projectSaving repositories with starsFollowing peopleFollowing organizationsGit basicsSet up GitSetting your username in GitCaching your GitHub credentials in GitWhy is Git always asking for my password?Updating credentials from the macOS KeychainGit workflowsAbout remote repositoriesManaging remote repositoriesAssociating text editors with GitConfiguring Git to handle line endingsIgnoring filesGit cheatsheetUsing GitAbout GitPushing commits to a remote repositoryGetting changes from a remote repositoryDealing with non-fast-forward errorsSplitting a subfolder out into a new repositoryAbout Git subtree mergesAbout Git rebaseUsing Git rebase on the command lineResolving merge conflicts after a Git rebaseDealing with special characters in branch and tag namesTroubleshooting the 2 GB push limitExploring integrationsAbout using integrationsAbout building integrationsFeatured GitHub integrationsGitHub Developer ProgramArchiving your GitHub personal account and public repositoriesRequesting an archive of your personal account’s dataOpting into or out of the GitHub Archive Program for your public repositoryUsing GitHub DocsAbout versions of GitHub DocsUsing hover cards on GitHub DocsShowcase your expertise with GitHub CertificationsAbout GitHub CertificationsRegistering for a GitHub Certifications exam\n\n\n\nGet started/Start your journey/About GitHub and GitAbout GitHub and GitYou can use GitHub and Git to collaborate on work.In this articleAbout GitHubAbout GitWhere do I start?Next stepsFurther readingAbout GitHub
GitHub is a cloud-based platform where you can store, share, and work together with others to write code.
Storing your code in a "repository" on GitHub allows you to:

Showcase or share your work.
Track and manage changes to your code over time.
Let others review your code, and make suggestions to improve it.
Collaborate on a shared project, without worrying that your changes will impact the work of your collaborators before you're ready to integrate them.

Collaborative working, one of GitHub’s fundamental features, is made possible by the open-source software, Git, upon which GitHub is built.
About Git
Git is a version control system that intelligently tracks changes in files. Git is particularly useful when you and a group of people are all making changes to the same files at the same time.
Typically, to do this in a Git-based workflow, you would:

Create a branch off from the main copy of files that you (and your collaborators) are working on.
Make edits to the files independently and safely on your own personal branch.
Let Git intelligently merge your specific changes back into the main copy of files, so that your changes don't impact other people's updates.
Let Git keep track of your and other people's changes, so you all stay working on the most up-to-date version of the project.

To try using Git yourself, see Getting started with Git.
How do Git and GitHub work together?
When you upload files to GitHub, you'll store them in a "Git repository." This means that when you make changes (or "commits") to your files in GitHub, Git will automatically start to track and manage your changes.
There are plenty of Git-related actions that you can complete on GitHub directly in your browser, such as creating a Git repository, creating branches, and uploading and editing files.
However, most people work on their files locally (on their own computer), then continually sync these local changes—and all the related Git data—with the central "remote" repository on GitHub. There are plenty of tools that you can use to do this, such as GitHub Desktop.
Once you start to collaborate with others and all need to work on the same repository at the same time, you’ll continually:

Pull all the latest changes made by your collaborators from the remote repository on GitHub.
Push back your own changes to the same remote repository on GitHub.

Git figures out how to intelligently merge this flow of changes, and GitHub helps you manage the flow through features such as "pull requests."
Where do I start?
If you're new to GitHub, and unfamiliar with Git, we recommend working through the articles in the Start your journey category. The articles focus on tasks you can complete directly in your browser on GitHub and will help you to:

Create an account on GitHub.
Learn the "GitHub Flow", and the key principles of collaborative working (branches, commits, pull requests, merges).
Personalise your profile to share your interests and skills.
Explore GitHub to find inspiration for your own projects and connect with others.
Learn how to download interesting code for your own use.
Learn how to upload something you're working on to a GitHub repository.

Next steps

Creating an account on GitHub

Further reading

Connecting to GitHub\n\n\n\nGet started/Start your journey/Create an accountCreating an account on GitHubCreate a personal account to get started with GitHub.In this articleAbout your personal account on GitHubSigning up for a new personal accountNext stepsFurther readingAbout your personal account on GitHub
To get started with GitHub, you'll need to create a free personal account and verify your email address.
Every person who uses GitHub signs in to a user account. Your user account is your identity on GitHub and has a username and profile. For example, see @octocat's profile.
Later, you can explore the different types of accounts that GitHub offers, and decide if you need a billing plan. For more information, see Types of GitHub accounts and GitHub’s plans.
Note that the steps in this article don't apply to Enterprise Managed Users. If your GitHub account has been created for you by your company, you can skip this article and continue to Hello World.
Signing up for a new personal account

Navigate to https://github.com/.
Click Sign up.
Follow the prompts to create your personal account.

During sign up, you'll be asked to verify your email address. Without a verified email address, you won't be able to complete some basic GitHub tasks, such as creating a repository.
Some enterprises create managed user accounts for their users. You can't sign up for a personal account with an email address that's already verified for a managed user account.
If you're having problems verifying your email address, there are some troubleshooting steps you can take. For more information, see Verifying your email address.
Next steps

Now that you've created your personal account, we'll start to explore the basics of GitHub. In the next tutorial, Hello World, you'll learn about repositories and how to create one, and you'll be introduced to concepts such as branching, commits, and pull requests.
We strongly recommend that you configure 2FA for your account. 2FA is an extra layer of security that can help keep your account secure. For more information, see Configuring two-factor authentication.

Further reading

Types of GitHub accounts
GitHub’s plans
Verifying your email address\n\n\n\nGet started/Start your journey/Hello WorldHello WorldFollow this Hello World exercise to learn GitHub's pull request workflow.In this articleIntroductionStep 1: Create a repositoryStep 2: Create a branchStep 3: Make and commit changesStep 4: Open a pull requestStep 5: Merge your pull requestConclusionNext stepsFurther readingIntroduction
This tutorial teaches you GitHub essentials like repositories, branches, commits, and pull requests. You'll create your own Hello World repository and learn GitHub's pull request workflow, a popular way to create and review code.
In this quickstart guide, you will:

Create and use a repository.
Start and manage a new branch.
Make changes to a file and push them to GitHub as commits.
Open and merge a pull request.

Prerequisites


You must have a GitHub account. For more information, see Creating an account on GitHub.


You don't need to know how to code, use the command line, or install Git (the version control software that GitHub is built on).


Step 1: Create a repository
The first thing we'll do is create a repository. You can think of a repository as a folder that contains related items, such as files, images, videos, or even other folders. A repository usually groups together items that belong to the same "project" or thing you're working on.
Often, repositories include a README file, a file with information about your project. README files are written in Markdown, which is an easy-to-read, easy-to-write language for formatting plain text. We'll learn more about Markdown in the next tutorial, Setting up your profile.
GitHub lets you add a README file at the same time you create your new repository. GitHub also offers other common options such as a license file, but you do not have to select any of them now.
Your hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.


In the upper-right corner of any page, select , then click New repository.



In the "Repository name" box, type hello-world.


In the "Description" box, type a short description. For example, type "This repository is for practicing the GitHub Flow."


Select whether your repository will be Public or Private.


Select Add a README file.


Click Create repository.


Step 2: Create a branch
Branching lets you have different versions of a repository at one time.
By default, your repository has one branch named main that is considered to be the definitive branch. You can create additional branches off of main in your repository.
Branching is helpful when you want to add new features to a project without changing the main source of code. The work done on different branches will not show up on the main branch until you merge it, which we will cover later in this guide. You can use branches to experiment and make edits before committing them to main.
When you create a branch off the main branch, you're making a copy, or snapshot, of main as it was at that point in time. If someone else made changes to the main branch while you were working on your branch, you could pull in those updates.
This diagram shows:

The main branch
A new branch called feature
The journey that feature takes through stages for "Commit changes," "Submit pull request," and "Discuss proposed changes" before it's merged into main


Creating a branch


Click the Code tab of your hello-world repository.


Above the file list, click the dropdown menu that says main.



Type a branch name, readme-edits, into the text box.


Click Create branch: readme-edits from main.



Now you have two branches, main and readme-edits. Right now, they look exactly the same. Next you'll add changes to the new readme-edits branch.
Step 3: Make and commit changes
When you created a new branch in the previous step, GitHub brought you to the code page for your new readme-edits branch, which is a copy of main.
You can make and save changes to the files in your repository. On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. Commit messages capture the history of your changes so that other contributors can understand what you’ve done and why.

Under the readme-edits branch you created, click the README.md file.
To edit the file, click .
In the editor, write a bit about yourself.
Click Commit changes.
In the "Commit changes" box, write a commit message that describes your changes.
Click Commit changes.

These changes will be made only to the README file on your readme-edits branch, so now this branch contains content that's different from main.
Step 4: Open a pull request
Now that you have changes in a branch off of main, you can open a pull request.
Pull requests are the heart of collaboration on GitHub. When you open a pull request, you're proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in different colors.
As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.
In this step, you'll open a pull request in your own repository and then merge it yourself. It's a great way to practice the GitHub flow before working on larger projects.


Click the Pull requests tab of your hello-world repository.


Click New pull request.


In the Example Comparisons box, select the branch you made, readme-edits, to compare with main (the original).


Look over your changes in the diffs on the Compare page, make sure they're what you want to submit.



Click Create pull request.


Give your pull request a title and write a brief description of your changes. You can include emojis and drag and drop images and gifs.


Click Create pull request.


Reviewing a pull request
When you start collaborating with others, this is the time you'd ask for their review. This allows your collaborators to comment on, or propose changes to, your pull request before you merge the changes into the main branch.
We won't cover reviewing pull requests in this tutorial, but if you're interested in learning more, see About pull request reviews. Alternatively, try the GitHub Skills "Reviewing pull requests" course.
Step 5: Merge your pull request
In this final step, you will merge your readme-edits branch into the main branch. After you merge your pull request, the changes on your readme-edits branch will be incorporated into main.
Sometimes, a pull request may introduce changes to code that conflict with the existing code on main. If there are any conflicts, GitHub will alert you about the conflicting code and prevent merging until the conflicts are resolved. You can make a commit that resolves the conflicts or use comments in the pull request to discuss the conflicts with your team members.
In this walk-through, you should not have any conflicts, so you are ready to merge your branch into the main branch.

At the bottom of the pull request, click Merge pull request to merge the changes into main.
Click Confirm merge. You will receive a message that the request was successfully merged and the request was closed.
Click Delete branch. Now that your pull request is merged and your changes are on main, you can safely delete the readme-edits branch. If you want to make more changes to your project, you can always create a new branch and repeat this process.
Click back to the Code tab of your hello-world repository to see your published changes on main.

Conclusion
By completing this tutorial, you've learned to create a project and make a pull request on GitHub.
As part of that, we've learned how to:

Create a repository.
Start and manage a new branch.
Change a file and commit those changes to GitHub.
Open and merge a pull request.

Next steps

Take a look at your GitHub profile and you'll see your work reflected on your contribution graph.
If you want to practice the skills you've learned in this tutorial again, try the GitHub Skills "Introduction to GitHub" course.
In the next tutorial, Setting up your profile, you'll learn how to personalize your profile and you'll also learn some basic Markdown syntax for writing on GitHub.

Further reading

GitHub flow\n\n\n\nGet started/Start your journey/Set up your profileSetting up your profileYour profile tells people who you are and what you're interested in.In this articleAbout your profileAdding a profile picture and bioAdding a profile READMENext stepsFurther readingAbout your profile
Your profile page on GitHub is a place where people can find out more about you. You can use your profile to:

Share your interests and skills.
Showcase your projects and contributions.
Express your identity and show the GitHub community who you are.

In this tutorial, you'll learn how to personalize your profile by adding a profile picture, bio, and a profile README.
You'll also learn the basics of Markdown syntax, which is what you'll use to format any writing you do on GitHub.
Prerequisites

You must have a GitHub account. For more information, see Creating an account on GitHub.

Adding a profile picture and bio
First, we'll add a picture to your profile. Your profile picture helps identify you across GitHub.
Adding a profile picture


In the upper-right corner of any page, click your existing profile avatar, then, from the dropdown menu, click Settings.


Under "Profile Picture", select  Edit, then click Upload a photo....



Select an image, then click Upload.


Crop your picture.


Click Set new profile picture.


Next, we'll add some basic information about yourself to share with other GitHub users. This information will display below your profile picture on your profile page.
Adding a bio


On your profile page, under your profile picture, click Edit profile.


Under "Bio", write one or two sentences about yourself, such as who you are and what you do.
Note

Keep the bio short; we'll add a longer description of your interests in your profile README in the section below.



To add an emoji to your bio, visit Emoji cheat sheet and copy and paste an emoji into the "Bio" dialog box.


Optionally, add your preferred pronouns, workplace, location and timezone, and any links to your personal website and social accounts. Your pronouns will only be visible to users that are signed in to GitHub.


Click Save.


Adding a profile README
Next, we'll create a special repository and README file that will be displayed directly on your profile page.
Your profile README contains information such as your interests, skills, and background, and it can be a great way to introduce yourself to other people on GitHub and showcase your work.
As we learned in the Hello World tutorial, README.md files are written using Markdown syntax (note the .md file extension), which is just a way to format plain text.
In the following steps, we'll create and edit your profile README.
Step 1: Create a new repository for your profile README


In the upper-right corner of any page, select , then click New repository.



Under "Repository name", type a repository name that matches your GitHub username. For example, if your username is "octocat", the repository name must be "octocat."


Optionally, in the "Description" field, type a description of your repository. For example, "My personal repository."


Select Public.


Select Initialize this repository with a README.


Click Create repository.


Step 2: Edit the README.md file


Click the  next to your profile README.



In the "Edit" view, you'll see some pre-populated text to get you started. On line 1, delete the text that says ### Hi there and type # About me.

In Markdown syntax, ### renders the plain text as a small ("third-level") heading, while ## or # renders a second- and first-level heading respectively.



Toggle to "Preview" to see how the plain text now renders. You should see the new text displayed as a much larger heading.


Toggle back to the "Edit" view.


Delete line 3 and line 16.

This HTML syntax (e.g. <!--) is keeping the other lines hidden when you toggle to "Preview".



Complete some of the prompts on lines 8 to 15, and delete any lines you don't want. For example, add your interests, skills, hobbies, or a fun fact about yourself.


Now, toggle to "Preview". You should see your completed prompts render as a bulleted list.


Toggle back to "Edit" and remove any other lines of text that you don't want displayed on your profile.


Keep customizing and editing your profile README.

Use the Emoji cheat sheet to add emojis.
Use the Markdown cheat sheet to experiment with additional Markdown formatting.



Step 3: Publish your changes to your profile

When you're happy with how your profile README looks in "Preview", and you're ready to publish it, click Commit changes...
In the open dialog box, simply click again Commit changes.
Navigate back to your profile page. You will see your new profile README displayed on your profile.

Next steps

If you want to learn more Markdown syntax and add more sophisticated formatting to your profile README, see Quickstart for writing on GitHub.
Alternatively, try the GitHub Skills "Communicate using Markdown" course.
In the next tutorial, Finding inspiration on GitHub, we'll look at ways you can explore GitHub to find projects and people that interest you.

Further reading

About your profile
Personalizing your profile
Basic writing and formatting syntax\n\n\n\nGet started/Start your journey/Find inspirationFinding inspiration on GitHubYou can find inspiration for your own projects and learning on GitHub and connect with a community.In this articleIntroductionVisit Explore GitHubSearch for a topic or project on GitHubFollowing people and organizations on GitHubNext stepsFurther readingIntroduction
GitHub is a vast open-source community. You can explore GitHub to find interesting repositories, topics, code, people, and organizations that can inspire your own work, or support your own learning.
Once you've found something that interests you, you can:

Star the repository or topic, so you can easily find it again later.
Follow people or organizations, so you can stay updated on their activities.
Download useful repositories or code, and customize it for your own use.
Contribute to another user's project, by opening a pull request.

Once you star repositories or follow people, you will see updates on their activities on your personal dashboard.
Visit Explore GitHub

Navigate to Explore GitHub.
Browse popular repositories and topics.
Click  Star next to repositories and topics that interest you, so you can easily find them again later.
Navigate to your stars page to see all your starred repositories and topics.

Search for a topic or project on GitHub

Navigate to https://github.com/search.
Type a keyword or query into the search bar. For example, try "green software tools." For more detailed information about searching for specific topics, repositories, or code, see About searching on GitHub.
Use the left sidebar to filter the results. For example, to browse all repositories in the "green-software" topic, search "green-software", then filter by "Topic".
Star the repositories that match your interests, such as GitHub's Green Software Directory.

Following people and organizations on GitHub
Following people and organizations is another good way to stay updated on projects and topics that interest you.
Following people

Navigate to the user's profile page.
Under the user's profile picture, click Follow.
Optionally, to unfollow a user, click Unfollow.

Following organizations


Navigate to the organization page you want to follow.


In the top-right corner, click Follow.



Optionally, to unfollow an organization, click Unfollow.


Next steps

GitHub has a great support community where you can ask for help and talk to people from around the world. Join the conversation on GitHub Community.
In the next tutorial, Downloading files from GitHub, you'll learn how to download files from GitHub for your own use, and learn the differences between downloading, cloning, and forking repositories.

Further reading

About your personal dashboard
Finding ways to contribute to open source on GitHub\n\n\n\nGet started/Start your journey/Download filesDownloading files from GitHubLearn how to download files from GitHub, and understand the difference between downloading, cloning, and forking.In this articleIntroductionPrerequisitesDownloading a repository's filesConclusionNext stepsFurther readingIntroduction
GitHub.com is home to millions of open-source software projects, that you can copy, customize, and use for your own purposes.
There are different ways to get a copy of a repository's files on GitHub. You can:

Download a snapshot of a repository's files as a zip file to your own (local) computer.
Clone a repository to your local computer using Git.
Fork a repository to create a new repository on GitHub.

Each of these methods has its own use case, which we'll explain in the next section.
This tutorial focuses on downloading a repository's files to your local computer. For example, if you've found some interesting content in a repository on GitHub, downloading is a simple way to get a copy of the content, without using Git or applying version control.
Understanding the differences between downloading, cloning, and forking

























TermDefinitionUse caseDownloadTo save a snapshot of a repository's files to your local computer.You want to use or customize the content of the files, but you're not interested in applying version control.CloneTo make a full copy of a repository's data, including all versions of every file and folder.You want to work on a full copy of the repository on your local computer, using Git to track and manage your changes. You likely intend to sync these locally-made changes with the GitHub-hosted repository. For more information, see Cloning a repository.ForkTo create a new repository on GitHub, linked to your personal account, that shares code and visibility settings with the original ("upstream") repository.You want to use the original repository's data as a basis for your own project on GitHub. Or, you want to use the fork to propose changes to the original ("upstream") repository. After forking the repository, you still might want to clone the repository, so that you can work on the changes on your local computer. For more information, see Fork a repository.
Prerequisites

You must have a GitHub account.

Downloading a repository's files
For the tutorial, we'll use a demo repository (octocat/Spoon-Knife).


Navigate to octocat/Spoon-Knife.


Above the list of files, click  Code.



Click  Download ZIP.


Conclusion
You now have a copy of the repository's files saved as a zip file on your local computer. You can edit and customize the files for your own purposes.
Next steps

In the next tutorial, Uploading a project to GitHub, you'll learn how to upload your own files to a remote repository on GitHub.

Further reading

Downloading source code archives\n\n\n\nGet started/Start your journey/Upload a projectUploading a project to GitHubLearn how to upload the files for your project to GitHub.In this articleIntroductionPrerequisitesStep 1: Create a new repository for your projectStep 2: Upload files to your project's repositoryStep 3: Edit the README file for your project's repositoryConclusionNext stepsFurther readingIntroduction
This tutorial will show you how to upload a group of files to a GitHub repository.
Uploading your files to a GitHub repository lets you:

Apply version control when you make edits to the files, so your project's history is protected and manageable.
Back up your work, because your files are now stored in the cloud.
Pin the repository to your personal profile, so that others can see your work.
Share and discuss your work with others, either publicly or privately.

If you're already familiar with Git, and you're looking for information on how to upload a locally-stored Git repository to GitHub, see Adding locally hosted code to GitHub.
Prerequisites

You must have a GitHub account. For more information, see Creating an account on GitHub.
You should have a group of files you'd like to upload.

Step 1: Create a new repository for your project
It's a good idea to create a new repository for each individual project you're working on. If you're writing a software project, grouping all the related files in a new repository makes it easier to maintain and manage the codebase over time.


In the upper-right corner of any page, select , then click New repository.



In the "Repository name" box, type a name for your project. For example, type "my-first-project."


In the "Description" box, type a short description. For example, type "This is my first project on GitHub."


Select whether your repository will be Public or Private. Select "Public" if you want others to be able to see your project.


Select Add a README file. You will edit this file in a later step.


Click Create repository.


Step 2: Upload files to your project's repository
So far, you should only see one file listed in the repository, the README.md file you created when you initialized the repository. Now, we'll upload some of your own files.

To the right of the page, select the Add file dropdown menu.
From the dropdown menu, click Upload files.
On your computer, open the folder containing your work, then drag and drop all files and folders into the browser.
At the bottom of the page, under "Commit changes", select "Commit directly to the main branch, then click Commit changes.

Step 3: Edit the README file for your project's repository
Your repository's README file is typically the first item someone will see when visiting your repository. It usually contains information on what your project is about and why your project is useful.
As we learned in the Hello World tutorial, the README file (README.md) is written in Markdown syntax. Markdown is an easy-to-read, easy-to-write language for formatting plain text.
In this step, we'll edit your project's README.md using Markdown so that it includes some basic information about your project.


From the list of files, click README.md to view the file.


In the upper right corner of the file view, click  to open the file editor.

You will see that some information about your project has been pre-filled for you. For example, you should see the repository name and repository description you completed in Step 1 displayed on line 1 and line 2.



Delete the existing text apart from #, then type a proper title for your project.

Example: # About my first project on GitHub.



Next, add some information about your project, such as a description of the project's purpose or its main features.
Note

If you're not sure what to write, take a look at other repositories on GitHub to see how other people describe their projects.
To apply more sophisticated formatting, such as adding images, links, and footnotes, see Basic writing and formatting syntax.



Above the new content, click Preview.



Take a look at how the file will render once we save our changes, then toggle back to "Edit".


Continue to edit and preview the text until you're happy with the content of your README.


In the top right, click Commit changes.


In the dialog box that opens, a commit message has been pre-filled for you ("Update README.md") and, by default, the option to "Commit directly to the main branch" has been selected. Leave these options as they are and go ahead and click Commit changes.


Conclusion
You have now created a new repository, uploaded some files to it, and added a project README.
If you set your repository visibility to "Public," the repository will be displayed on your personal profile and you can share the URL of your repository with others.
As you add, edit or delete files directly in the browser on GitHub, GitHub will track these changes ("commits"), so you can start to manage your project's history and evolution.
When making changes, remember that you can create a new branch from the main branch of your repository, so that you can experiment without affecting the main copy of files. Then, when you're happy with a set of a changes, open a pull request to merge the changes into your main branch. For a reminder of how to do this, see Hello World.
Next steps


Most people want to keep working on their files locally (i.e. on their own computer), and then continually sync these locally-made changes with this "remote" (in the cloud) repository on GitHub. There are plenty of tools that let you do this, such as GitHub Desktop. To get started, you'd need to:

Install GitHub Desktop. For more information, see Getting started with GitHub Desktop.
Clone the remote repository, so you have a copy of it on your own computer. For more information, see Cloning and forking repositories from GitHub Desktop.
Continually sync your local changes with this remote repository. For more information, see Syncing your branch in GitHub Desktop.



To learn more about other tools available for working with repositories hosted on GitHub, see Connecting to GitHub.


Further reading

About READMEs
Managing files
Cloning a repository\n\n\n\nGet started/Start your journey/Learning resourcesGit and GitHub learning resourcesThere are a lot of helpful Git and GitHub resources available.In this articleUsing GitHubUsing GitOnline coursesTrainingCommunityUsing GitHub
Become better acquainted with GitHub through our Using GitHub articles:

To review the fundamentals of a GitHub workflow, see GitHub flow.
To learn about the various tools for working with repositories hosted on GitHub, and how to choose a tool that best suits your needs, see Connecting to GitHub.
To understand the different communication tools on GitHub, such as GitHub Issues, GitHub Discussions, and pull requests, see Communicating on GitHub.

Using Git
Familiarize yourself with Git through our series of articles:

Git basics.
Using Git.

There are also lots of other online reading resources to help you learn Git:

Official Git project site.
ProGit book.
Git command list.

Online courses


GitHub Skills offers free interactive courses that are built into GitHub with instant automated feedback and help. Learn to open your first pull request, make your first open source contribution, create a GitHub Pages site, and more. For more information about course offerings, see GitHub Skills.


Git branching is a free interactive tool for learning and practising Git concepts.


An interactive online Git course from Pluralsight can also teach you the basics of Git.


Training
GitHub's web-based educational programs
GitHub offers live trainings with a hands-on, project-based approach for those who love the command line and those who don't.
Training for your company
GitHub offers in-person classes taught by our highly-experienced educators. Contact us to ask your training-related questions.
Community
You can connect with developers around the world to ask and answer questions, learn, and interact directly with GitHub staff. To get the conversation started, see GitHub Community Support.\n\n\n\nGet started/Onboarding/Getting started with your GitHub accountGetting started with your GitHub accountWith a personal account on GitHub, you can import or create repositories, collaborate with others, and connect with the GitHub community.In this articlePart 1: Configuring your GitHub accountPart 2: Using GitHub's tools and processesPart 3: Collaborating on GitHubPart 4: Customizing and automating your work on GitHubPart 5: Building securely on GitHubPart 6: Participating in GitHub's communityFurther readingThis guide will walk you through setting up your GitHub account and getting started with GitHub's features for collaboration and community.
Part 1: Configuring your GitHub account
The first steps in starting with GitHub are to create an account, choose a product that fits your needs best, verify your email, set up two-factor authentication, and view your profile.
There are several types of accounts on GitHub.  Every person who uses GitHub has their own personal account, which can be part of multiple organizations and teams. Your personal account is your identity on GitHub.com and represents you as an individual.
1. Creating an account
To sign up for an account, navigate to https://github.com/ and follow the prompts.
To keep your GitHub account secure you should use a strong and unique password. For more information, see Creating a strong password.
2. Choosing your GitHub product
You can choose GitHub Free or GitHub Pro to get access to different features for your personal account. You can upgrade at any time if you are unsure at first which product you want.
For more information on all of GitHub's plans, see GitHub’s plans.
3. Verifying your email address
To ensure you can use all the features in your GitHub plan, verify your email address after signing up for a new account. For more information, see Verifying your email address.
4. Configuring two-factor authentication
Two-factor authentication, or 2FA, is an extra layer of security used when logging into websites or apps. We strongly urge you to configure 2FA for the safety of your account. For more information, see About two-factor authentication.
Optionally, after you have configured 2FA, add a passkey to your account to enable a secure, passwordless login. See Managing your passkeys.
5. Viewing your GitHub profile and contribution graph
Your GitHub profile tells people the story of your work through the repositories and gists you've pinned, the organization memberships you've chosen to publicize, the contributions you've made, and the projects you've created. For more information, see About your profile and Viewing contributions on your profile.
Part 2: Using GitHub's tools and processes
To best use GitHub, you'll need to set up Git. Git is responsible for everything GitHub-related that happens locally on your computer. To effectively collaborate on GitHub, you'll write in issues and pull requests using GitHub Flavored Markdown.
1. Learning Git
GitHub's collaborative approach to development depends on publishing commits from your local repository to GitHub for other people to view, fetch, and update using Git. For more information about Git, see the Git Handbook guide. For more information about how Git is used on GitHub, see GitHub flow.
2. Setting up Git
If you plan to use Git locally on your computer, whether through the command line, an IDE or text editor, you will need to install and set up Git. For more information, see Set up Git.
If you prefer to use a visual interface, you can download and use GitHub Desktop. GitHub Desktop comes packaged with Git, so there is no need to install Git separately. For more information, see Getting started with GitHub Desktop.
Once you install Git, you can connect to GitHub repositories from your local computer, whether your own repository or another user's fork. When you connect to a repository on GitHub.com from Git, you'll need to authenticate with GitHub using either HTTPS or SSH. For more information, see About remote repositories.
3. Choosing how to interact with GitHub
Everyone has their own unique workflow for interacting with GitHub; the interfaces and methods you use depend on your preference and what works best for your needs.
For more information about the different approaches for interacting with GitHub, and a comparison of the tools you can use, see Connecting to GitHub.
4. Writing on GitHub
To make your communication clear and organized in issues and pull requests, you can use GitHub Flavored Markdown for formatting, which combines an easy-to-read, easy-to-write syntax with some custom functionality. For more information, see About writing and formatting on GitHub.
You can learn GitHub Flavored Markdown with the Communicate using Markdown course on GitHub Skills.
5. Searching on GitHub
Our integrated search allows you to find what you are looking for among the many repositories, users and lines of code on GitHub. You can search globally across all of GitHub or limit your search to a particular repository or organization. For more information about the types of searches you can do on GitHub, see About searching on GitHub.
Our search syntax allows you to construct queries using qualifiers to specify what you want to search for. For more information on the search syntax to use in search, see Searching on GitHub.
6. Managing files on GitHub
With GitHub, you can create, edit, move and delete files in your repository or any repository you have write access to. You can also track the history of changes in a file line by line. For more information, see Managing files.
Part 3: Collaborating on GitHub
Any number of people can work together in repositories across GitHub. You can configure settings, create projects, and manage your notifications to encourage effective collaboration.
1. Working with repositories
Creating a repository
A repository is like a folder for your project. You can have any number of public and private repositories in your personal account. Repositories can contain folders and files, images, videos, spreadsheets, and data sets, as well as the revision history for all files in the repository. For more information, see About repositories.
When you create a new repository, you should initialize the repository with a README file to let people know about your project. For more information, see Creating a new repository.
Cloning a repository
You can clone an existing repository from GitHub to your local computer, making it easier to add or remove files, fix merge conflicts, or make complex commits. Cloning a repository pulls down a full copy of all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project. For more information, see Cloning a repository.
Forking a repository
A fork is a copy of a repository that you manage, where any changes you make will not affect the original repository unless you submit a pull request to the project owner. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea. For more information, see Working with forks.
2. Importing your projects
If you have existing projects you'd like to move over to GitHub you can import projects using the GitHub Importer, the command line, or external migration tools. For more information, see Importing source code.
3. Managing collaborators and permissions
You can collaborate on your project with others using your repository's issues, pull requests, and projects. You can invite other people to your repository as collaborators from the Collaborators tab in the repository settings. For more information, see Inviting collaborators to a personal repository.
You are the owner of any repository you create in your personal account and have full control of the repository. Collaborators have write access to your repository, limiting what they have permission to do. For more information, see Permission levels for a personal account repository.
4. Managing repository settings
As the owner of a repository you can configure several settings, including the repository's visibility, topics, and social media preview. For more information, see Managing your repository’s settings and features.
5. Setting up your project for healthy contributions
To encourage collaborators in your repository, you need a community that encourages people to use, contribute to, and evangelize your project. For more information, see Building Welcoming Communities in the Open Source Guides.
By adding files like contributing guidelines, a code of conduct, and a license to your repository you can create an environment where it's easier for collaborators to make meaningful, useful contributions. For more information, see Setting up your project for healthy contributions.
6. Using GitHub Issues and Projects
You can use GitHub Issues to organize your work with issues and pull requests and manage your workflow with Projects. For more information, see About issues and About Projects.
7. Managing notifications
Notifications provide updates about the activity on GitHub you've subscribed to or participated in. If you're no longer interested in a conversation, you can unsubscribe, unwatch, or customize the types of notifications you'll receive in the future. For more information, see About notifications.
8. Working with GitHub Pages
You can use GitHub Pages to create and host a website directly from a repository on GitHub.com. For more information, see What is GitHub Pages?.
9. Using GitHub Discussions
You can enable GitHub Discussions for your repository to help build a community around your project. Maintainers, contributors and visitors can use discussions to share announcements, ask and answer questions, and participate in conversations around goals. For more information, see About discussions.
Part 4: Customizing and automating your work on GitHub
You can use tools from the GitHub Marketplace, the GitHub API, and existing GitHub features to customize and automate your work.
1. Using GitHub Marketplace
GitHub Marketplace contains integrations that add functionality and improve your workflow. You can discover, browse, and install free and paid tools, including GitHub Apps, OAuth apps, and GitHub Actions, in GitHub Marketplace.
2. Using the GitHub API
There are two versions of the GitHub API: the REST API and the GraphQL API. You can use the GitHub APIs to automate common tasks, back up your data, or create integrations that extend GitHub. For more information, see Comparing GitHub's REST API and GraphQL API.
3. Building GitHub Actions
With GitHub Actions, you can automate and customize your enterprise's development workflow on GitHub. You can create your own actions, and use and customize actions shared by the GitHub community. For more information, see Writing workflows.
4. Publishing and managing GitHub Packages
GitHub Packages is a software package hosting service that allows you to host your software packages privately or publicly and use packages as dependencies in your projects. For more information, see Introduction to GitHub Packages.
Part 5: Building securely on GitHub
GitHub has a variety of security features that help keep code and secrets secure in repositories. Some features are available for all repositories, while others are only available for public repositories and repositories with a GitHub Code Security or GitHub Secret Protection license. For an overview of security features, see GitHub security features.
1. Securing your repository
As a repository administrator, you can secure your repositories by configuring repository security settings. These include managing access to your repository, setting a security policy, and managing dependencies. For public repositories, and for private repositories owned by organizations with licenses for the features, you can also configure code and secret scanning to automatically identify vulnerabilities and ensure tokens and keys are not exposed.
For more information on steps you can take to secure your repositories, see Quickstart for securing your repository.
2. Managing your dependencies
A large part of building securely is maintaining your project's dependencies to ensure that all packages and applications you depend on are updated and secure. You can manage your repository's dependencies on GitHub by exploring the dependency graph for your repository, using Dependabot to automatically raise pull requests to keep your dependencies up-to-date, and receiving Dependabot alerts and security updates for vulnerable dependencies.
For more information, see Securing your software supply chain.
Part 6: Participating in GitHub's community
There are many ways to participate in the GitHub community. You can contribute to open source projects, interact with people in the GitHub Community Support, or learn with GitHub Skills.
1. Contributing to open source projects
Contributing to open source projects on GitHub can be a rewarding way to learn, teach, and build experience in just about any skill you can imagine. For more information, see How to Contribute to Open Source in the Open Source Guides.
You can find personalized recommendations for projects and good first issues based on your past contributions, stars, and other activities in Explore GitHub. For more information, see Finding ways to contribute to open source on GitHub.
2. Interacting with GitHub Community Support
You can connect with developers around the world to ask and answer questions, learn, and interact directly with GitHub staff. To get the conversation started, see GitHub Community Support.
3. Reading about GitHub on GitHub Docs
You can read documentation that reflects the GitHub product you're currently using. For more information, see About versions of GitHub Docs.
4. Learning with GitHub Skills
You can learn new skills by completing fun, realistic projects in your very own GitHub repository with GitHub Skills. Each course is a hands-on lesson created by the GitHub community and taught by a friendly bot.
For more information, see Git and GitHub learning resources.
5. Supporting the open source community
GitHub Sponsors allows you to make a monthly recurring payment to a developer or organization who designs, creates, or maintains open source projects you depend on. For more information, see About GitHub Sponsors.
6. Contacting GitHub Support
GitHub Support can help you troubleshoot issues you run into while using GitHub. For more information, see About GitHub Support.
Further reading

Getting started with GitHub Team\n\n\n\nGet started/Onboarding/Getting started with GitHub TeamGetting started with GitHub TeamWith GitHub Team groups of people can collaborate across many projects at the same time in an organization account.In this articlePart 1: Configuring your account on GitHub.comPart 2: Adding members and setting up teamsPart 3: Managing security for your organizationPart 4: Setting organization level policiesPart 5: Customizing and automating your workPart 6: Participating in GitHub's communityFurther readingThis guide will walk you through setting up, configuring and managing your GitHub Team account as an organization owner.
Part 1: Configuring your account on GitHub.com
As the first steps in starting with GitHub Team, you will need to create a personal account or log into your existing account on GitHub, create an organization, and set up billing.
1. About organizations
Organizations are shared accounts where businesses and open-source projects can collaborate across many projects at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features. For more information on the features of organizations, see About organizations.
2. Creating an organization and signing up for GitHub Team
Before creating an organization, you will need to create a personal account or log in to your existing account on GitHub.com. For more information, see Creating an account on GitHub.
Once your personal account is set up, you can create an organization and pick a plan. This is where you can choose a GitHub Team subscription for your organization. For more information, see Creating a new organization from scratch.
3. Managing billing for an organization
You must manage billing settings, payment method, and paid features and products for each of your personal accounts and organizations separately. You can switch between settings for your different accounts using the context switcher in your settings. For more information, see About billing on GitHub.
Your organization's billing settings page allows you to manage settings like your payment method, billing cycle and billing email, or view information such as your subscription, billing date and payment history. You can also view and upgrade your storage and GitHub Actions minutes. For more information on managing your billing settings, see Using the billing platform.
Only organization members with the owner or billing manager role can access or change billing settings for your organization. A billing manager is someone who manages the billing settings for your organization and does not use a paid license in your organization's subscription. For more information on adding a billing manager to your organization, see Adding a billing manager to your organization.
Part 2: Adding members and setting up teams
After creating your organization, you can invite members and set permissions and roles. You can also create different levels of teams and set customized levels of permissions for your organization's repositories, projects, and apps.
1. Managing members of your organization
You can invite anyone to be a member of your organization, as long as they have a personal account on GitHub. You can also remove members and reinstate former members. For more information, see Managing membership in your organization.
2. Organization permissions and roles
Each person in your organization has a role that defines their level of access to the organization. The member role is the default, and you can assign owner and billing manager roles as well as "team maintainer" permissions. For more information, see Roles in an organization.
3. About and creating teams
Teams are groups of organization members that you can create to reflect your company or group's structure with cascading access permissions and mentions. Organization members can send notifications to a team or request reviews, and teams can be visible or secret. For more information, see About teams.
You can create independent teams or have multiple levels of nested teams to reflect your group or company's hierarchy. For more information, see Creating a team.
4. Managing team settings
You can designate a "team maintainer" to manage team settings and discussions, among other privileges. For more information, see Assigning the team maintainer role to a team member.
You can manage code review assignments for your team, change team visibility, manage scheduled reminders for your team, and more in your team's settings. For more information, see Organizing members into teams.
5. Giving people and teams access to repositories, projects, and apps
You can give organization members, teams, and outside collaborators different levels of access to repositories owned by your organization with repository roles. For more information, see Repository roles for an organization.
You can also customize access to your organization's projects and allow individual organization members to manage your organization's GitHub Apps. For more information, see Managing access to your projects, Managing access to your organization’s projects (classic), and Managing programmatic access to your organization.
Part 3: Managing security for your organization
You can help to make your organization more secure by recommending or requiring two-factor authentication for your organization members, configuring security features, and reviewing your organization's audit log and integrations.
1. Requiring two-factor authentication
You can view whether your organization members have two-factor authentication enabled and choose to require two-factor authentication in your organization. For more information, see Requiring two-factor authentication in your organization.
2. Configuring security features for your organization
To keep your organization secure, you can use a variety of GitHub security features, including security policies, dependency graphs, secret scanning and Dependabot security and version updates. For more information, see Securing your organization.
3. Reviewing your organization's audit log and integrations
The audit log for your organization allows you, as an organization owner, to review the actions performed by members of the organization within the last 180 days. For more information, see Reviewing the audit log for your organization.
You can also review and configure the permission levels for your organization's installed integrations. For more information, see Reviewing GitHub Apps installed in your organization.
Part 4: Setting organization level policies
1. Managing organization policies
You can manage permissions and policies for a number of different actions and features in your organization.
For example, to protect your organization's data, you can restrict repository creation in your organization. You can also choose to allow or prevent the forking of private repositories owned by your organization. For more information, see Restricting repository creation in your organization and Managing the forking policy for your organization.
For the full list of settings you can configure for your organization, see Managing organization settings.
2. Managing repository changes
You can configure permissions for creating, transferring and deleting repositories in your organization, including which types members can create. For more information, see Restricting repository creation in your organization and Setting permissions for deleting or transferring repositories.
You can also restrict or grant the ability to change repository visibility. For more information, see Restricting repository visibility changes in your organization.
3. Using organization-level community health files and moderation tools
You can create default community health files, such as a CONTRIBUTING.md file, a CODE_OF_CONDUCT.md file, or even issue and pull request templates, for your organization. These default files will be used for any repository owned by your organization that does not contain its own file of that type. For more information, see Creating a default community health file.
GitHub offers multiple tools for moderating and managing your community. For more information, see About community management and moderation.
Part 5: Customizing and automating your work
You can use tools from the GitHub Marketplace, the GitHub API, and existing GitHub features to customize and automate your work.
1. Using GitHub Marketplace
GitHub Marketplace contains integrations that add functionality and improve your workflow. You can discover, browse, and install free and paid tools, including GitHub Apps, OAuth apps, and GitHub Actions, in GitHub Marketplace.
2. Using the GitHub API
There are two versions of the GitHub API: the REST API and the GraphQL API. You can use the GitHub APIs to automate common tasks, back up your data, or create integrations that extend GitHub. For more information, see Comparing GitHub's REST API and GraphQL API.
3. Building GitHub Actions
With GitHub Actions, you can automate and customize your enterprise's development workflow on GitHub. You can create your own actions, and use and customize actions shared by the GitHub community. For more information, see Writing workflows.
4. Publishing and managing GitHub Packages
GitHub Packages is a software package hosting service that allows you to host your software packages privately or publicly and use packages as dependencies in your projects. For more information, see Introduction to GitHub Packages.
Part 6: Participating in GitHub's community
There are many ways to participate in the GitHub community. You can contribute to open source projects, interact with people in the GitHub Community Support, or learn with GitHub Skills.
1. Contributing to open source projects
Contributing to open source projects on GitHub can be a rewarding way to learn, teach, and build experience in just about any skill you can imagine. For more information, see How to Contribute to Open Source in the Open Source Guides.
You can find personalized recommendations for projects and good first issues based on your past contributions, stars, and other activities in Explore GitHub. For more information, see Finding ways to contribute to open source on GitHub.
2. Interacting with the GitHub Community Support
You can connect with developers around the world to ask and answer questions, learn, and interact directly with GitHub staff. To get the conversation started, see GitHub Community Support.
3. Reading about GitHub Team on GitHub Docs
You can read documentation that reflects the features available with GitHub Team. For more information, see About versions of GitHub Docs.
4. Learning with GitHub Skills
You can learn new skills by completing fun, realistic projects in your very own GitHub repository with GitHub Skills. Each course is a hands-on lesson created by the GitHub community and taught by a friendly bot.
For more information, see Git and GitHub learning resources.
5. Supporting the open source community
GitHub Sponsors allows you to make a monthly recurring payment to a developer or organization who designs, creates, or maintains open source projects you depend on. For more information, see About GitHub Sponsors.
6. Contacting GitHub Support
GitHub Support can help you troubleshoot issues you run into while using GitHub. For more information, see About GitHub Support.
Further reading

Getting started with your GitHub account\n\n\n\nGet started/Onboarding/Getting started with the GitHub Enterprise Cloud trialGetting started with the GitHub Enterprise Cloud trialSet up the products available in your GitHub Enterprise Cloud trial.In this articlePart 1: Setting up your trialPart 2: Setting up GitHub Enterprise CloudPart 3: Setting up GitHub Advanced SecurityPart 4: Setting up GitHub Copilot BusinessThis guide will walk you through setting up the products in your GitHub Enterprise Cloud trial, and provide you with the resources you need to get the most out of the trial.
Part 1: Setting up your trial
1. Learn about the GitHub Enterprise Cloud trial
For full details of what is included in the trial, and what happens during, and after the trial, see Setting up a trial of GitHub Enterprise Cloud.
2. Sign up for the trial
Go to the trial sign up page and follow the instructions on screen to sign up for the trial.
Try GitHub Enterprise Cloud 
Part 2: Setting up GitHub Enterprise Cloud
You can find full instructions on setting up GitHub Enterprise Cloud in the Getting started with GitHub Enterprise Cloud guide.
Part 3: Setting up GitHub Advanced Security
You can find information about planning a trial of GitHub Advanced Security and exploring the additional options available with GitHub Enterprise Cloud in the Trialing GitHub Advanced Security articles.
Part 4: Setting up GitHub Copilot Business
Setting up your GitHub Copilot Business trial involves three phases, and each phase must be completed by different people.
1. Configuring GitHub Copilot Business for your enterprise
As an enterprise owner, you must first configure GitHub Copilot Business for your enterprise. This phase involves setting policies for the use of GitHub Copilot Business in your enterprise, and deciding which organizations in your enterprise can use GitHub Copilot Business. For detailed instructions, see Setting up GitHub Copilot for your enterprise.
2. Enabling GitHub Copilot Business for your organization
Next, organization owners can enable GitHub Copilot Business for their organizations. For detailed instructions, see Setting up GitHub Copilot for your organization.
3. Enabling GitHub Copilot Business for individual users
If your personal account has been granted a seat in an organization that has enabled GitHub Copilot Business, you can now enable GitHub Copilot Business for your personal account. For detailed instructions, see Setting up GitHub Copilot for yourself.\n\n\n\nGet started/Onboarding/Getting started with GitHub Enterprise CloudGetting started with GitHub Enterprise CloudGet started with setting up and managing your enterprise account with GitHub Enterprise Cloud.In this articlePart 1: Setting up your enterprise accountPart 2: Managing your enterprise members with GitHub Enterprise CloudPart 3: Managing security with GitHub Enterprise CloudPart 4: Managing organization and enterprise level policies and settingsPart 5: Customizing and automating your enterprise's work on GitHubPart 6: Participating in GitHub's communityFurther readingThis guide will walk you through setting up, configuring and managing your GitHub Enterprise Cloud account as an enterprise owner.
GitHub provides two types of Enterprise products:

GitHub Enterprise Cloud
GitHub Enterprise Server

The main difference between the products is that GitHub Enterprise Cloud is hosted by GitHub, while GitHub Enterprise Server is self-hosted.
GitHub Enterprise Cloud includes an enterprise account, which allows you to manage multiple organizations. You can choose to let enterprise members create and manage their own personal accounts, or you can use Enterprise Managed Users. For more information about GitHub Enterprise Cloud, see About GitHub Enterprise Cloud.
Part 1: Setting up your enterprise account
To get started with GitHub Enterprise Cloud, decide which type of enterprise to create, create an enterprise account, and add one or more organizations.
1. Choosing an enterprise type
To control access to your enterprise's resources, you can allow people to use a personal account on GitHub.com and optionally configure additional SAML access restrictions, or you can provision and control the accounts for your enterprise using your identity provider (IdP) with Enterprise Managed Users. Before you begin using GitHub Enterprise Cloud, you must decide which type of enterprise to use. For more information, see Choosing an enterprise type for GitHub Enterprise Cloud.
2. About enterprise accounts
An enterprise account allows you to centrally manage policy and settings for multiple GitHub organizations, including member access, billing and usage and security. For more information, see About enterprise accounts.
3. Creating an enterprise account
To create your enterprise account, start a free 30-day trial of GitHub Enterprise Cloud. For more information, see Setting up a trial of GitHub Enterprise Cloud.
Try GitHub Enterprise Cloud for free 
4. Adding organizations to your enterprise account
You can add any number of new or existing organizations to manage within your enterprise account. For more information, see Adding organizations to your enterprise.
5. Creating a README for the enterprise
To help people understand what is happening in your enterprise, you should create a README. For example, you can use a README to help members learn about different organizations in the enterprise, to share links to important resources, or to communicate information about the settings and policies of your enterprise. For more information, see Creating a README for an enterprise.
6. Viewing the subscription and usage for your enterprise account
You can view your current subscription, license usage, invoices, payment history, and other billing information for your enterprise account at any time. Both enterprise owners and billing managers can access and manage billing settings for enterprise accounts. For more information, see Viewing the subscription and usage for your enterprise account.
Part 2: Managing your enterprise members with GitHub Enterprise Cloud
If your enterprise uses Enterprise Managed Users, your members are fully managed through your identity provider. Adding members, making changes to their membership, and assigning roles is all managed using your IdP. For more information, see About Enterprise Managed Users.
If your enterprise does not use Enterprise Managed Users, follow the steps below.
1. Assigning roles in an enterprise
By default, everyone in an enterprise is a member of the enterprise. There are also administrative roles, including enterprise owner and billing manager, that have different levels of access to enterprise settings and data. For more information, see Roles in an enterprise.
2. Inviting people to manage your enterprise
You can invite people to manage your enterprise as enterprise owners or billing managers or remove administrators who no longer need access. For more information, see Inviting people to manage your enterprise.
You can also grant enterprise members the ability to manage support tickets in the support portal. For more information, see Managing support entitlements for your enterprise.
3. Viewing people in your enterprise
To audit access to enterprise-owned resources or user license usage, you can view every enterprise administrator, enterprise member, and outside collaborator in your enterprise. You can see the organizations that a member belongs to and the specific repositories that an outside collaborator has access to. For more information, see Viewing people in your enterprise.
Part 3: Managing security with GitHub Enterprise Cloud

Managing security with Enterprise Managed Users
Managing security without Enterprise Managed Users

Managing security with Enterprise Managed Users
With Enterprise Managed Users, access and identity is managed centrally through your identity provider. Two-factor authentication and other access requirements should be enabled and enforced on your IdP.
1. Enabling SAML single sign-on and provisioning in your enterprise with managed users
In an enterprise with managed users, all members are provisioned and managed by your identity provider. You must enable SSO and SCIM provisioning before you can start using your enterprise. For more information, see Getting started with Enterprise Managed Users.
2. Managing organization and team membership in your enterprise with managed users with your identity provider
To manage organization and team membership within your enterprise from your IdP, you can connect teams in your organizations to security groups in your identity provider. For more information, see Managing team memberships with identity provider groups.
3. Managing allowed IP addresses for organizations in your enterprise with managed users
You can configure an allow list for specific IP addresses to restrict access to assets owned by organizations in your enterprise with managed users. For more information, see Enforcing policies for security settings in your enterprise.
4. Enforcing policies for GitHub Advanced Security features in your enterprise with managed users
If you use GitHub Secret Protection or GitHub Code Security for your enterprise, you can enforce policies to manage Secret Protection and Code Security features for organizations owned by an enterprise account. For more information, see Enforcing policies for code security and analysis for your enterprise.
Managing security without Enterprise Managed Users
To manage security for your enterprise, you can require two-factor authentication, manage allowed IP addresses, enable SAML single sign-on and team synchronization, and sign up for and enforce GitHub Advanced Security features.
1. Requiring two-factor authentication and managing allowed IP addresses for organizations in your enterprise account
Enterprise owners can require that organization members, billing managers, and outside collaborators in all organizations owned by an enterprise account use two-factor authentication to secure their personal accounts. Before doing so, we recommend notifying all who have access to organizations in your enterprise. You can also configure an allow list for specific IP addresses to restrict access to assets owned by organizations in your enterprise account.
For more information about enforcing two-factor authentication and allowed IP address lists, see Enforcing policies for security settings in your enterprise.
2. Enabling and enforcing SAML single sign-on for organizations in your enterprise account
You can centrally manage access to your enterprise's resources from your IdP using SAML single sign-on (SSO). Enterprise owners can enable SAML SSO across all organizations owned by an enterprise account. For more information, see About SAML for enterprise IAM.
3. Managing team synchronization
You can enable and manage team synchronization between an identity provider (IdP) and GitHub to allow organizations owned by your enterprise account to manage team membership with IdP groups. For more information, see Managing team synchronization for organizations in your enterprise.
4. Enforcing policies for GitHub Advanced Security features in your enterprise account
If you use GitHub Secret Protection or GitHub Code Security for your enterprise, you can enforce policies to manage Secret Protection and Code Security features for organizations owned by an enterprise account. For more information, see Enforcing policies for code security and analysis for your enterprise.
Part 4: Managing organization and enterprise level policies and settings
To manage and moderate your enterprise, you can set policies for organizations within the enterprise, view audit logs, configure webhooks, and restrict email notifications.
1. Managing policies for organizations in your enterprise account
You can choose to enforce a number of policies for all organizations owned by your enterprise, or choose to allow these policies to be set in each organization. Types of policies you can enforce include repository management, projects, and team policies. For more information, see Setting policies for your enterprise.
2. Viewing audit logs, configuring webhooks, and restricting email notifications for your enterprise
You can view actions from all of the organizations owned by your enterprise account in the enterprise audit log. You can also configure webhooks to receive events from organizations owned by your enterprise account. For more information, see Reviewing audit logs for your enterprise and Monitoring activity in your enterprise.
You can also restrict email notifications for your enterprise account so that enterprise members can only use an email address in a verified or approved domain to receive notifications. For more information, see Restricting email notifications for your enterprise.
Part 5: Customizing and automating your enterprise's work on GitHub
Members of your organization or enterprise can use tools from the GitHub Marketplace, the GitHub API, and existing GitHub features to customize and automate your work.
1. Using GitHub Marketplace
GitHub Marketplace contains integrations that add functionality and improve your workflow. You can discover, browse, and install free and paid tools, including GitHub Apps, OAuth apps, and GitHub Actions, in GitHub Marketplace.
2. Using the GitHub API
There are two versions of the GitHub API: the REST API and the GraphQL API. You can use the GitHub APIs to automate common tasks, back up your data, or create integrations that extend GitHub. For more information, see Comparing GitHub's REST API and GraphQL API.
3. Building GitHub Actions
With GitHub Actions, you can automate and customize your enterprise's development workflow on GitHub. You can create your own actions, and use and customize actions shared by the GitHub community. For more information, see Writing workflows.
4. Publishing and managing GitHub Packages
GitHub Packages is a software package hosting service that allows you to host your software packages privately or publicly and use packages as dependencies in your projects. For more information, see Introduction to GitHub Packages.
5. Using GitHub Pages
GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository and publishes a website. You can manage the publication of GitHub Pages sites at the organization level. For more information, see Managing the publication of GitHub Pages sites for your organization and What is GitHub Pages?.
Part 6: Participating in GitHub's community
You and your enterprise members can use GitHub's learning and support resources to get the help they need. You can also support the open source community.
1. Reading about GitHub Enterprise Cloud on GitHub Docs
You can read documentation that reflects the features available with GitHub Enterprise Cloud. For more information, see About versions of GitHub Docs.
To learn how your enterprise can use GitHub most effectively, see Best practices for enterprises.
2. Learning with GitHub Skills
Enterprise members can learn new skills by completing fun, realistic projects in your very own GitHub repository with GitHub Skills. Each course is a hands-on lesson created by the GitHub community and taught by a friendly bot.
For more information, see Git and GitHub learning resources.
3. Supporting the open source community
GitHub Sponsors allows you to make a monthly recurring payment to a developer or organization who designs, creates, or maintains open source projects you depend on. For more information, see About GitHub Sponsors.
4. Contacting GitHub Support
GitHub Support can help you troubleshoot issues you run into while using GitHub. For more information, see About GitHub Support.
GitHub Enterprise Cloud allows you to submit priority support requests with a target eight-hour response time. For more information, see About GitHub Support.
Further reading

Feature overview for GitHub Enterprise Cloud\n\n\n\nGet started/Using GitHub/GitHub flowGitHub flowFollow GitHub flow to collaborate on projects.In this articleIntroductionPrerequisitesFollowing GitHub flowIntroduction
GitHub flow is a lightweight, branch-based workflow. The GitHub flow is useful for everyone, not just developers. For example, here at GitHub, we use GitHub flow for our site policy, documentation, and roadmap.
Prerequisites
To follow GitHub flow, you will need a GitHub account and a repository. For information on how to create an account, see Creating an account on GitHub. For information on how to create a repository, see Quickstart for repositories. For information on how to find an existing repository to contribute to, see Finding ways to contribute to open source on GitHub.
Following GitHub flow
Tip

You can complete all steps of GitHub flow through the GitHub web interface, command line and GitHub CLI, or GitHub Desktop. For more information about the tools you can use to connect to GitHub, see Connecting to GitHub.

Create a branch
Create a branch in your repository. A short, descriptive branch name enables your collaborators to see ongoing work at a glance. For example, increase-test-timeout or add-code-of-conduct. For more information, see Creating and deleting branches within your repository.
By creating a branch, you create a space to work without affecting the default branch. Additionally, you give collaborators a chance to review your work.
Make changes
On your branch, make any desired changes to the repository. For more information, see Creating new files, Editing files, Renaming a file, Moving a file to a new location, or Deleting files in a repository.
Your branch is a safe place to make changes. If you make a mistake, you can revert your changes or push additional changes to fix the mistake. Your changes will not end up on the default branch until you merge your branch.
Commit and push your changes to your branch. Give each commit a descriptive message to help you and future contributors understand what changes the commit contains. For example, fix typo or increase rate limit.
Ideally, each commit contains an isolated, complete change. This makes it easy to revert your changes if you decide to take a different approach. For example, if you want to rename a variable and add some tests, put the variable rename in one commit and the tests in another commit. Later, if you want to keep the tests but revert the variable rename, you can revert the specific commit that contained the variable rename. If you put the variable rename and tests in the same commit or spread the variable rename across multiple commits, you would spend more effort reverting your changes.
By committing and pushing your changes, you back up your work to remote storage. This means that you can access your work from any device. It also means that your collaborators can see your work, answer questions, and make suggestions or contributions.
Continue to make, commit, and push changes to your branch until you are ready to ask for feedback.
Tip

Make a separate branch for each set of unrelated changes. This makes it easier for reviewers to give feedback. It also makes it easier for you and future collaborators to understand the changes and to revert or build on them. Additionally, if there is a delay in one set of changes, your other changes aren't also delayed.

Create a pull request
Create a pull request to ask collaborators for feedback on your changes. Pull request review is so valuable that some repositories require an approving review before pull requests can be merged. If you want early feedback or advice before you complete your changes, you can mark your pull request as a draft. For more information, see Creating a pull request.
When you create a pull request, include a summary of the changes and what problem they solve. You can include images, links, and tables to help convey this information. If your pull request addresses an issue, link the issue so that issue stakeholders are aware of the pull request and vice versa. If you link with a keyword, the issue will close automatically when the pull request merges. For more information, see Basic writing and formatting syntax and Linking a pull request to an issue.
In addition to filling out the body of the pull request, you can add comments to specific lines of the pull request to explicitly point something out to the reviewers.
Your repository may be configured to automatically request a review from specific teams or users when a pull request is created. You can also manually @mention or request a review from specific people or teams.
If your repository has checks configured to run on pull requests, you will see any checks that failed on your pull request. This helps you catch errors before merging your branch. For more information, see About status checks.
Address review comments
Reviewers should leave questions, comments, and suggestions. Reviewers can comment on the whole pull request or add comments to specific lines or files. You and reviewers can insert images or code suggestions to clarify comments. For more information, see Reviewing changes in pull requests.
You can continue to commit and push changes in response to the reviews. Your pull request will update automatically.
Merge your pull request
Once your pull request is approved, merge your pull request. This will automatically merge your branch so that your changes appear on the default branch. GitHub retains the history of comments and commits in the pull request to help future contributors understand your changes. For more information, see Merging a pull request.
GitHub will tell you if your pull request has conflicts that must be resolved before merging. For more information, see Addressing merge conflicts.
Branch protection settings may block merging if your pull request does not meet certain requirements. For example, you need a certain number of approving reviews or an approving review from a specific team. For more information, see About protected branches.
Delete your branch
After you merge your pull request, delete your branch. This indicates that the work on the branch is complete and prevents you or others from accidentally using old branches. For more information, see Deleting and restoring branches in a pull request.
Don't worry about losing information. Your pull request and commit history will not be deleted. You can always restore your deleted branch or revert your pull request if needed.\n\n\n\nGet started/Using GitHub/Connecting to GitHubConnecting to GitHubLearn about the tools you can use to work with repositories hosted on GitHub.In this articleIntroductionGetting startedMaking more complex changes in the browserWorking from the desktopComparison of tools for connecting to GitHubFurther readingIntroduction
GitHub is a web-based app that lets you host files in repositories, collaborate on work, and track changes to files over time. Version tracking on GitHub is powered by the open source software Git. Whenever you update a repository on GitHub, Git tracks the changes you make.
There are many ways to work with GitHub, and you can choose a method that suits your level of experience, personal preferences, and the repositories you work with. For example, you can choose whether you want to work in the browser or from your desktop, how you want to use Git, and what capabilities you need from your editor and other software. You may choose to work with different repositories in different ways.
If you're new to GitHub, a good way to start contributing is to make changes in the browser on GitHub.com. As you become more familiar with GitHub and start contributing larger changes, you may want to start working with other tools. This article explains how to progress through these stages and helps you choose the best tool for your requirements at each stage. To quickly compare all the tools available for working with GitHub, see Comparison of tools for connecting to GitHub.
Getting started
In the user interface on GitHub.com, you can perform the whole "GitHub flow" for contributing to a repository, including creating a branch or fork, editing and previewing files, committing your changes, and creating a pull request. You can also upload files from your computer or download them from the repository. For more information, see GitHub flow.
Working directly on GitHub.com is often the quickest way to contribute to a repository, for the following reasons.

You're working directly with the repository hosted on GitHub, so you don't have to download a copy of the repository to your computer and keep this copy in sync.
If you're already signed in to GitHub, you have access to any repository where you have the necessary permissions, so you don't need to set up any additional authentication on your computer.
You can commit changes in the user interface, so you don't need to use the command line or memorize any Git commands.

For a tutorial to help you get started with making changes in the browser, see Hello World.
Making more complex changes in the browser
Working directly on GitHub.com is best for small, simple changes, often targeting a single file in a repository. If you want to work in the browser but need to make more complex changes, such as moving content between files, you can choose from the following tools to open a repository in a dedicated editor.

If you want an editor where you can quickly open or create files, you can press the . key in any repository to open the github.dev editor. This is a lightweight web-based editor that includes many of the features of Visual Studio Code, such as a search bar and buttons for Git commands. For more information, see The github.dev web-based editor.
If you want to stay in the browser but need to do things like run commands, create a test build of your project, or install dependencies, you can open a repository in a codespace. A codespace is a remote development environment with storage and compute power. It includes an editor and integrated terminal, and comes preinstalled with common tools you may need to work with a project, including Git. For more information, see Quickstart for GitHub Codespaces.

Alternatively, you can connect to GitHub from your desktop, and work with a local copy of the repository.
Working from the desktop
To work with a repository from your desktop, you'll need to download (or "clone") a copy of the repository to your computer, then push any changes you make to GitHub. Working from your desktop can have several advantages over working in the browser.

You can work with all your local files and tools.
You have access to compute power. For example, you might need to run a script to create a local preview of a site, so you can test the changes you're making.
You don't need an Internet connection to work on a project.

If you haven't worked with a GitHub repository from your desktop before, you'll need to authenticate to GitHub from your computer, so you can access the repositories you need. You may also need to set up your working environment with the tools you need to contribute, such as Git, an editor, and dependencies for a project. For these reasons, it can take longer to get started if you want to work from your desktop, compared to working in the browser.
There are several tools you can use to connect to GitHub from your desktop. These tools allow you to authenticate to GitHub, clone a repository, track your changes, and push the changes to GitHub.

If you want a lot of control and flexibility, you can use the command line. You'll need to install Git and be familiar with some basic Git commands. You can also install GitHub CLI, a command-line interface that lets you perform many actions on GitHub, such as creating a pull request or forking a repository. For more information, see Set up Git and About GitHub CLI.
If you'd prefer to use a visual interface, you can use a visual Git client such as GitHub Desktop. With GitHub Desktop, you can visualize the changes you're making and access most Git commands through a visual interface, so you don't need to memorize any commands. For more information, see About GitHub Desktop.
If you want to work in one place, you can often do most things from your editor. An editor such as VS Code includes an integrated terminal and buttons for common Git commands, so you can edit files and push your changes to GitHub all from one place. You can also install an extension to work directly with pull requests and issues on GitHub. To get started, see Download VS Code.

Comparison of tools for connecting to GitHub
The following table provides a comparison between the tools you can use to work with repositories on GitHub, both in your browser and from your desktop.
You can perform the whole GitHub flow with any of the tools described here. Each tool includes access not only to Git commands for tracking the changes you've made, but also to GitHub-specific features, so you can create a pull request with your proposed changes from wherever you're working.
For more information about how to authenticate to GitHub with each of these tools, see About authentication to GitHub.























































ToolUse caseBrowser or desktopOn GitHub.comYou want a visual interface and need to make quick, simple changes, typically involving a single commit. For an introduction, see Hello World.Browsergithub.devYou want to make more complex changes to a repository than is possible on GitHub.com, but don't need to work with a terminal or tools you have installed on your computer. For more information, see The github.dev web-based editor.BrowserGitHub CodespacesYou need the resources of a computer to do things like run scripts, create a test build of your project, or install dependencies, and you want to get started quickly by working in a cloud-based environment. For more information, see Quickstart for GitHub Codespaces.Browser or desktopGitHub DesktopYou want to work with files locally, and would prefer a visual interface to use Git, visualize changes, and interact with GitHub. For more information, see About GitHub Desktop.DesktopIDE or text editorYou're working with more complex files and projects and want everything in one place.DesktopCommand-line Git and GitHub CLIYou're used to working from the command line and want to avoid switching context, or you need to access a complex Git command that isn't integrated into visual interfaces. For more information, see Set up Git and About GitHub CLI.DesktopGitHub APIYou want to automate common tasks such as backing up your data, or create integrations that extend GitHub. For more information, see Comparing GitHub's REST API and GraphQL API.Browser or desktop
Further reading

About Git\n\n\n\nGet started/Using GitHub/Communicating on GitHubCommunicating on GitHubYou can discuss specific projects and changes, as well as broader ideas or team goals, using different types of discussions on GitHub.In this articleIntroductionWhich discussion tool should I use?Using Copilot to gain contextNext stepsIntroduction
GitHub provides built-in collaborative communication tools allowing you to interact closely with your community. This quickstart guide will show you how to pick the right tool for your needs.
You can create and participate in issues, pull requests, and team discussions, depending on the type of conversation you'd like to have.
Tip
 You can also use Copilot Chat to generate ideas, outlines, or drafts for discussions, based on your pull requests and issues. See Writing discussions or blog posts.

GitHub Issues

Are useful for discussing specific details of a project such as bug reports, planned improvements and feedback
Are specific to a repository, and usually have a clear owner
Are often referred to as GitHub's bug-tracking system

Pull requests

Allow you to propose specific changes
Allow you to comment directly on proposed changes suggested by others
Are specific to a repository

GitHub Discussions

Are like a forum, and are best used for open-form ideas and discussions where collaboration is important
May span many repositories
Provide a collaborative experience outside the codebase, allowing the brainstorming of ideas, and the creation of a community knowledge base
Often don’t have a clear owner
Often do not result in an actionable task

Which discussion tool should I use?
Scenarios for issues

I want to keep track of tasks, enhancements and bugs.
I want to file a bug report.
I want to share feedback about a specific feature.
I want to ask a question about files in the repository.

Issue example
This example illustrates how a GitHub user created an issue in our documentation open source repository to make us aware of a bug, and discuss a fix.


A user noticed that the blue color of the banner at the top of the page in the Chinese version of the GitHub Docs makes the text in the banner unreadable.
The user created an issue in the repository, stating the problem and suggesting a fix (which is, use a different background color for the banner).
A discussion ensues, and eventually, a consensus will be reached about the fix to apply.
A contributor can then create a pull request with the fix.

Scenarios for pull requests

I want to fix a typo in a repository.
I want to make changes to a repository.
I want to make changes to fix an issue.
I want to comment on changes suggested by others.

Pull request example
This example illustrates how a GitHub user created a pull request in our documentation open source repository to fix a typo.
In the Conversation tab of the pull request, the author explains why they created the pull request.

The Files changed tab of the pull request shows the implemented fix.


This contributor notices a typo in the repository.
The user creates a pull request with the fix.
A repository maintainer reviews the pull request, comments on it, and merges it.

Scenarios for GitHub Discussions

I have a question that's not necessarily related to specific files in the repository.
I want to share news with my collaborators, or my team.
I want to start or participate in an open-ended conversation.
I want to make an announcement to my community.

GitHub Discussions example
This example shows the GitHub Discussions welcome post for the GitHub Docs open source repository, and illustrates how the team wants to collaborate with their community.

This community maintainer started a discussion to welcome the community, and to ask members to introduce themselves. This post fosters an inviting atmosphere for visitors and contributors. The post also clarifies that the team's happy to help with contributions to the repository.
Using Copilot to gain context
Note
 You'll need access to GitHub Copilot. For more information, see What is GitHub Copilot?.

If you need more context or clarity on a specific issue or discussion, you can use GitHub Copilot to help answer your questions. This enables you to quickly gain insights, understand complex threads, and stay aligned with the project’s goals, fostering collaboration and knowledge sharing within the community.
To ask a question about an issue or discussion:


From anywhere on GitHub,  click the  GitHub Copilot icon next to the search bar in the top right of the page.



In the "Ask Copilot" box, type a question and include the relevant URL in your message. For example, you could ask:

Explain https://github.com/monalisa/octokit/issues/1
Summarize https://github.com/monalisa/octokit/discussions/4
Recommend next steps for https://github.com/monalisa/octokit/issues/2
What are the acceptance criteria for ISSUE URL?
What are the main points made by PERSON in DISCUSSION URL?

If you chat with GitHub Copilot from a specific issue or discussion, you don't need to include the URL in your question.


Optionally, after submitting a question, you can click  in the text box to stop the response.


Next steps
These examples showed you how to decide which is the best tool for your conversations on GitHub. But this is only the beginning; there is so much more you can do to tailor these tools to your needs.
For issues, for example, you can tag issues with labels for quicker searching and create issue templates to help contributors open meaningful issues. For more information, see About issues and About issue and pull request templates.
For pull requests, you can create draft pull requests if your proposed changes are still a work in progress. Draft pull requests cannot be merged until they're marked as ready for review. For more information, see About pull requests.
For GitHub Discussions, you can set up a code of conduct and pin discussions that contain important information for your community. For more information, see About discussions.
To learn some advanced formatting features that will help you communicate, see Quickstart for writing on GitHub.\n\n\n\nGet started/Using GitHub/Feature previewExploring early access releases with feature previewYou can use feature preview to see products or features that are available in public preview and to enable or disable each feature for your personal account.In this articleGitHub's release cycleExploring public preview releases with feature previewGitHub's release cycle
GitHub's products and features can go through multiple release phases.





















PhaseDescriptionPrivate previewThe product or feature is under heavy development and often has changing requirements and scope. The feature is available for demonstration and test purposes but may not be documented. Private preview releases are not necessarily feature complete, no service level agreements (SLAs) are provided, and there are no technical support obligations.  Note: A product or feature released as a "Technology Preview" is considered to be in the private preview release stage. Technology Preview releases share the same characteristics of private preview releases as described above.Public previewThe product or feature is ready for broader distribution. Public preview releases can be public or private, are documented, but do not have any SLAs or technical support obligations.General availability (GA)The product or feature is fully tested and open publicly to all users. GA releases are ready for production use, and associated SLA and technical support obligations apply.
Exploring public preview releases with feature preview
You can see a list of features that are available in public preview and a brief description for each feature. Each feature includes a link to give feedback.

In the upper-right corner of any page, click your profile photo, then click Feature preview.
To view details for a feature, in the left sidebar, click the feature's name.
Optionally, to the right of a feature's name, click Enable or Disable.\n\n\n\nGet started/Using GitHub/Supported browsersSupported browsersFor the best experience with GitHub, we recommend using the latest version of Chrome, Edge, Firefox, or Safari.In this articleAbout web browser supportExtended support for recommended web browsersPublic preview and developer buildsAbout web browser support
We design GitHub with the latest web browsers in mind. We recommend that you use the latest version of one of the following browsers.

Apple Safari
Google Chrome
Microsoft Edge
Mozilla Firefox

If you do not use the latest version of a recommended browser, or if you use a browser that is not listed above, GitHub or some features may not work as you expect, or at all.
For more information about how we maintain browser compatibility for GitHub's products, see the github/browser-support repository.
Extended support for recommended web browsers
Some browser vendors provide extended support releases. We do our best to ensure that GitHub functions properly in the latest extended support release for:

Chrome's extended stable channel
Edge's Extended Stable Channel
Firefox's Extended Support Release (ESR)

In earlier extended support releases, GitHub may not work as you expect, and some features may not be available.
Public preview and developer builds
You may encounter unexpected bugs in public preview and developer builds of our supported browsers. If you encounter a bug on GitHub in one of these unreleased builds, please verify that it also exists in the stable version of the same browser. If the bug only exists in the unstable version, consider reporting the bug to the browser developer.\n\n\n\nGet started/Using GitHub/Allow network accessAllowing access to GitHub's services from a restricted networkIf your network restricts access to specific domains, a network administrator may be able to grant access to GitHub's services by creating exceptions for GitHub's domain names.In this articleAbout access to GitHub from a restricted networkRetrieving GitHub's domain names using the REST APIAbout access to GitHub from a restricted network
In rare cases, an institution's network access policy may restrict access to specific domain names for end users. For example, the policy may use DNS filtering to deny access to sites like GitHub. If your institution requires this level of control, but you still want to permit access to services on GitHub, you can create exceptions in your policy to allow access to the necessary domains.
Retrieving GitHub's domain names using the REST API
You can use the REST API to retrieve a list of GitHub's domain names.
Warning

The list of domains from the REST API is not intended to be comprehensive. If you block access to services using DNS, but selectively allow access to GitHub's domain names, any or all of GitHub and related services may not function properly or at all for your end users.

For more information, see REST API endpoints for meta data.\n\n\n\nGet started/Using GitHub/Connectivity problemsTroubleshooting connectivity problemsIf you're having trouble connecting to GitHub, you can troubleshoot your connection, then use the GitHub Debug tool to diagnose problems.In this articleAllowing GitHub's IP addressesUsing a company or organization's networkTroubleshooting the captchaSwitching cloning methodsTroubleshooting slow downloads and intermittent slow connectionsTroubleshooting with GitHub DebugMost often, connection problems occur because a firewall, proxy server, corporate network, or other network is configured in a way that blocks GitHub.
Allowing GitHub's IP addresses
Make sure your network is configured to allow GitHub's IP addresses. For more information, see About GitHub's IP addresses.
Using a company or organization's network
If you're having connectivity problems on your company or organization's network, check with your network administrator to find out if the network has rules in place to block certain traffic. If there are rules in place, ask your network administrator to allow traffic to GitHub.
Troubleshooting the captcha
If you're unable to verify with the captcha:

Ensure JavaScript is enabled on your browser.
Ensure your browser is supported. If your browser isn't supported, upgrade your browser or install a supported browser. For a list of supported browsers, see Supported browsers.
Ensure your network configuration is not blocking https://octocaptcha.com/ or https://arkoselabs.com/. If you're behind a corporate firewall, contact your IT administrator to allow those domains. To verify access to these domains, visit https://octocaptcha.com/test and ensure the text "Connection successfully made!" is displayed. Then, visit Arkose Labs Demo for a captcha test page, and ensure you are able to load the captcha.
Ensure your browser does not have plug-ins or extensions that may be interfering with GitHub. If so, temporarily disable the plug-ins or extensions during captcha verification.

Switching cloning methods
Switching from cloning via SSH to cloning via HTTPS, or vice versa may improve connectivity. For more information, see Troubleshooting cloning errors.
If you prefer to use SSH but the port is blocked, you can use an alternative port. For more information, see Using SSH over the HTTPS port.
If you're encountering timeouts with SSH, see Error: Bad file number.
Troubleshooting slow downloads and intermittent slow connections
GitHub does not throttle bandwidth per user.
If you're experiencing slow connections at certain times of day but not others, the slow speeds are most likely due to network congestion. Because GitHub cannot resolve network congestion, you should escalate the problem to your internet service provider.
Troubleshooting with GitHub Debug
If you've followed all of the troubleshooting suggestions above and are still having connection problems, you can follow the instructions on the GitHub Debug site to run tests and send a report to GitHub Support. For more information, see GitHub Debug.\n\n\n\nGet started/Learning about GitHub/GitHub’s plansGitHub’s plansAn overview of GitHub's pricing plans.In this articleAbout GitHub's plansGitHub Free for personal accountsGitHub ProGitHub Free for organizationsGitHub TeamGitHub EnterpriseFurther readingAbout GitHub's plans
GitHub offers free and paid plans for storing and collaborating on code. Some plans are available only to personal accounts, while other plans are available only to organization and enterprise accounts. For more information about accounts, see Types of GitHub accounts.
See costs and features for each plan at GitHub Pricing. For information on planned features and products, see the GitHub public roadmap.
When you read GitHub Docs, make sure to select the version that reflects your plan. For more information, see About versions of GitHub Docs.
GitHub Free for personal accounts
With GitHub Free for personal accounts, you can work with unlimited collaborators on unlimited public repositories with a full feature set, and on unlimited private repositories with a limited feature set.
With GitHub Free, your personal account includes:

GitHub Community Support
Dependabot alerts
Deployment protection rules for public repositories
Two-factor authentication enforcement
500 MB GitHub Packages storage
120 GitHub Codespaces core hours per month
15 GB GitHub Codespaces storage per month
GitHub Actions features:

2,000 minutes per month
Deployment protection rules for public repositories


GitHub Pages in public repositories

GitHub Pro
In addition to the features available with GitHub Free for personal accounts, GitHub Pro includes:

GitHub Support via email
3,000 GitHub Actions minutes per month
2 GB GitHub Packages storage
180 GitHub Codespaces core hours per month
20 GB GitHub Codespaces storage per month
Advanced tools and insights in private repositories:


Required pull request reviewers


Multiple pull request reviewers


Protected branches


Code owners


Auto-linked references


GitHub Pages
Note

To publish a GitHub Pages site privately, you need to have an organization account. Additionally, your organization must use GitHub Enterprise Cloud.



Wikis


Repository insights graphs: Pulse, contributors, traffic, commits, code frequency, network, and forks
Note

Certain contributor, commit, and code frequency insights are only available for repositories that have less than 10,000 commits.





GitHub Free for organizations
With GitHub Free for organizations, you can work with unlimited collaborators on unlimited public repositories with a full feature set, or unlimited private repositories with a limited feature set.
In addition to the features available with GitHub Free for personal accounts, GitHub Free for organizations includes:

GitHub Community Support
Team access controls for managing groups
2,000 GitHub Actions minutes per month

GitHub Team
In addition to the features available with GitHub Free for organizations, GitHub Team includes:


GitHub Support via email


3,000 GitHub Actions minutes per month


2 GB GitHub Packages storage


The option to purchase GitHub Advanced Security products:

GitHub Code Security
GitHub Secret Protection

For more information, see About GitHub Advanced Security.


Advanced tools and insights in private repositories:


Required pull request reviewers


Multiple pull request reviewers


Draft pull requests


Team pull request reviewers


Protected branches


Code owners


Scheduled reminders


GitHub Pages
Note

To publish a GitHub Pages site privately, you need to have an organization account. Additionally, your organization must use GitHub Enterprise Cloud.



Wikis


Security overview


Repository insights graphs: Pulse, contributors, traffic, commits, code frequency, network, and forks
Note

Certain contributor, commit, and code frequency insights are only available for repositories that have less than 10,000 commits.





The option to enable or disable GitHub Codespaces

Organization owners can choose to enable or disable GitHub Codespaces for the organization's private repositories, and can pay for the usage of members and collaborators. For more information, see Enabling or disabling GitHub Codespaces for your organization and Choosing who owns and pays for codespaces in your organization.



GitHub bills for GitHub Team on a per-user basis. For more information, see About per-user pricing.
GitHub Actions usage is free for standard GitHub-hosted runners in public repositories, and for self-hosted runners. See Choosing the runner for a job. For private repositories, each GitHub account receives a certain amount of free minutes and storage for use with GitHub-hosted runners, depending on the account's plan. Any usage beyond the included amounts is controlled by spending limits.
GitHub Enterprise
GitHub Enterprise includes two deployment options: GitHub Enterprise Cloud, which is hosted by GitHub in the cloud, and GitHub Enterprise Server, which is self-hosted. For more information, see About GitHub for enterprises in the GitHub Enterprise Cloud documentation.
In addition to the features available with GitHub Team, GitHub Enterprise includes:

GitHub Enterprise Support
Additional security, compliance, and deployment controls
Authentication with SAML single sign-on
Access provisioning with SAML or SCIM
Deployment protection rules with GitHub Actions for private or internal repositories
GitHub Connect
Additional features such as internal repositories and repository rules.

GitHub Enterprise Cloud specifically includes:


50,000 GitHub Actions minutes per month

Included minutes can be used with standard GitHub-hosted runners only. For more information about billing for larger runners, see About larger runners.



50 GB GitHub Packages storage


A service level agreement for 99.9% monthly uptime


The option to centrally manage policy and billing for multiple GitHub organizations with an enterprise account. For more information, see About enterprise accounts.

If you upgrade an existing organization to GitHub Enterprise Cloud, your enterprise account will contain your organization. For more information, see Upgrading your account's plan and Creating an enterprise account in the GitHub Enterprise Cloud documentation.



The option to provision and manage the user accounts for your developers, by using Enterprise Managed Users. For more information, see About Enterprise Managed Users.


Additional features such as audit log streaming and IP allow list. For more information, see Streaming the audit log for your enterprise and Restricting network traffic to your enterprise with an IP allow list in the GitHub Enterprise Cloud documentation.


The option to host your company's data in a specific region, on a unique subdomain


For a detailed list of the features available with GitHub Enterprise, see our Pricing page.
To see how GitHub compares to GitLab, Bitbucket, and Jenkins, see Comparing GitHub to other DevOps solutions.
You can set up trials to evaluate GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see Setting up a trial of GitHub Enterprise Cloud and Setting up a trial of GitHub Enterprise Server.
Further reading

About per-user pricing in the GitHub Enterprise Cloud documentation\n\n\n\nGet started/Learning about GitHub/GitHub language supportGitHub language supportAn overview of the programming languages supported by GitHub features.In this articleAbout supported languagesCore languages supported by GitHub featuresAbout supported languages
Most GitHub features work regardless of which languages your code is written in. You can search for code or enable syntax highlighting based on any language known to GitHub. For more information, see Understanding GitHub Code Search syntax or Creating and highlighting code blocks.
Some GitHub products have features that are currently only supported for a subset of programming languages.
Core languages supported by GitHub features
Core languages for GitHub features include C, C++, C#, Go, Java, JavaScript, Kotlin, PHP, Python, Ruby, Rust, Scala, and TypeScript. For features that support package managers, the currently supported package managers are included in the table with their relevant languages.
Some features are supported for additional languages or package managers. If you want to know whether another language is supported for a feature or to request support for a language, visit GitHub Community discussions.















































































































































































LanguageGitHub CopilotCode navigationCode scanningDependency graph, Dependabot alertsDependabot version updates, Dependabot security updatesGitHub ActionsGitHub PackagesCC++C#dotnet CLIdotnet CLIdotnet CLIGoGo modules Go modulesJavaMaven, GradleMaven, GradleMaven, GradleJavaScriptnpm, YarnnpmnpmKotlinMaven, GradleMaven, GradleMaven, GradlePHPthird-partyComposerComposerPythonpippipRubyRubyGemsRubyGemsRubyGemsRustthird-partyScalathird-partyMavenMaven, GradleSwiftSwift Package ManagerTypeScriptnpm, Yarnnpmnpm
Note


The language support for GitHub Copilot varies depending on the volume and diversity of training data for that language.
The support of Gradle for the dependency graph and Dependabot alerts is limited to the upload of data obtained using the dependency submission API.
PHP, Rust, and Scala are supported for code scanning by third-party actions.\n\n\n\nGet started/Learning about GitHub/Types of GitHub accountsTypes of GitHub accountsAccounts on GitHub allow you to organize and control access to code.In this articleAbout accountsUser accountsOrganization accountsEnterprise accountsFurther readingAbout accounts
With GitHub, you can store and collaborate on code. Accounts allow you to organize and control access to that code. There are three types of accounts on GitHub.

User accounts
Organization accounts
Enterprise accounts

Every person who uses GitHub signs in to a user account. An organization account enhances collaboration between multiple users, and an enterprise account allows central management of multiple organizations.
User accounts
Every person who uses GitHub signs in to a user account. Your user account is your identity on GitHub and has a username and profile. For example, see @octocat's profile.
Your user account can own resources such as repositories, packages, and projects. Any time you take any action on GitHub, such as creating an issue or reviewing a pull request, the action is attributed to your user account.
User accounts are intended for humans, but you can create accounts to automate activity on GitHub. This type of account is called a machine user. For example, you can create a machine user account to automate continuous integration (CI) workflows.
There are two types of user account:

Personal accounts
Managed user accounts

Personal accounts
If you signed up for your own account on GitHub.com, you are using a personal account.
Each personal account uses either GitHub Free or GitHub Pro. All personal accounts can own an unlimited number of public and private repositories, with an unlimited number of collaborators on those repositories. If you use GitHub Free, private repositories owned by your personal account have a limited feature set. You can upgrade to GitHub Pro to get a full feature set for private repositories. For more information, see GitHub’s plans.
Many people use one personal account for all their work on GitHub.com, including both open source projects and paid employment. If you're currently using more than one personal account that you created for yourself, we suggest combining the accounts. For more information, see Merging multiple personal accounts.
Even if you're a member of an organization that uses SAML single sign-on, you will still sign in to your own personal account on GitHub.com, and that personal account will be linked to your identity in your organization's identity provider (IdP). For more information, see About authentication with SAML single sign-on" in the GitHub Enterprise Cloud documentation.
Managed user accounts
If your account was created for you by an enterprise on GitHub Enterprise Cloud, you are using a managed user account.
As a managed user account:

Some of your account details and settings are managed by your enterprise.
You must sign in to your managed user account to access organizations and repositories owned by the enterprise.
You can create your own private repositories, but you cannot create public content or contribute to repositories outside the enterprise.

Organization accounts
Organizations are shared accounts where a large number of people can collaborate across many projects at once.
Like user accounts, organizations can own resources such as repositories, packages, and projects. However, you cannot sign in to an organization. Instead, each person signs in to their user account, and any actions the person takes on organization resources are attributed to their user account. Each user can be a member of multiple organizations.
The users within an organization can be given different roles in the organization, which grant different levels of access to the organization and its data. All members can collaborate with each other in repositories and projects, but only organization owners and security managers can manage the settings for the organization and control access to the organization's data with sophisticated security and administrative features. For more information, see Roles in an organization and Keeping your organization secure.
You can also create nested sub-groups of organization members called teams, to reflect your group's structure and simplify access management. For more information, see About teams.
You can use organizations for free, with GitHub Free, which includes limited features on private repositories. To get the full feature set on private repositories and additional features at the organization level, including SAML single sign-on and improved support coverage, you can upgrade to GitHub Team or GitHub Enterprise Cloud. For more information, see GitHub’s plans.
Organizations are limited to owning 100,000 repositories, to create additional repositories you can create additional organizations.
For more information about how you can try GitHub Enterprise Cloud for free, see Setting up a trial of GitHub Enterprise Cloud.
For more information about all the features of organizations, see About organizations.
Enterprise accounts
GitHub Enterprise Cloud and GitHub Enterprise Server include enterprise accounts, which allow administrators to centrally manage policy and billing for multiple organizations and enable innersourcing between the organizations. For more information, see About enterprise accounts in the GitHub Enterprise Cloud documentation.
Further reading

Creating an account on GitHub
Creating a new organization from scratch
Organizing people for successful collaboration video in GitHub Resources\n\n\n\nGet started/Learning about GitHub/Access permissionsAccess permissions on GitHubWith roles, you can control who has access to your accounts and resources and the level of access each person has.In this articleAbout access permissions on GitHubPersonal accountsOrganization accountsEnterprise accountsFurther readingAbout access permissions on GitHub
To perform any actions on GitHub, such as creating a pull request in a repository or changing an organization's billing settings, a person must have sufficient access to the relevant account or resource. This access is controlled by permissions. A permission is the ability to perform a specific action. For example, the ability to delete an issue is a permission. A role is a set of permissions you can assign to individuals or teams.
Roles work differently for different types of accounts. For more information about accounts, see Types of GitHub accounts.
Personal accounts
A repository owned by a personal account has two permission levels: the repository owner and collaborators. For more information, see Permission levels for a personal account repository.
Organization accounts
Organization members can have owner, billing manager, or member roles. Owners have complete administrative access to your organization, while billing managers can manage billing settings. Member is the default role for everyone else. You can manage access permissions for multiple members at a time with teams. For more information, see:

Roles in an organization
Repository roles for an organization
About teams

Enterprise accounts
Enterprise accounts are available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see About enterprise accounts in the GitHub Enterprise Cloud documentation.
For more information about permissions for enterprise accounts, see the GitHub Enterprise Cloud documentation.
Further reading

Types of GitHub accounts\n\n\n\nGet started/Learning about GitHub/GitHub Advanced SecurityAbout GitHub Advanced SecurityGitHub makes extra security features available to customers who purchase GitHub Code Security or GitHub Secret Protection. Some features are enabled for public repositories by default.Who can use this feature?GitHub Code Security and GitHub Secret Protection are available for accounts on GitHub Team and GitHub Enterprise Cloud.
Some features are also available for free for public repositories on GitHub.com. For more information, see GitHub’s plans.
For information about GitHub Advanced Security for Azure DevOps, see Configure GitHub Advanced Security for Azure DevOps in Microsoft Learn.In this articleAbout GitHub Advanced Security productsGitHub Code SecurityGitHub Secret ProtectionRun an assessment of your organization's exposure to secret leaksDeploying GitHub Code Security and GitHub Secret ProtectionEnabling featuresAbout GitHub Advanced Security CertificationAbout GitHub Advanced Security with Azure ReposFurther readingAbout GitHub Advanced Security products
GitHub has many features that help you improve and maintain the quality of your code. Some of these are included in all plans, such as dependency graph and Dependabot alerts.
Other security features require you to purchase one of GitHub's Advanced Security products:

GitHub Secret Protection, which includes features that help you detect and prevent secret leaks, such as secret scanning and push protection.
GitHub Code Security, which includes features that help you find and fix vulnerabilities, like code scanning, premium Dependabot features, and dependency review.

Some of these features, such as code scanning and secret scanning, are enabled for public repositories by default. To run the feature on your private or internal repositories, you must purchase the relevant GitHub Advanced Security product.
You must be on a GitHub Team or GitHub Enterprise plan in order to purchase GitHub Code Security or GitHub Secret Protection. For more information, see GitHub’s plans and About billing for GitHub Advanced Security.
GitHub Code Security
You get the following features with GitHub Code Security:


Code scanning: Search for potential security vulnerabilities and coding errors in your code using CodeQL or a third-party tool.


CodeQL CLI: Run CodeQL processes locally on software projects or to generate code scanning results for upload to GitHub.


Copilot Autofix: Get automatically generated fixes for code scanning alerts.


Security campaigns: Reduce security debt at scale.


Custom auto-triage rules for Dependabot: Manage your Dependabot alerts at scale, by automating which alerts you want to ignore, snooze, or trigger a Dependabot security update for.


Dependency review: Show the full impact of changes to dependencies and see details of any vulnerable versions before you merge a pull request.


Security overview: Understand the distribution of risk across your organization.


The table below summarizes the availability of GitHub Code Security features for public and private repositories.














































































Public repository without GitHub Secret ProtectionPrivate repository without GitHub Code SecurityPublic or private repository with GitHub Code SecurityCode scanningCodeQL CLICopilot AutofixSecurity campaignsCustom auto-triage rulesDependency reviewSecurity overview

For more information about features, see GitHub security features.
GitHub Secret Protection
You get the following features with GitHub Secret Protection:


Secret scanning: Detect secrets, for example keys and tokens, that have been checked into a repository and receive alerts.


Push protection: Prevent secret leaks before they happen by blocking commits containing secrets.


Copilot secret scanning: Leverage AI to detect unstructured credentials, such as passwords, that have been checked into a repository.


Custom patterns: Detect and prevent leaks for organization-specific secrets.


Delegated bypass for push protection and Delegated alert dismissal:  Implement an approval process for better control over who in your enterprise can perform sensitive actions, supporting governance at scale.


Security overview: Understand the distribution of risk across your organization.


The table below summarizes the availability of GitHub Secret Protection features for public and private repositories.








































































Public repository without GitHub Secret ProtectionPrivate repository without GitHub Secret ProtectionPublic or private repository with GitHub Secret ProtectionSecret scanningPush protectionCopilot secret scanningCustom patternsDelegated bypass for push protectionSecurity overview

For more information about individual features, see GitHub security features.
Run an assessment of your organization's exposure to secret leaks
Organizations on GitHub Team and GitHub Enterprise can run a free report to scan the code in the organization for leaked secrets. This can help you understand the current exposure of repositories in your organization to leaked secrets, as well as help you see how many existing secret leaks could have been prevented by GitHub Secret Protection. See About the secret risk assessment.
Deploying GitHub Code Security and GitHub Secret Protection
To learn about what you need to know to plan your deployment of GitHub Code Security and GitHub Secret Protection at a high level and to review the rollout phases we recommended, see Adopting GitHub Advanced Security at scale.
Enabling features
You can quickly enable security features at scale with the GitHub-recommended security configuration, a collection of security enablement settings you can apply to repositories in an organization. You can then further customize Advanced Security features at the organization level with global settings. See About enabling security features at scale.
If you are on a GitHub Team or GitHub Enterprise plan, license use for the entire team or  enterprise is shown on your license page. See Viewing and downloading licensed use of Advanced Security.
About GitHub Advanced Security Certification
You can highlight your knowledge by earning a GitHub Advanced Security certificate with GitHub Certifications. The certification validates your expertise in vulnerability identification, workflow security, and robust security implementation. See About GitHub Certifications.
About GitHub Advanced Security with Azure Repos
If you want to use GitHub Advanced Security with Azure Repos, see GitHub Advanced Security & Azure DevOps in our resources site. For documentation, see Configure GitHub Advanced Security for Azure DevOps in Microsoft Learn.
Further reading

GitHub security features
GitHub public roadmap\n\n\n\nGet started/Learning about GitHub/Changes to GitHub plansFAQ about changes to GitHub’s plansAs of April 14, 2020, GitHub announced that all of the core GitHub features are now free for everyone.In this articleWhat plans and pricing changes did GitHub announce on April 14?How can I upgrade my plan?How can I downgrade my plan?If I downgrade from GitHub Team or a Legacy plan to GitHub Free, what features will I lose?How can I create a GitHub Free or GitHub Team organization?How can I compare which features are in each plan?How long will GitHub Free allow unlimited collaborators?I already paid for the yearly Pro or Team plan, do I get a refund for the price difference?What is the difference between GitHub Free for individual developers and GitHub Free for organizations?How can I get more Actions minutes if I need more than allocated in the GitHub Team plan?How do the seat limit changes affect me?Is anything changing for teams on the GitHub Team for Open Source plan?What is GitHub Community on Discussions?How does this change affect education benefits?How does this affect me if I currently pay by invoice?How will this impact users and organizations in regions where U.S. government sanctions are applied?What plans and pricing changes did GitHub announce on April 14?
GitHub announced the following plans and pricing changes:

GitHub Free for organizations is immediately available and includes private repositories for unlimited users
All organizations previously using Team for Open Source now have GitHub Free
GitHub Free for individual developers now includes unlimited collaborators
Organizations and individuals using GitHub Free will receive GitHub Community Support
GitHub Pro will now include 2GB of Packages storage and 10GB of data transfer
GitHub Pro now has a reduced monthly price of $4
GitHub Team now has a reduced monthly price of $4 per user
GitHub Team no longer has a required five-seat minimum
GitHub Team includes 3,000 Actions minutes per month for private repositories

How can I upgrade my plan?
To upgrade your account's plan, see Upgrading your account's plan.
How can I downgrade my plan?
To downgrade your personal account or organizations's plan, see Downgrading your account's plan.
If I downgrade from GitHub Team or a Legacy plan to GitHub Free, what features will I lose?

Required reviewers in private repositories
Protected branches in private repositories
Code owners in private repositories
GitHub Pages in private repositories
Wikis in private repositories
Multiple assignees for issues and pull requests in private repositories
Multiple pull request reviewers in private repositories
Draft pull requests in private repositories
Autolinked references in private repositories
Standard support

How can I create a GitHub Free or GitHub Team organization?
If you have a GitHub account, create a new organization on our team plan page. If you don’t have a GitHub account, you can create one on our homepage and you’ll be prompted to create an organization during the sign-up process.
How can I compare which features are in each plan?
You can see pricing and a full list of features for each product at https://github.com/pricing.
How long will GitHub Free allow unlimited collaborators?
Forever! This change is permanent.
I already paid for the yearly Pro or Team plan, do I get a refund for the price difference?
Customers who are currently paying annually for Pro and Team plans and signed up before April 14 will receive a refund for a prorated amount through the end of their annual billing term. For example, if you are two months into your subscription that is billed annually, you will receive a refund for the price difference for the remaining ten months. These refunds will be processed in approximately 30 days. Once your refund is processed, a notification will be sent to the billing email.
What is the difference between GitHub Free for individual developers and GitHub Free for organizations?
For details on the differences for each GitHub Free product, see GitHub’s plans.
How can I get more Actions minutes if I need more than allocated in the GitHub Team plan?
Most small teams use fewer than 3,000 Actions minutes/month, but some teams might use more. If your team needs additional minutes for private repositories, you can increase your spending limit for GitHub Actions. Actions minutes and Packages storage are still free for your public repositories. For more information, see Managing your spending limit for GitHub Actions.
How do the seat limit changes affect me?
Now that GitHub Team has no minimum seat requirement, if you are using fewer than five seats in your organization, you can remove paid seats to reduce your bill. For more information, see Downgrading your account's plan.
Is anything changing for teams on the GitHub Team for Open Source plan?
If your organization account currently uses the GitHub Team for Open Source plan, you’ve been automatically moved to GitHub Free, which includes private repositories with unlimited collaborators, 2,000 Actions minutes for private repositories, and GitHub Community on Discussions. Actions minutes and Packages storage are still free for your public repositories.
What is GitHub Community on Discussions?
GitHub Community is built to support all GitHub users on their educational journey, via Discussions. It is a resource hub, learning portal, and inspiration station, all in one. Regardless of how big or small your challenge is, all resources and information will be accessible in a true open source fashion. If you need to report spam, report abuse, or have issues with account access, you can send a message to our Support Team on https://support.github.com/.
How does this change affect education benefits?
Students and teachers will continue to receive all of the benefits they get today. GitHub will continue to offer GitHub Pro as part of its Student Developer Pack benefits to all students. Additionally, teachers will continue to have access to GitHub Team as part of the Teacher Toolbox.
How does this affect me if I currently pay by invoice?
If you’re currently an invoice customer, email your sales representative for additional details. If you’re not sure who your sales representative is, contact your billing manager or account owner.
How will this impact users and organizations in regions where U.S. government sanctions are applied?
Due to U.S. trade controls law restrictions, GitHub is unable to provide private repository services and paid services to accounts in U.S. sanctioned regions. GitHub has preserved, however, access to free public repository services. Please read about GitHub and Trade Controls for more information.
GitHub will continue advocating with U.S. regulators for the greatest possible access to free code collaboration services to developers in sanctioned regions, including free private repositories. We believe that offering those free services supports U.S. foreign policy of encouraging the free flow of information and free speech in those regions.\n\n\n\nGet started/Learning about GitHub/GitHub glossaryGitHub glossaryThis glossary introduces common Git and GitHub terminology.In this article@mentionaccess tokenAPI previewapplianceassigneeauthentication codebase branchbasic authenticationbilling cyclebilling emailbilling managerbilling planbioblameblockbranchbranch restrictionBusiness planCA certificatecardcheckcheckoutcherry-pickingchild teamcleancloneclusteringcode frequency graphcode of conductcode ownercollaboratorcommitcommit authorcommit graphcommit IDcommit messagecompare branchcontinuous integrationcontribution graphcontribution guidelinescontributionscontributorcontributors graphcouponcroncURLdashboarddefault branchdependency graphdependents graphdeploy keydetached HEADdiagnosticsdiffdirectorydirtyemail notificationsenterprise accountExplorerfast-forwardfeature branchfenced code blockfetchfollowing (users)force pushforkFree plangistGitgitfileGitHub AppGitHub Flavored MarkdownGitHub ImporterGitHub JobsGitHub MarketplaceGitHub PagesGitHub WikiGraphQLHEADhead branchHello, Worldhigh-availabilityhookhostnameidenticonidentity providerinstanceintegrationissueJekyllJekyll Theme Chooserkey fingerprintkeychainkeywordlabelLFSlicenseline commentline endingLinguistlocked personal accountmainmanagement consoleMarkdownmarkupmastermembers graphmentionmergemerge conflictmilestonemirrornested teamnetwork graphnews feednon-fast-forwardnotificationOAuth appOAuth tokenopen sourceorganizationorganization owneroriginoutside collaboratorownerparent teamparticipating notificationspermalinkpersonal accountpinned repositorypre-receive hooksprimary email addressprivate contributionsprivate repositoryproduction branchprofileprofile photoproject boardprotected branchpublic contributionspublic repositorypullpull accesspull requestpull request reviewpulse graphpunch graphpushpush a branchpush accessread accessREADMErebaserecovery codereleaseremoteremote repositoryremote URLreplicarepositoryrepository cacherepository graphrepository maintainerrequired pull request reviewrequired status checkresolverevertreviewroot directoryroot filesystemsaved replyscopeseatsecret teamsecurity logserver-to-server requestservice hooksingle sign-onsnapshotsquashSSH keystaging instancestarstatusstatus checkssubscriptionteamteam maintainerTeam plantimelinetopic branchtopicstraffic graphtransferupstreamupstream branchuseruser-to-server requestusernamevisible teamwatchwatching notificationsweb notificationswebhookswrite accessFurther reading@mention
To notify a person on GitHub by using @ before their username. Users in an organization on GitHub can also be a part of a team that can be mentioned.
access token
A token that is used in place of a password when performing Git operations over HTTPS with Git on the command line or the API. Also called a personal access token.
API preview
A way to try out new APIs and changes to existing API methods before they become part of the official GitHub API.
appliance
A software application combined with just enough operating system (JeOS) to run optimally on industry-standard hardware (typically a server) or in a virtual machine.
assignee
The user that is assigned to an issue.
authentication code
A code you'll supply, in addition to your GitHub password, when signing in with 2FA via the browser. This code is either generated by an application or delivered to your phone via text message. Also called a "2FA authentication code."
base branch
The branch into which changes are combined when you merge a pull request. When you create a pull request, you can change the base branch from the repository's default branch to another branch if required.
basic authentication
A method of authentication where the credentials are sent as unencrypted text.
billing cycle
The interval of time for your specific billing plan.
billing email
The organization email address where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication.
billing manager
The organization member that manages billing settings for an organization.
billing plan
Payment plans for users and organizations that include set features for each type of plan.
bio
The user-generated description found on a profile: Adding a bio to your profile
blame
The "blame" feature in Git describes the last modification to each line of a file, which generally displays the revision, author and time. This is helpful, for example, in tracking down when a feature was added, or which commit led to a particular bug.
block
To remove a user's ability to collaborate on an organization's repositories.
branch
A branch is a parallel version of a repository. It is contained within the repository, but does not affect the primary or main branch allowing you to work freely without disrupting the "live" version. When you've made the changes you want to make, you can merge your branch back into the main branch to publish your changes.
branch restriction
A restriction that repository admins can enable so that only certain users or teams can push or make certain changes to the branch.
Business plan
An organization billing plan where you can collaborate on unlimited public and private repositories, allow or require organization members to authenticate to GitHub using SAML SSO, and provision and deprovision access with SAML or SCIM.
CA certificate
A digital certificate issued by Certificate Authority (CA) that ensures there are valid connections between two machines, such as a user's computer and GitHub.com and verifies the ownership of a site.
card
A movable square within a project board associated with an issue or pull request.
check
A check is a type of status check on GitHub. See Status checks.
checkout
You can use git checkout on the command line to create a new branch, change your current working branch to a different branch, or even to switch to a different version of a file from a different branch with git checkout [branchname] [path to file]. The "checkout" action updates all or part of the working tree with a tree object or blob from the object database, and updates the index and HEAD if the whole working tree is pointing to a new branch.
cherry-picking
To choose a subset of changes from a series of changes (typically commits) and record them as a new series of changes on top of a different codebase. In Git, this is performed by the git cherry-pick command to extract the change introduced by an existing commit on another branch and to record it based on the tip of the current branch as a new commit. For more information, see git-cherry-pick in the Git documentation.
child team
Within nested teams, the subteam that inherits the parent team's access permissions and @mentions.
clean
A working tree is clean if it corresponds to the revision referenced by the current HEAD. Also see dirty.
clone
A clone is a copy of a repository that lives on your computer instead of on a website's server somewhere, or the act of making that copy. When you make a clone, you can edit the files in your preferred editor and use Git to keep track of your changes without having to be online. The repository you cloned is still connected to the remote version so that you can push your local changes to the remote to keep them synced when you're online.
clustering
The ability to run GitHub Enterprise services across multiple nodes and load balance requests between them.
code frequency graph
A repository graph that shows the content additions and deletions for each week in a repository's history.
code of conduct
A document that defines standards for how to engage in a community.
code owner
A person who is designated as an owner of a portion of a repository's code. The code owner is automatically requested for review when someone opens a pull request (not in draft mode) that makes changes to code the code owner owns.
collaborator
A collaborator is a person with read and write access to a repository who has been invited to contribute by the repository owner.
commit
A commit, or "revision", is an individual change to a file (or set of files). When you make a commit to save your work, Git creates a unique ID (a.k.a. the "SHA" or "hash") that allows you to keep record of the specific changes committed along with who made them and when. Commits usually contain a commit message which is a brief description of what changes were made.
commit author
The user who makes the commit.
commit graph
A repository graph that shows all the commits made to a repository in the past year.
commit ID
Also known as SHA. A 40-character checksum hash that identifies the commit.
commit message
Short, descriptive text that accompanies a commit and communicates the change the commit is introducing.
compare branch
The branch you use to create a pull request. This branch is compared to the base branch you choose for the pull request, and the changes are identified. When the pull request is merged, the base branch is updated with the changes from the compare branch. Also known as the "head branch" of the pull request.
continuous integration
Also known as CI. A process that runs automated builds and tests once a person commits a change to a configured repository on GitHub. CI is a common best practice in software development that helps detect errors.
contribution graph
The part of a user's profile that shows their contributions over a period of up to one year, day by day.
contribution guidelines
A document explaining how people should contribute to your project.
contributions
Specific activities on GitHub that will:

Add a square to a user's contribution graph: Viewing contributions on your profile
Add activities to a user's timeline on their profile: Viewing contributions on your profile

contributor
A contributor is someone who does not have collaborator access to a repository but has contributed to a project and had a pull request they opened merged into the repository.
contributors graph
A repository graph that displays the top 100 contributors to a repository.
coupon
A GitHub-provided code that users or organizations can use to pay for all or part of their subscription.
cron
A time-based job scheduler in Unix-like computer operating systems.
cURL
Used in command lines or scripts to transfer data.
dashboard
Your personal dashboard is the main hub of your activity on GitHub. From your personal dashboard, you can keep track of issues and pull requests you're following or working on, navigate to your top repositories and team pages, and learn about recent activity in repositories you're watching or participating in. You can also discover new repositories, which are recommended based on users you're following and repositories you have starred. To only view activity for a specific organization, visit your organization's dashboard. For more information, see About your personal dashboard or About your organization dashboard.
default branch
The base branch for new pull requests and code commits in a repository. Each repository has at least one branch, which Git creates when you initialize the repository. The first branch is usually called main, and is often the default branch.
dependency graph
A repository graph that shows the packages and projects that the repository depends on.
dependents graph
A repository graph that shows the packages, projects, and repositories that depend on a public repository.
deploy key
A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user account.
detached HEAD
Git will warn you if you're working on a detached HEAD, which means that Git is not pointing to a branch and that any commits you make will not appear in commit history.  For example, when you check out an arbitrary commit that is not the latest commit of any particular branch, you're working on a "detached HEAD."
diagnostics
An overview of a GitHub Enterprise instance's settings and environment.
diff
A diff is the difference in changes between two commits, or saved changes. The diff will visually describe what was added or removed from a file since its last commit.
directory
A folder containing one or more files or folders. You can create directories to organize the contents of a repository.
dirty
A working tree is considered "dirty" if it contains modifications that have not been committed to the current branch.
email notifications
Notifications sent to a user's email address.
enterprise account
Enterprise accounts allow you to centrally manage policy and billing for multiple organizations. Enterprise accounts are available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see About enterprise accounts in the GitHub Enterprise Cloud documentation.
Explorer
An instance of GraphiQL, which is a "graphical interactive in-browser GraphQL IDE."
fast-forward
A fast-forward is a special type of merge where you have a revision and you are "merging" another branch's changes that happen to be a descendant of what you have. In such a case, you do not make a new merge commit but instead just update to this revision. This will happen frequently on a remote-tracking branch of a remote repository.
feature branch
A branch used to experiment with a new feature or fix an issue that is not in production. Also called a topic branch.
fenced code block
An indented block of code you can create with GitHub Flavored Markdown using triple backticks ``` before and after the code block. See this example.
fetch
When you use git fetch, you're adding changes from the remote repository to your local working branch without committing them. Unlike git pull, fetching allows you to review changes before committing them to your local branch.
following (users)
To get notifications about another user's contributions and activity.
force push
A Git push that overwrites the remote repository with local changes without regard for conflicts.
fork
A fork is a personal copy of another user's repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original upstream repository. You can also open a pull request in the upstream repository and keep your fork synced with the latest changes since both repositories are still connected.
Free plan
A user account billing plan that is free. Users can collaborate on unlimited public repositories with unlimited collaborators.
gist
A gist is a shareable file that you can edit, clone, and fork on GitHub. You can make a gist public or secret, although secret gists will be available to anyone with the URL.
Git
Git is an open source program for tracking changes in text files. It was written by the author of the Linux operating system, and is the core technology that GitHub, the social and user interface, is built on top of.
gitfile
A plain .git file, which is always at the root of a working tree and points to the Git directory, which has the entire Git repository and its meta data. You can view this file for your repository on the command line with git rev-parse --git-dir. That is the real repository.
GitHub App
GitHub Apps provide a service to an entire organization and use their own identity when performing their function. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks.
GitHub Flavored Markdown
GitHub-specific Markdown used to format prose and code across GitHub. See GitHub Flavored Markdown Spec or Getting started with writing and formatting on GitHub.
GitHub Importer
A tool that quickly imports source code repositories, including commits and revision history, to GitHub for users.
GitHub Jobs
A GitHub site where employers can post jobs that GitHub users may be interested in.
GitHub Marketplace
A subsite for GitHub users and organizations to purchase and install applications that extend and complement their workflow.
GitHub Pages
Also referred to as Pages. A static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.
GitHub Wiki
A section for hosting wiki style documentation on a GitHub repository.
GraphQL
A query language for APIs and a runtime for fulfilling those queries with your existing data.
HEAD
A defined commit of a branch, usually the most recent commit at the tip of the branch.
head branch
The branch whose changes are combined into the base branch when you merge a pull request. Also known as the "compare branch."
Hello, World
A "Hello, World!" program is a computer program that outputs or displays "Hello, World!" to a user. Since this program is usually very simple, it is often used as an example of a programming language's basic syntax and serves as a common first exercise for learning a new programming language.
high-availability
A system or component that is continuously operational for a desirably long length of time.
hook
During the normal execution of several Git commands, call-outs are made to optional scripts that allow a developer to add functionality or checking. Typically, the hooks allow for a command to be pre-verified and potentially aborted, and allow for a post-notification after the operation is done.
hostname
Human-readable nicknames that correspond to the address of a device connected to a network.
identicon
An auto-generated image used as a default profile photo when users sign up for GitHub. Users can replace their identicon with their own profile photo.
identity provider
Also known as an IdP. A trusted provider that lets you use SAML single sign-on (SSO) to access other websites.
instance
An organization's private copy of GitHub contained within a virtual machine that they configure and control.
integration
A third-party application that integrates with GitHub. These are often GitHub Apps, GitHub Actions, or custom actions. For more information, see About building integrations.
issue
Issues are suggested improvements, tasks or questions related to the repository. Issues can be created by anyone (for public repositories), and are moderated by repository collaborators. Each issue contains its own discussion thread. You can also categorize an issue with labels and assign it to someone.
Jekyll
A static site generator for personal, project, or organization sites.
Jekyll Theme Chooser
An automated way to select a visual theme for your Jekyll site without editing or copying CSS files.
key fingerprint
A short sequence of bytes used to identify a longer public key.
keychain
A password management system in macOS.
keyword
A specific word that closes an issue when used within a pull request.
label
A tag on an issue or pull request. Repositories come with a handful of default labels, but users can create custom labels.
LFS
Git Large File Storage. An open source Git extension for versioning large files.
license
A document that you can include with your project to let people know what they can and can't do with your source code.
line comment
A comment within a pull request on a specific line of code.
line ending
An invisible character or characters that symbolize the end of a line in a text file.
Linguist
A library used on GitHub to detect blob languages, ignore binary or vendored files, suppress generated files in diffs, and generate language breakdown graphs.
locked personal account
A personal account that cannot be accessed by the user. Accounts are locked when users downgrade their paid account to a free one, or if their paid plan is past due.
main
The default development branch. Whenever you create a Git repository, a branch named main is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.
management console
A section within the GitHub Enterprise interface that contains administrative features.
Markdown
Markdown is an incredibly simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown and uses a particular form of Markdown called GitHub Flavored Markdown. See GitHub Flavored Markdown Spec or Getting started with writing and formatting on GitHub.
markup
A system for annotating and formatting a document.
master
The default branch in many Git repositories. By default, when you create a new Git repository on the command line, a branch called master is created. Many tools now use an alternative name for the default branch. For example, when you create a new repository on GitHub, the default branch is called main.
members graph
A repository graph that shows all the forks of a repository.
mention
A notification sent to a user by prefacing their username with the @ symbol. Users in an organization on GitHub can also be a part of a team that can be mentioned.
merge
Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another. This often happens as a "pull request" (which can be thought of as a request to merge), or via the command line. A merge can be done through a pull request via the GitHub.com web interface if there are no conflicting changes, or can always be done via the command line.
merge conflict
A difference that occurs between merged branches. Merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. The merge conflict must be resolved before you can merge the branches.
milestone
A way to track the progress on groups of issues or pull requests in a repository.
mirror
A new copy of a repository.
nested team
A child team of a parent team. You can have multiple children (or nested) teams.
network graph
A repository graph that shows the branch history of the entire repository network, including branches of the root repository and branches of forks that contain commits unique to the network.
news feed
An activity view of repositories or people you watch. An organization's News Feed shows activity on repositories owned by the organization.
non-fast-forward
When your local copy of a repository is out-of-sync with the upstream repository and you need to fetch the upstream changes before you push your local changes.
notification
Updates, delivered by either the web or email depending on your settings, that give you information about the activities you're interested in.
OAuth app
A third-party application that uses access tokens rather than passwords to access information for users.
OAuth token
The access token used by OAuth apps to access information for users.
open source
Open source software is software that can be freely used, modified, and shared (in both modified and unmodified form) by anyone. Today the concept of "open source" is often extended beyond software, to represent a philosophy of collaboration in which working materials are made available online for anyone to fork, modify, discuss, and contribute to.
organization
Organizations are a group of two or more users that typically mirror real-world organizations. They are administered by users and can contain both repositories and teams.
organization owner
Users who have full administrative access to the organization they own.
origin
The default upstream repository. Most projects have at least one upstream project that they track. By default, origin is used for that purpose.
outside collaborator
A user who has been given access to one or more of an organization’s repositories, but has no other access to the organization and is not a member of the organization.
owner
Organization members that have complete administrative access to the organization.
parent team
Within nested teams, the main team from which child teams inherit access permissions and @mentions.
participating notifications
A notification about an update in a conversation in an issue or pull request where your username or team was mentioned or where you have previously replied in a comment.
permalink
A permanent static hyperlink to a particular web page.
personal account
A GitHub account that belongs to an individual user.
pinned repository
A repository that a user has decided to display prominently on their profile.
pre-receive hooks
Scripts that run on the GitHub Enterprise server that you can use to implement quality checks.
primary email address
The main email address where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication.
private contributions
Contributions made to a private (vs. public) repository.
private repository
Private repositories are only visible to the repository owner and collaborators that the owner specified.
production branch
A branch with final changes that are ready to be used or deployed to an application or site.
profile
The page that shows information about a user's activity on GitHub.
profile photo
A custom image users upload to GitHub to identify their activity, usually along with their username. This is also referred to as an avatar.
project board
Boards within GitHub that are made up of issues, pull requests, and notes that are categorized as cards in columns.
protected branch
Protected branches block several features of Git on a branch that a repository administrator chooses to protect. They can't be force pushed, deleted, have changes merged without required checks passing or required reviews approved, or have files uploaded to it from the GitHub web interface. A protected branch is usually the default branch.
public contributions
Contributions made to a public (vs. private) repository.
public repository
A public repository can be viewed by anyone, including people who aren't GitHub users.
pull
Pull refers to when you are fetching in changes and merging them. For instance, if someone has edited the remote file you're both working on, you'll want to pull in those changes to your local copy so that it's up to date. See also fetch.
pull access
A synonym for read access.
pull request
Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository's collaborators. Like issues, pull requests each have their own discussion forum.
pull request review
Comments from collaborators on a pull request that approve the changes or request further changes before the pull request is merged.
pulse graph
A repository graph that gives you an overview of a repository's activity.
punch graph
A repository graph that shows the frequency of updates to a repository based on the day of week and time of day.
push
To push means to send your committed changes to a remote repository on GitHub.com. For instance, if you change something locally, you can push those changes so that others may access them.
push a branch
When you successfully push a branch to a remote repository, you update the remote branch with changes from your local branch. When you "push a branch", Git will search for the branch's HEAD ref in the remote repository and verify that it is a direct ancestor to the branch's local HEAD ref. Once verified, Git pulls all objects (reachable from the local HEAD ref and missing from the remote repository) into the remote object database and then updates the remote HEAD ref. If the remote HEAD is not an ancestor to the local HEAD, the push fails.
push access
A synonym for write access.
read access
A permission level on a repository that allows the user to pull, or read, information from the repository. All public repositories give read access to all GitHub users. A synonym for pull access.
README
A text file containing information about the files in a repository that is typically the first file a visitor to your repository will see. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you share expectations and manage contributions to your project.
rebase
To reapply a series of changes from a branch to a different base, and reset the HEAD of that branch to the result.
recovery code
A code that helps you regain access to your GitHub account.
release
GitHub's way of packaging and providing software to your users.
remote
This is the version of a repository or branch that is hosted on a server, most likely GitHub.com. Remote versions can be connected to local clones so that changes can be synced.
remote repository
A repository that is used to track the same project but resides somewhere else.
remote URL
The place where your code is stored: a repository on GitHub, another user's fork, or even a different server.
replica
A GitHub Enterprise instance that provides redundancy for the primary GitHub Enterprise instance.
repository
A repository is the most basic element of GitHub. They're easiest to imagine as a project's folder. A repository contains all of the project files (including documentation), and stores each file's revision history. Repositories can have multiple collaborators and can be either public or private.
repository cache
A read-only mirror of repositories for your GitHub Enterprise server instance, located near distributed teams and CI clients.
repository graph
A visual representation of your repository's data.
repository maintainer
Someone who manages a repository. This person may help triage issues and use labels and other features to manage the work of the repository. This person may also be responsible for keeping the README and contributing files updated.
required pull request review
Required reviews ensure that pull requests have at least one approved review before collaborators can make changes to a protected branch.
required status check
Checks on pull requests that ensure all required CI tests are passing before collaborators can make changes to a protected branch.
resolve
The action of fixing up manually what a failed automatic merge left behind.
revert
When you revert a pull request on GitHub, a new pull request is automatically opened, which has one commit that reverts the merge commit from the original merged pull request. In Git, you can revert commits with git revert.
review
Reviews allow others with access to your repository to comment on the changes proposed in pull requests, approve the changes, or request further changes before the pull request is merged.
root directory
The first directory in a hierarchy.
root filesystem
The base operating system and the GitHub Enterprise application environment.
saved reply
A comment you can save and add to your GitHub user account so that you can use it across GitHub in issues and pull requests.
scope
Named groups of permissions that an OAuth app or personal access token (classic) can request to access both public and non-public data.
seat
A user within a GitHub Enterprise organization. This may be referred to as "seat count."
secret team
A team that is only visible to the other people on the team and people with owner permissions.
security log
A log that lists the last 50 actions or those performed within the last 90 days.
server-to-server request
An API request used by an application that acts as a bot, independently of any particular user. For example, an application that runs on a scheduled basis and closes issues where there has been no activity for a long time. Applications that use this type of authentication don't use a licensed GitHub account so, in an enterprise with a billing plan that allows a certain number of licenses to be used, a server-to-server bot is not consuming one of your GitHub licenses. The token used in a server-to-server request is acquired programmatically, via the GitHub API. For more information, see Authenticating as a GitHub App installation. See also, user-to-server request.
service hook
Also called "webhook." Webhooks provide a way for notifications to be delivered to an external web server whenever certain actions occur on a repository or organization.
single sign-on
Also called SSO. Allows users to sign in to a single location - an identity provider (IdP) - that then gives the user access to other service providers.
snapshot
A checkpoint of a virtual machine at a point in time.
squash
To combine multiple commits into a single commit. Also a Git command.
SSH key
SSH keys are a way to identify yourself to an online server, using an encrypted message. It's as if your computer has its own unique password to another service. GitHub uses SSH keys to securely transfer information to your computer.
staging instance
A way to test modifications before they are applied to your actual GitHub Enterprise instance.
star
A bookmark or display of appreciation for a repository. Stars are a manual way to rank the popularity of projects.
status
A visual representation within a pull request that your commits meet the conditions set for the repository you're contributing to.
status checks
Status checks are external processes, such as continuous integration builds, which run for each commit you make in a repository. For more information, see About status checks.
subscription
A user or organization's GitHub plan.
team
A group of organization members that reflect your company or group's structure with cascading access permissions and mentions.
team maintainer
Organization members that have a subset of permissions available to organization owners to manage teams.
Team plan
An organization billing plan that gives you unlimited public and private repositories.
timeline
A series of events in a pull request or on a user profile.
topic branch
A regular Git branch that is used by a developer to identify a conceptual line of development. Since branches are very easy and inexpensive, it is often desirable to have several small branches that each contain very well defined concepts or small incremental yet related changes. Can also be called a feature branch.
topics
A way to explore repositories in a particular subject area, find projects to contribute to, and discover new solutions to a specific problem on GitHub.
traffic graph
A repository graph that shows a repository's traffic, including full clones (not fetches), visitors from the past 14 days, referring sites, and popular content.
transfer
To transfer a repository means to change the owner of a repository. The new owner will be able to immediately administer the repository's contents, issues, pull requests, releases, and settings.
upstream
When talking about a branch or a fork, the primary branch on the original repository is often referred to as the "upstream", since that is the main place that other changes will come in from. The branch/fork you are working on is then called the "downstream." Also called origin.
upstream branch
The default branch that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.<name>.remote and branch.<name>.merge. If the upstream branch of A is origin/B sometimes we say "A is tracking origin/B."
user
Users are people with personal GitHub accounts. Each user has a personal profile, and can own multiple repositories, public or private. They can create or be invited to join organizations or collaborate on another user's repository.
user-to-server request
An API request used by an application that performs a task on behalf of a particular user. Where a task is carried out with user-to-server authentication it's shown on GitHub as having been done by a user via an application. For example, you might choose to create an issue from within a third-party application, and the application would do this on your behalf on GitHub. The scope of tasks an application can perform using a user-to-server request is restricted by both the app's and the user's permissions and access. The token used in a user-to-server request is acquired via OAuth. For more information, see Authenticating with a GitHub App on behalf of a user. See also, server-to-server request.
username
A user's handle on GitHub.
visible team
A team that can be viewed and @mentioned by every organization member.
watch
You can watch a repository or issue to receive notifications when updates are made to an issue or pull request.
watching notifications
A notification about activity in a repository a user has subscribed to.
web notifications
Notifications displayed in the web interface on GitHub: https://github.com/notifications
webhooks
Webhooks allow you to build or set up GitHub Apps which subscribe to certain events on GitHub.com. Webhooks provide a way for notifications to be delivered to an external web server whenever certain actions occur on a repository or organization. Also called a service hook.
write access
A permission level on a repository that allows the user to push, or write, changes to the repository.

Further reading

The Official Git Glossary
Git documentation
Git command list\n\nmain\n\n\n\nGet started/Learn to code/Get started with GitGetting started with GitLearn the basics of Git by working through an example scenario.In this articlePrerequisitesLearning Git basics with GitHub DesktopDiving deeper into Git on the command lineReview and next stepsHave you ever wished you had a time machine for your code? Well, Git is exactly that, and so much more!
If you aren't familiar with Git, it's a version control system that helps you keep track of changes to your code. You can save a snapshot of your project at a particular point in time, then make experimental changes without risking your work, since you can always go back to your snapshot.
GitHub itself is a platform built around Git, letting you save your Git projects to the cloud and work on them with other developers.
While Git can be complicated, it's a powerful and necessary tool for any developer. This article will give you all the tools you need to use Git in your day-to-day workflow.
Prerequisites
To follow this tutorial, you need to install Visual Studio Code.
Learning Git basics with GitHub Desktop
For standard Git operations, we recommend GitHub Desktop, an app that lets you interact with Git visually instead of through written commands. In this section, we'll learn how to use GitHub Desktop to quickly perform the most common Git operations.
Setting up GitHub Desktop
If this is your first time using GitHub Desktop, you need to install it and connect your GitHub account.

Download GitHub Desktop.
Open GitHub Desktop, then click Sign in to GitHub.com and authorize GitHub Desktop to access your account.
Back in GitHub Desktop, click Finish. This will add your name and email from your GitHub account to Git.

Creating a local repository
Now, you can take your first steps into Git by creating a repository. Think of a repository as a project folder that tracks changes and stores history. First, we'll create a local repository:


In GitHub Desktop, click Create a New Repository on your Local Drive.


Name the repository learning-git.


Select Initialize this repository with a README to create a blank README.md file automatically.
Tip
 It's standard practice to include a README.md file, also known as a README, in your projects. READMEs typically contain information that helps others understand, set up, and run your project.



Click Create repository.


Creating a remote repository
The local repository you just created lives on your computer. Now, let's create a remote repository for the same project, which will be hosted on GitHub. Linking a remote repository makes it easier to collaborate on and back up your work.

In GitHub Desktop, click Publish repository.
In the pop up that appears, click Publish repository one more time.
To see your remote repository, click View on GitHub.

Setting up a space to make changes
Now that you've created a repository, let's talk about branches. Branches are essentially copies of your project where you can test changes without risking the stability of your existing work.
Repositories are automatically created with a main branch, which you can think of as the stable, primary version of your project. For example, in the repository for a website, the main branch corresponds to the site that visitors can see.
When you create a new branch, you're creating a safe space to work on a new feature without affecting the primary version. You and your collaborators can use different branches to work on multiple features at the same time.
Let's create a branch to work on changes in our repository:

In GitHub Desktop, select the  Current Branch dropdown menu, then click New Branch.
Name your new branch readme-updates, then click Create Branch.

Saving snapshots of your project
To save your progress to your branch, you make a commit. A commit is a snapshot you take of your project at a particular point in time. You've actually already made your first commit: when you initialized your project with a README, GitHub Desktop automatically created an initial commit to add the README.md file.
Whenever you complete a chunk of work that you want to save, you should make a commit. After you do, you can always go back to that point in time, no matter how many changes you make in the future.


In GitHub Desktop, click Open in Visual Studio Code.


In VS Code, paste the following text into README.md and save your changes:
MarkdownHello, World!

This is a demo project for learning how to use Git.
Hello, World!

This is a demo project for learning how to use Git.



Back in GitHub Desktop, you'll see the updates you just made to your README. In the bottom left, next to your GitHub profile picture, type "Update README" in the text box. This is called a commit message, and it helps you keep track of the changes you make in each commit.


To make your commit, click Commit to readme-updates.


Bringing your changes into your main branch
When you're happy with the changes you've made on a branch, you can publish your branch to the remote repository and create a pull request. Pull requests let you review a set of proposed changes, then merge them from one branch into another. In our case, we'll create a pull request that brings the changes we made in readme-updates into our original branch, main.


Click Publish branch to push the readme-updates branch with your changes to the remote repository.


To review your suggested changes, click Preview Pull Request.


Click Create Pull Request.


In the GitHub window that appears, change your pull request title to "Add a message to the README", then write a brief description of your changes in the comment box.


Click Create pull request.


To bring your changes into the main branch, at the bottom of the page, click Merge pull request.
Note
 When you're working on a project with other developers, it's standard practice for someone else to review your pull request before it's merged.



Near the bottom of the page, click Delete branch. Deleting branches that have been merged into main helps keep your repository clean and easy to navigate.


Preparing to make more changes
Congratulations on merging your first pull request! Now that you've successfully brought your changes into the main branch, there are a few steps you should take to get ready for your next round of changes:


In GitHub Desktop, if you aren't on the main branch, select the  Current Branch dropdown menu, then click main.
You should almost always switch back to the main branch before creating a new branch, since new branches are created as copies of the currently selected branch.


To check if any changes have been made to your remote main branch, click Fetch origin.


Finally, to update your local main branch with changes to the remote main branch, click Pull origin.


You now have all of the skills necessary for setting up and using Git on a project!
Diving deeper into Git on the command line
GitHub Desktop is designed to address your day-to-day Git needs. As you grow as a developer, you're likely to run into some unusual situations where you want more control over a Git operation, or you need to use more complex commands. In those instances, you'll need to switch to using written Git commands on the command line.
Setting up your command line
Before you start working with the command line, you need to set up a few tools.


In GitHub Desktop, press Ctrl+` to open your project on the command line.


If you're using Windows, install Git. For macOS and Linux, Git is installed by default.


Install the GitHub CLI, which lets you perform GitHub-related actions quickly from the command line.


To authenticate to GitHub from the GitHub CLI, run the following command:
Shellgh auth login
gh auth login

Choose to authenticate with GitHub.com, then follow the on-screen prompts.


Install GitHub Copilot in the CLI, a powerful extension for the GitHub CLI that helps you find and understand commands, by running the following command:
Shellgh extension install github/gh-copilot
gh extension install github/gh-copilot



Experimenting with complex commands
Now that you're set up, let's learn how to find and understand the commands you might need in the future. For example, let's say you saw someone online mention git blame, but you don't know what it does. Try asking Copilot to explain it with the following command:
Shellgh copilot explain "git blame"
gh copilot explain "git blame"

Copilot will tell us that git blame provides a detailed history of a file, showing the author and commit that last modified each line in the file. Try it yourself with the following command:
Shellgit blame README.md
git blame README.md

This is a great tool, but as you can imagine, the blame for a file can get really long. Let's say you're only interested in the most recent update to a specific line in a file. You can ask Copilot to build you the right command:
Shellgh copilot suggest "Show me the blame for line 1 of README.md"
gh copilot suggest "Show me the blame for line 1 of README.md"

When Copilot asks what kind of command you're looking for, use your arrow keys to choose git command, then press Enter. Copilot will then suggest the following command:
Shellgit blame -L 1,1 README.md
git blame -L 1,1 README.md

Use your arrow keys to choose Execute command, then press Enter. You'll see the author and commit that last modified line 1 of README.md.
Review and next steps
In this article, we covered the basics of Git with GitHub Desktop, learning important terms like:

Repository: A folder that saves all of the changes made to files in your project.
Commit: A snapshot of your project at a particular point in time.
Branch: A copy of your project where you can work on a set of changes.
Pull request: A request to merge changes from one branch into another.

We also talked about performing more complicated Git operations on the command line. We tried out gh copilot explain and gh copilot suggest to understand and find new commands and functionality.
Now, try applying what you've learned to your own work. Add Git to an existing project with GitHub Desktop by pressing Ctrl+O (Windows/Linux) or Command+O (Mac) and experience the benefits of version control yourself!\n\n\n\nGet started/Learn to code/Finding example codeFinding and understanding example codeImprove your coding skills by learning from example code on GitHub.In this articleHow can I learn from code on GitHub?Finding an example projectOrienting yourself within the projectNavigating the source codeUnderstanding the source codeNext stepsHow can I learn from code on GitHub?
Learning from projects on GitHub is a great way of learning new techniques and finding inspiration for your own projects.
However, with millions of publicly available repositories on GitHub, finding code that applies to your project can be overwhelming. Even after you find the perfect repository, it can be difficult to navigate the codebase to find useful examples.
Instead of trying to understand an entire project, a better approach is to pick a single feature or function and see how it works. We can use Copilot Chat and GitHub's search functionality to locate a feature and follow it through the codebase. This is a great way to learn as we can see how the feature works all the way from the backend to the frontend.
In this guide, you'll learn how to do both by following an example scenario: learning how to load and display data from files on a Jekyll website. Then, you can apply the tips and techniques to other projects and programming languages.
Finding an example project
The first step is to find the right project to learn from.
Use Copilot Chat to identify a repository
The fastest way to find a project with code that you can learn from is to ask Copilot Chat to find repositories that match your criteria.
Open Copilot Chat and start a general purpose chat. Then ask:

Can you find some popular repositories that use Jekyll to display data from files in the repository?

Copilot will return links to relevant repositories, and you can ask follow-up questions about the repositories.
Often, Copilot will end its response with a link to GitHub search with more results. Next, we'll review these results.
Using search to identify more options
If Copilot included a link to search results, follow the link. If not, form your own search query by following the steps below.

Navigate to Advanced search.
In the "Advanced options" section, use the "Written in this language" dropdown to select a programming language. For our Jekyll site, we'll select "HTML".
Optionally, under "Repositories options", next to "With this many stars", type >150. This will help you find popular repositories that are likely well maintained.
Back at the top of the page, click Search.

Tip

We can further narrow down your search results by adding topics and text to the search query. For example, topic:jekyll "blog" would return repositories the owner has classified as related to Jekyll and with the word "blog" in the repository name or description. For a list of popular topics, see Topics on GitHub.

Choosing a project
After reviewing the results from Copilot and search, we decide to use the github/choosealicense.com repository. This repository contains the source code for Choose a License, a Jekyll website that shares information about open source licenses.
We're particularly interested in the Licenses page, which displays popular open source licenses from data files. 
Orienting yourself within the project
Before we dig into the code for displaying data files, let's orient ourselves in the repository in general.
It can be difficult to know where to start when you first visit a repository. While each project will organize itself in its own individual way, there are common documentation methods that we can usually rely upon to get our bearings.
The README.md file
It's always a good idea to read the README.md file, which is the front page of a repository and is automatically rendered beneath the list of files. Different maintainers will include different information, but you can often find information about the project, how to build it on your local machine, and links to documentation.
In the github/choosealicense.com repository, the README.md file explains where the license files live (/_licenses), the attributes each license can have, and how to get the website running on your computer.
Using Copilot Chat
If the README.md file doesn't give you all the answers, you can ask Copilot to help you navigate the repository and locate functionality.
To open Copilot Chat, click the  GitHub Copilot icon next to the search bar and ask your question. For example:

What is the main landing page for this Jekyll website?

When you ask Copilot questions about a repository, it can return the relevant files, explain the part they play in the functionality, and include links.
The repository's wiki
Another possible source of information is the repository's wiki, a section of the repository specifically for hosting documentation. Every repository on GitHub comes equipped with the ability to use a wiki, but not every repository uses it. To access the wiki, click the  Wiki tab in the repository.
Releases
If the repository's source code builds into an executable file, some repository maintainers will use the repository's releases to publish binary files. You can download and run these binary files to examine how the application works while exploring the codebase, without needing to build the project yourself.
You can find a repository's releases in the sidebar, to the right of the list of files and README.md.
Internal documentation
You can also look for internal documentation in the repository's contents. This could be a single Markdown file or a directory full of Markdown files. Common names to look for include "docs", "documentation", "wiki", "resources", "help", and "manual".
Navigating the source code
Now that we understand the overall structure of the repository, it's time to use GitHub search to find to the specific functionality we're looking for.
When you're in a repository and click into the search field at the top of the page, GitHub will automatically add the repo search qualifier so your search results are constrained to the repository you're viewing.
To get started, we need something to search for. This could be a string of text unique to the feature we're examining, or we could look at the HTML source of the page and find a particular class or id attribute.
In our example, we'll search for the text at the top of the licenses page, using this query: repo:github/choosealicense "If you’re looking for a reference table?". This returns one result, a file named licenses.html.
Now we can click on the result and dig deeper! licenses.html is the source of the "Licences" page we were looking for. We can see the string that we searched for and that each of the licenses is included with the code below:
{% include license-overview.html license-id="agpl-3.0" %}

Understanding the source code
Now that we've found the specific code we're interested in, we can move on to understanding it.
Asking Copilot Chat about the code
You can use Copilot to learn more about a file or even specific lines of code. Copilot will combine information about the programming language with the context from the repository to answer your questions in great detail.
Let's ask Copilot to explain what's happening on line 11, with the {% include %} tag. Click the line number. Then, to the right of the line, click . In the chat window, ask:

What's happening in this line?

Copilot will explain that the line is including the license-overview.html file and passing along "agpl-3.0" as the license-id to display.
Tip

If you don't understand a response from Copilot Chat, you can always ask it to simplify the answer or expand on a particular part of it.

Reading comments
Comments are human readable annotations that you can use to understand the code and are not executed. They are usually delimited with characters such as // or /*.
There are a few types of comments to look for:

Line: Single-line comments that describe what a particular line is doing
Block: Multi-line comments that might describe what an entire function or file is doing
File: A block comment at the very beginning of a file, providing an overview of that particular part of the codebase

Looking up functions in programming language references
Every programming language will have a reference online, explaining every aspect of the language.
If you use a search engine to search for the programming language and the function, you should find a link to that function's reference page.
For our example, searching for jekyll include in a search engine should return the "Includes" documentation in the Jekyll documentation. If we read further into Jekyll's documentation, we can see that the licenses themselves are a collection in the _licenses directory.
Tip
 If you can't find a function in a programming language reference, it's likely that the function is defined in the codebase itself. Ask GitHub Copilot to locate it.

To summarize what we've learned: the licenses.html file includes /_includes/license-overview.html for each license shown. The /_includes/license-overview.html file matches the license-id provided to a license in the /_licenses collection and renders the details.
Experimenting with small changes
If you're able to run the project locally on your computer, a great way to learn is to make little changes to see what happens.
You can start by changing text, then move on to making bigger changes, such as experimenting with how functions and files interact with each other.
Try finding the license-overview.html file in the _includes directory, then making changes to how the license is displayed or experimenting with how the license is loaded from the collection.
You could change the metadata at the beginning of one of the license files, change which attributes are displayed in license-overview.html, or even try adding your own attribute. When you've made your change, you can test it by following the README.md instructions to view it in your browser.
Applying what we've learnt
The github/choosealicense.com repository is a great example of a large Jekyll project and demonstrates just how much is possible with Jekyll and GitHub Pages. Can you apply what you've learnt from the structure of the repository, how it uses collections, and the way it includes the license data to build your own project?
Next steps
Now that you understand how the example code works, you may want to reuse it in your own project. Code reuse is a powerful part of software development, but there are important steps to follow to do it correctly and legally. For a full tutorial, see Reusing other people's code in your projects.\n\n\n\nGet started/Learn to code/Reuse people's codeReusing other people's code in your projectsIncrease your coding efficiency and knowledge by integrating existing code into your projects.In this articleUsing other people's code snippets in your projectUsing code from libraries in your projectSharing your workFurther readingOne of the best things about open source software is the ability to reuse other people's code. Repurposing code helps you save time, discover new functionality, and learn other programming styles. There are two main ways to reuse code:

Copying and pasting a code snippet directly into your project. If you're new to coding, this is the quickest way to start reusing code.
Importing a library into your project. While this approach takes some time to learn, it's ultimately easier and more efficient. It's also a foundational skill for software development.

In this article, we'll learn both by working through an example: reusing Python code that calculates the factorial of a number.
Using other people's code snippets in your project
When you're first learning to code, you might start with reuse by copying and pasting other people's code snippets into your project. It's a great way to save time, but there are a few key steps you should always take before copying another developer's code.
1. Finding and understanding a code snippet
First, you need to find and understand the code snippet you want to reuse. For this example, we'll choose the new2code/python-factorial repository.
First, open factorial_finder.py, which implements the calculator using a loop:
# Initialize the factorial result to 1
factorial = 1

# Initialize the input number to 6
number = 6

# Loop from 1 to number (inclusive) and multiply factorial by each number
for i in range(1, number + 1):
    factorial *= i

print(f"The factorial of {number} is {factorial}")

Then, in the menu bar at the top of the file, click  to start a conversation with Copilot.

In the chat window, ask Copilot:
TextExplain this program.
Explain this program.

2. Understanding project licensing
Before you can reuse the code you've found, you need to understand its licensing. Licenses determine how you can use the code in a project, including your ability to copy, modify, and distribute that code.
To identify the license for new2code/python-factorial, locate the "About" section on the repository's main page. There, you'll see that the repository is licensed under the MIT license. To read the license, click  MIT license.

We want to copy the entire factorial_finder.py file, so the MIT license indicates that we should include a copy of the license in our own project. At the top of your Python file, paste the license as a comment.
Tip
 You can learn what's allowed by other common licenses with the Choose a license tool.

3. Using and modifying code snippets
Now, you're ready to paste the code snippet into your project. While you'll sometimes to be able to use code snippets as they are, you will often want to modify them for your specific use case. Let's practice that now!
Let's say we want to quickly calculate the factorials of 5, 7, 9, and 10. Instead of copying and pasting the entire program for each number, we can move our calculator into a function that takes a number as an argument.
Use Copilot Chat to suggest and explain an implementation. Paste our current code into the chat window, followed by this prompt:
TextWrap the Python code above in a function.
Wrap the Python code above in a function.

Copilot will generate code that looks something like this:
Pythondef calculate_factorial(number):
    # Initialize the factorial result to 1
    factorial = 1

    # Loop from 1 to number (inclusive) and multiply factorial by each number
    for i in range(1, number + 1):
        factorial *= i

    return factorial
def calculate_factorial(number):
    # Initialize the factorial result to 1
    factorial = 1

    # Loop from 1 to number (inclusive) and multiply factorial by each number
    for i in range(1, number + 1):
        factorial *= i

    return factorial

With our new function, we can easily find the factorials of our numbers by adding the following code to our project, then running the Python program:
Pythonprint(calculate_factorial(5))
print(calculate_factorial(7))
print(calculate_factorial(9))
print(calculate_factorial(10))
print(calculate_factorial(5))
print(calculate_factorial(7))
print(calculate_factorial(9))
print(calculate_factorial(10))

Congratulations! You've successfully found, understood, and modified an example code snippet.
Using code from libraries in your project
Now, let's learn how to use libraries, which is standard practice for developers. Libraries are essentially collections of code written by other developers to perform specific tasks. You can import libraries into your project to use the pre-written code, saving you time and effort.
In this section, we'll continue working with the Python factorial calculator example from the previous section. For reference, here's our current code:
Pythondef calculate_factorial(number):
    # Initialize the factorial result to 1
    factorial = 1

    # Loop from 1 to number (inclusive) and multiply factorial by each number
    for i in range(1, number + 1):
        factorial *= i

    return factorial

print(calculate_factorial(5))
print(calculate_factorial(7))
print(calculate_factorial(9))
print(calculate_factorial(10))
def calculate_factorial(number):
    # Initialize the factorial result to 1
    factorial = 1

    # Loop from 1 to number (inclusive) and multiply factorial by each number
    for i in range(1, number + 1):
        factorial *= i

    return factorial

print(calculate_factorial(5))
print(calculate_factorial(7))
print(calculate_factorial(9))
print(calculate_factorial(10))

1. Finding a library
Once you know what functionality you want to add to your project, you can search for a library with relevant code. Copilot Chat is an easy way to search for libraries, since you can use natural language to describe exactly what you're looking for.
Finding a factorial is a pretty common function, and there's a good chance someone included that function in an existing library. Open Copilot Chat, then ask:
TextIs there a Python library with a function for calculating a factorial?
Is there a Python library with a function for calculating a factorial?

Copilot will tell us a factorial function is included in the math module from the standard Python library.
2. Prioritizing security in your project
When you add a library or module to your project, you create what's called a dependency. Dependencies are pre-written code bundles that your project relies on to function correctly. If they aren't carefully written or maintained, they can introduce security vulnerabilities to your work.
Thankfully, there are some steps you can take to best protect your project. Let's practice them now.
Using popular libraries
Popular libraries are more likely to be secure, because they are actively maintained and used by many developers. One good marker of popularity is the number of stars a repository has. If you can't find the GitHub repository for a dependency, you can ask Copilot for help.
Open Copilot Chat, then ask:
TextFind the GitHub repository containing the code for the math module in Python.
Find the GitHub repository containing the code for the math module in Python.

Copilot will tell you that the math module is defined in python/cpython, which has over 64,000 stars.
Enabling Dependabot alerts for your project
When enabled, Dependabot alerts are automatically generated when Dependabot detects a security issue in your dependencies, helping you quickly fix vulnerabilities. Dependabot is available for free on all open source GitHub repositories.
Turn Dependabot alerts on for your repository now. Click the Security tab for your project's GitHub repository. Next to Dependabot alerts, click Enable Dependabot alerts. You can access Dependabot alerts from the Dependabot tab of the sidebar.

3. Implementing code from a library
Now you're ready to import the library into your project, then use its contents in your code. You can read the documentation for the library to learn how to do it yourself, or you can ask Copilot to suggest and explain an implementation for you.
Open Copilot Chat, then ask:
TextHow do I use the factorial function of the math module in my Python project?
How do I use the factorial function of the math module in my Python project?

Copilot will then suggest a version of the following code:
Pythonimport math

# Calculate the factorial of a number
number = 5
result = math.factorial(number)

print(f"The factorial of {number} is {result}")
import math

# Calculate the factorial of a number
number = 5
result = math.factorial(number)

print(f"The factorial of {number} is {result}")

After you replace the existing code in your project with the above implementation, you've successfully used code from a library in your example project!
Sharing your work
With this tutorial, you've learned how to safely reuse other people's code in your own work. To celebrate, share how you repurposed code and built on the example project in our community discussion.
Further reading

Finding and understanding example code\n\n\n\nGet started/Learn to code/Set up Copilot for learningSetting up Copilot for learning to codeConfigure Copilot to help you learn coding concepts and actively build your programming skills.In this articleCan Copilot help me learn to code?PrerequisitesStep 1: Disable code completionsStep 2: Add learning instructionsStep 3: Use Copilot Chat to learnCan Copilot help me learn to code?
Yes! Copilot can adapt to meet your changing needs throughout your coding journey. When you're an experienced developer, you'll use Copilot as a coding assistant. While you're learning to code, it's more beneficial as a supportive companion.
In this guide, you’ll learn how to set up Copilot to act as a tutor that will help you build a deep understanding of programming concepts, rather than relying on it to write your code for you. To optimize your learning, follow these steps for each repository you work on!
Prerequisites
This guide assumes that you'll use Copilot in VS Code. To get set up, see Set up Copilot in VS Code in the Visual Studio Code documentation.
Step 1: Disable code completions
First, let's disable code completions. This will give you the opportunity to deepen your understanding of programming concepts by writing more code yourself.


In VS Code, open your project.


Create a folder in the root directory called .vscode.


Inside .vscode, create a file called settings.json.


Add the following text to the file:
JSON{
    "github.copilot.enable": {
        "*": false
    }
}
{
    "github.copilot.enable": {
        "*": false
    }
}



Save the file. Copilot code completions are now disabled for this project in VS Code.


Step 2: Add learning instructions
Now, let's provide Copilot Chat with instructions to act like a tutor that supports your learning.


In the root folder of your project, create a file called copilot-instructions.md.


Add the following text, or customize it for your personal learning goals:
MarkdownI am learning to code. You are to act as a tutor; assume I am a beginning coder. Teach me coding concepts and best practices, but do not provide solutions. Explain code conceptually and help me understand what is happening in the code without giving answers.

Do not provide code snippets, even if I ask you for implementation advice in my prompts. Teach me all the basic coding concepts in your answers. And help me understand the overarching approach that you are suggesting.

Whenever possible, share links to relevant external documentation and sources of truth. 

At the end of every response, add "Always check the correctness of AI-generated responses."
I am learning to code. You are to act as a tutor; assume I am a beginning coder. Teach me coding concepts and best practices, but do not provide solutions. Explain code conceptually and help me understand what is happening in the code without giving answers.

Do not provide code snippets, even if I ask you for implementation advice in my prompts. Teach me all the basic coding concepts in your answers. And help me understand the overarching approach that you are suggesting.

Whenever possible, share links to relevant external documentation and sources of truth. 

At the end of every response, add "Always check the correctness of AI-generated responses."



Save the file. Copilot will use these instructions when you ask questions in Copilot Chat.


Step 3: Use Copilot Chat to learn
You're ready to start building real coding skills with Copilot's help!
Throughout your work on the project, engage in a long-running conversation with Copilot Chat. Treat it as your personal tutor, asking questions as they arise and using it to navigate challenges or clarify concepts.

Open Copilot Chat in VS Code 

Copilot Chat is especially helpful for debugging your code. For step-by-step guidance, see Learning to debug with GitHub Copilot.\n\n\n\nGet started/Learn to code/Debug with CopilotLearning to debug with GitHub CopilotIdentify and fix errors in your code by asking GitHub Copilot for help.In this articlePrerequisitesLearning to debug through examplesDebugging your own projectNext stepsFinding and fixing bugs in code can be frustrating, especially when you're a new developer. Thankfully, tools like GitHub Copilot can quickly identify and squash bugs, letting you focus on more creative, interesting work.
Prerequisites
The examples in this article assume you're using GitHub Copilot to debug a Python project in Visual Studio Code (VS Code). To follow the examples, you need to:

Complete Set up Visual Studio Code with Copilot in the Visual Studio Code documentation.
Download Python.
Install the Python extension for Visual Studio Code.

Learning to debug through examples
There are two main situations you'll encounter when you try to run bugged code:

Your code exits before it finishes running, and you receive an error message.
Your code runs without errors, but the output is different from what you expected.

Thankfully, Copilot can help debug your code in both situations. To learn how, work through the following examples.
Debugging an error with GitHub Copilot
When you run bugged code, you'll often receive an error message. The message tells you the file and line where the error occurred and briefly describes what went wrong. However, error messages can be confusing. To fully understand and fix the bug, we can ask Copilot for help.
Let's try this out with an example repository: new2code/debug-with-copilot.
Cloning the example repository
First, we need to create a local copy of the repository:

Start cloning the new2code/debug-with-copilot repository in VS Code. 
Choose a location to save the repository on your computer, then click Select as Repository Destination.
When prompted, open the repository.

Running the bugged file
Now, let's run the bugged_dice_battle.py file. This program simulates a dice battle between two players.


In VS Code, open and review the bugged_dice_battle.py file.


Open the Command Palette by pressing Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).


Type Terminal: Create New Terminal and press Enter.


In the terminal tab, paste the following command.
Windows:
Shellpy bugged_dice_battle.py
py bugged_dice_battle.py

Mac or Linux:
Shellpython bugged_dice_battle.py
python bugged_dice_battle.py



Press Enter to run the program.


Unfortunately, we get some error text in our terminal ending with the following message:

TypeError: can only concatenate str (not "int") to str

Debugging the file
To understand what this error means, press Ctrl+Alt+I (Windows/Linux) or Command+Shift+I (Mac) to open Copilot Chat, then paste and send the following prompt:
TextExplain in depth why my code produces the following error and how I can fix it:

TypeError: can only concatenate str (not "int") to str
Explain in depth why my code produces the following error and how I can fix it:

TypeError: can only concatenate str (not "int") to str

Copilot will respond that the error occurs because we are trying to concatenate the integers die_1 and die_2 to strings, and you can only concatenate strings to strings.
It will also provide an updated version of our code that fixes the bug by using the str() function to convert the integers to strings before concatenating them. Practice the final step of debugging by applying Copilot's suggestion to the file.
Debugging an incorrect output with GitHub Copilot
Sometimes, bugged code runs without throwing any errors, but the output is clearly incorrect. In this case, debugging can be more difficult because VS Code can't tell you the location or description of the bug.
For these "invisible" bugs, Copilot is particularly useful. Let's get some hands-on experience with the other file in our example repository: bugged_factorial_finder.py. It's a Python program that's supposed to calculate a factorial.
Running the bugged file
First, let's run the program to see the incorrect output:


Open and review the bugged_factorial_finder.py file.


In the terminal you created earlier, paste the following command.
Windows:
Shellpy bugged_factorial_finder.py
py bugged_factorial_finder.py

Mac or Linux:
Shellpython bugged_factorial_finder.py
python bugged_factorial_finder.py



Press Enter to run the program.


Unfortunately, the code isn't working as expected. We want it to return 720, the correct value of 6 factorial, but the output is much higher than that.
Debugging the file
To understand what went wrong, open Copilot Chat and send the following prompt:
TextWhy is the output of this code so much higher than expected? Please explain in depth and suggest a solution.
Why is the output of this code so much higher than expected? Please explain in depth and suggest a solution.

Copilot will point out that, because we're using the *= operator, we're actually multiplying factorial by both i and factorial. In other words, we're multiplying by an extra factorial for each iteration of the loop.
To fix this error, Copilot will suggest code that removes the extra factorial from the equation, or that changes the *= operator to =. Make that change now!
Debugging your own project
Now that you've practiced debugging some simple programs with Copilot, you can use the same methodologies to find and fix bugs hiding in your own work.
For example, to debug an error message generated by your code, send Copilot the following prompt:
TextExplain in depth why my code produces the following error and how I can fix it:

YOUR-ERROR-MESSAGE
Explain in depth why my code produces the following error and how I can fix it:

YOUR-ERROR-MESSAGE

Otherwise, if you're debugging an incorrect output, ask Copilot why the output is incorrect and how you can fix it. For the best results, provide as much context as possible on how the output differs from your expectations.
With these tactics, you're well equipped to start squashing bugs in your project!
Next steps
As you continue coding, you'll likely encounter specific problem scenarios and errors that are difficult to debug. For a list of potential issues and example Copilot Chat prompts to fix them, see Debugging errors.\n\n\n\n