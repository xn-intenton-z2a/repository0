npm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
/npm-check-updates//npm-check-updates/Package SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
/npm-check-updates//npm-check-updates/Package SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
Dependencies (0)Dev Dependencies (84)@trivago/prettier-plugin-sort-imports@types/bun@types/chai@types/chai-as-promised@types/chai-string@types/cli-table@types/hosted-git-info@types/ini@types/js-yaml@types/jsonlines@types/lodash@types/mocha@types/node@types/npm-registry-fetch@types/parse-github-url@types/picomatch@types/progress@types/prompts@types/semver@types/semver-utils@types/sinon@types/update-notifier@typescript-eslint/eslint-plugin@typescript-eslint/parsercamelcasechaichai-as-promisedchai-stringchalkcli-table3commandercross-envdequaleslinteslint-config-prettiereslint-config-raineeslint-config-standardeslint-plugin-importeslint-plugin-jsdoceslint-plugin-neslint-plugin-promisefast-globfast-memoizefind-upfp-and-orhosted-git-infoinijs-yamljsonc-parserjsonlineslockfile-lintlodashmarkdownlint-climochanpm-registry-fetchnpm-run-allp-mapparse-github-urlpicomatchprettierprogressprompts-ncurc-config-loaderrfdcrimrafrollup-plugin-node-externalssemversemver-utilsshouldsinonsource-map-supportspawn-pleasestrip-ansits-nodetypescripttypescript-json-schemauntildifyupdate-notifierverdacciovitevite-bundle-analyzervite-nodevite-plugin-dtsyarnPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
Dependencies (0)Dev Dependencies (84)@trivago/prettier-plugin-sort-imports@types/bun@types/chai@types/chai-as-promised@types/chai-string@types/cli-table@types/hosted-git-info@types/ini@types/js-yaml@types/jsonlines@types/lodash@types/mocha@types/node@types/npm-registry-fetch@types/parse-github-url@types/picomatch@types/progress@types/prompts@types/semver@types/semver-utils@types/sinon@types/update-notifier@typescript-eslint/eslint-plugin@typescript-eslint/parsercamelcasechaichai-as-promisedchai-stringchalkcli-table3commandercross-envdequaleslinteslint-config-prettiereslint-config-raineeslint-config-standardeslint-plugin-importeslint-plugin-jsdoceslint-plugin-neslint-plugin-promisefast-globfast-memoizefind-upfp-and-orhosted-git-infoinijs-yamljsonc-parserjsonlineslockfile-lintlodashmarkdownlint-climochanpm-registry-fetchnpm-run-allp-mapparse-github-urlpicomatchprettierprogressprompts-ncurc-config-loaderrfdcrimrafrollup-plugin-node-externalssemversemver-utilsshouldsinonsource-map-supportspawn-pleasestrip-ansits-nodetypescripttypescript-json-schemauntildifyupdate-notifierverdacciovitevite-bundle-analyzervite-nodevite-plugin-dtsyarnPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
Dependents (608)aiot-vue-cli@releai/cliibag@pkb/cli@plurid/joiner@entaltsev.sn/ckeditor5-build-classicunravelau_webpackstackedboost-shopify-assets@implementit/build-toolsvv-telegramvmst-driver@plurid/joiner@melnikov-s/tslspsoufe-cli@build-script/buildercommerce.js@ucop-acme/aws-infra@elliemae/pui-cli@universelabs/meta@idlebox/build-scriptupdate-packagesace-ui-componentsxemblerbrian.clinode-js-009-appnode-js-007-appnode-js-wrapper-apprajat-package-nodejsrshetty-package-noderajatshetty007-sample-nodefastify-scaffoldwoocommerce-api@ishikawa_masashi/cassowarynew-project-cliopen-project-cliwebchannel.devhexo-cake-live2d@delucis/createtheresa-ui@chersquwn/easyappsmart-contracts@uofu/components@dnxbf321/up-to-date@snoutyfriend/storybook@quasimatic/glancerenault-css-libraryhexo-helper-live2dmino-clithree-vignette-background-updated@rollup-umd/ncuand more...Package SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
Dependents (608)aiot-vue-cli@releai/cliibag@pkb/cli@plurid/joiner@entaltsev.sn/ckeditor5-build-classicunravelau_webpackstackedboost-shopify-assets@implementit/build-toolsvv-telegramvmst-driver@plurid/joiner@melnikov-s/tslspsoufe-cli@build-script/buildercommerce.js@ucop-acme/aws-infra@elliemae/pui-cli@universelabs/meta@idlebox/build-scriptupdate-packagesace-ui-componentsxemblerbrian.clinode-js-009-appnode-js-007-appnode-js-wrapper-apprajat-package-nodejsrshetty-package-noderajatshetty007-sample-nodefastify-scaffoldwoocommerce-api@ishikawa_masashi/cassowarynew-project-cliopen-project-cliwebchannel.devhexo-cake-live2d@delucis/createtheresa-ui@chersquwn/easyappsmart-contracts@uofu/components@dnxbf321/up-to-date@snoutyfriend/storybook@quasimatic/glancerenault-css-libraryhexo-helper-live2dmino-clithree-vignette-background-updated@rollup-umd/ncuand more...Package SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag18.0.124,566latest17.1.4-05nextVersion HistoryVersionDownloads (Last 7 Days)Published18.0.124,5662 days ago18.0.046,6795 days ago17.1.1873,76917 days ago17.1.1730617 days ago17.1.1626,534a month ago17.1.1523,0042 months ago17.1.1422,1423 months ago17.1.135,2204 months ago17.1.121,3864 months ago17.1.118,0105 months ago17.1.103,1306 months ago17.1.91,2646 months ago17.1.81606 months ago17.1.786 months ago17.1.63046 months ago17.1.57196 months ago17.1.41,4386 months ago17.1.4-057 months ago17.1.33,1787 months ago17.1.28157 months ago17.1.12,3558 months ago17.1.09368 months ago17.0.61,2459 months ago17.0.5659 months ago17.0.469 months ago17.0.32,3399 months ago17.0.21279 months ago17.0.1579 months ago17.0.05379 months ago17.0.0-869 months ago17.0.0-759 months ago17.0.0-659 months ago16.14.2086,753a year ago16.14.20-06a year ago16.14.198a year ago17.0.0-57a year ago17.0.0-46a year ago17.0.0-35a year ago16.14.185,700a year ago17.0.0-25a year ago16.14.17704a year ago17.0.0-16a year ago16.14.16158a year ago17.0.0-06a year ago16.14.154,279a year ago16.14.141,641a year ago16.14.1326a year ago16.14.1211,998a year ago16.14.111,670a year ago16.14.107a year ago16.14.96a year ago16.14.86a year ago16.14.77a year ago16.14.66,0292 years ago16.14.51,2322 years ago16.14.41,3462 years ago16.14.3352 years ago16.14.21112 years ago16.14.1102 years ago16.14.0672 years ago16.13.472 years ago16.13.34172 years ago16.13.26522 years ago16.13.11372 years ago16.13.0102 years ago16.12.31172 years ago16.12.22792 years ago16.12.162 years ago16.12.0162 years ago16.11.2352 years ago16.11.12012 years ago16.11.0252 years ago16.10.19462 years ago16.10.186272 years ago16.10.173,3892 years ago16.10.164762 years ago16.10.152,7142 years ago16.10.1482 years ago16.10.134042 years ago16.10.123,0392 years ago16.10.11312 years ago16.10.10262 years ago16.10.97,8152 years ago16.10.84472 years ago16.10.71632 years ago16.10.662 years ago16.10.582 years ago16.10.462 years ago16.10.392 years ago16.10.2212 years ago16.10.11512 years ago16.10.0142 years ago16.9.02872 years ago16.8.2102 years ago16.8.1982 years ago16.8.01,0862 years ago16.7.131642 years ago16.7.122132 years ago16.7.1162 years ago16.7.102222 years ago16.7.91172 years ago16.7.862 years ago16.7.762 years ago16.7.682 years ago16.7.53332 years ago16.7.41,2432 years ago16.7.362 years ago16.7.272 years ago16.7.162 years ago16.7.062 years ago16.6.51172 years ago16.6.4382 years ago16.6.31952 years ago16.6.21,3362 years ago16.6.162 years ago16.6.02972 years ago16.5.6172 years ago16.5.5162 years ago16.5.462 years ago16.5.362 years ago16.5.272 years ago16.5.1322 years ago16.5.0102 years ago16.4.31132 years ago16.4.282 years ago16.4.13012 years ago16.4.082 years ago16.3.257972 years ago16.3.2462 years ago16.3.2362 years ago16.3.2272 years ago16.3.2162 years ago16.3.2072 years ago16.3.19222 years ago16.3.185,6262 years ago16.3.1762 years ago16.3.163322 years ago16.3.15493 years ago16.3.145813 years ago16.3.132193 years ago16.3.122323 years ago16.3.111463 years ago16.3.1073 years ago16.3.9103 years ago16.3.84993 years ago16.3.7113 years ago16.3.663 years ago16.3.563 years ago16.3.4133 years ago16.3.31343 years ago16.3.2593 years ago16.3.173 years ago16.3.0143 years ago16.2.11643 years ago16.2.073 years ago16.2.0-0113 years ago16.1.3603 years ago16.1.2303 years ago16.1.163 years ago16.1.06203 years ago16.0.65233 years ago16.0.51,1093 years ago16.0.4143 years ago16.0.3193 years ago16.0.263 years ago16.0.1333 years ago16.0.01333 years ago15.3.41,2983 years ago15.3.383 years ago15.3.253 years ago15.3.163 years ago15.3.0283 years ago15.2.6373 years ago15.2.563 years ago15.2.463 years ago15.2.373 years ago15.2.263 years ago15.2.1583 years ago15.2.063 years ago15.1.073 years ago15.0.5113 years ago15.0.463 years ago15.0.373 years ago15.0.2163 years ago15.0.173 years ago15.0.0173 years ago14.1.11,5353 years ago14.1.053 years ago14.0.2243 years ago14.0.11,2403 years ago14.0.063 years ago13.1.56203 years ago13.1.463 years ago13.1.393 years ago13.1.2123 years ago13.1.1193 years ago13.1.073 years ago13.0.4103 years ago13.0.3253 years ago13.0.293 years ago13.0.1103 years ago13.0.0103 years ago12.5.122,9883 years ago12.5.113003 years ago12.5.10103 years ago12.5.91783 years ago12.5.82253 years ago12.5.72853 years ago12.5.673 years ago12.5.5283 years ago12.5.43993 years ago12.5.33,0263 years ago12.5.21423 years ago12.5.173 years ago12.5.01563 years ago12.4.01043 years ago12.3.183 years ago12.3.0383 years ago12.2.2-153 years ago12.2.2-063 years ago12.2.1763 years ago12.2.083 years ago12.1.1-063 years ago12.1.01,2073 years ago12.1.0-163 years ago12.1.0-063 years ago12.0.51263 years ago12.0.5-173 years ago12.0.5-063 years ago12.0.4-063 years ago12.0.3723 years ago12.0.22953 years ago12.0.1113 years ago12.0.0413 years ago11.8.54,8574 years ago11.8.484 years ago11.8.39574 years ago11.8.22414 years ago11.8.1174 years ago11.8.074 years ago11.7.13774 years ago11.7.0204 years ago11.6.03814 years ago12.0.0-074 years ago11.5.132194 years ago11.5.12134 years ago11.5.11254 years ago11.5.101,7844 years ago11.5.994 years ago11.5.864 years ago11.5.7154 years ago11.5.674 years ago11.5.574 years ago11.5.484 years ago11.5.374 years ago11.5.274 years ago11.5.1234 years ago11.5.074 years ago11.4.1304 years ago11.4.064 years ago11.3.03184 years ago11.2.384 years ago11.2.2124 years ago11.2.164 years ago11.2.0174 years ago11.1.11214 years ago11.1.10404 years ago11.1.92,2374 years ago11.1.8744 years ago11.1.764 years ago11.1.674 years ago11.1.564 years ago11.1.46574 years ago11.1.3284 years ago11.1.264 years ago11.1.18344 years ago11.1.084 years ago11.0.21,8324 years ago11.0.174 years ago11.0.064 years ago10.3.16224 years ago10.3.064 years ago10.2.53244 years ago10.2.464 years ago10.2.3784 years ago10.2.26264 years ago10.2.1204 years ago10.2.064 years ago10.1.1104 years ago10.1.074 years ago10.0.0274 years ago9.2.41,7714 years ago9.2.3164 years ago9.2.3-alpha.065 years ago9.2.26125 years ago9.2.165 years ago9.2.075 years ago9.1.2375 years ago9.1.165 years ago9.1.0475 years ago9.0.4255 years ago9.0.3495 years ago9.0.2945 years ago9.0.1275 years ago9.0.0715 years ago8.1.14225 years ago8.1.065 years ago8.0.575 years ago8.0.465 years ago8.0.385 years ago8.0.2125 years ago8.0.1135 years ago8.0.085 years ago7.1.17205 years ago8.0.0-alpha.185 years ago7.1.0235 years ago7.0.5-alpha.185 years ago7.0.4345 years ago7.0.4-alpha.265 years ago7.0.4-alpha.165 years ago7.0.3445 years ago7.0.3-alpha.155 years ago7.0.2905 years ago7.0.12915 years ago7.0.065 years ago6.0.19285 years ago6.0.0905 years ago5.0.0555 years ago5.0.0-alpha.265 years ago5.0.0-alpha.175 years ago4.1.22,8215 years ago4.1.1255 years ago4.1.0585 years ago4.0.675 years ago4.0.5115 years ago4.0.4605 years ago4.0.33505 years ago4.0.2175 years ago4.0.2-alpha.165 years ago4.0.11,2375 years ago4.0.085 years ago3.2.29465 years ago3.2.1125 years ago3.2.0165 years ago3.1.263865 years ago3.1.252066 years ago3.1.24806 years ago3.1.231796 years ago3.1.2266 years ago3.1.211016 years ago3.1.202,8086 years ago3.1.1966 years ago3.1.18116 years ago3.1.1776 years ago3.1.1676 years ago3.1.1576 years ago3.1.1476 years ago3.1.13106 years ago3.1.12166 years ago3.1.11246 years ago3.1.10276 years ago3.1.9536 years ago3.1.896 years ago3.1.7426 years ago3.1.686 years ago3.1.556 years ago3.1.4116 years ago3.1.3136 years ago3.1.266 years ago3.1.1156 years ago3.1.0136 years ago3.0.1266 years ago3.0.1166 years ago3.0.1066 years ago3.0.966 years ago3.0.866 years ago3.0.756 years ago3.0.666 years ago3.0.576 years ago3.0.476 years ago3.0.376 years ago3.0.2116 years ago3.0.196 years ago3.0.0506 years ago2.15.03,9836 years ago2.14.3206 years ago2.14.21527 years ago3.0.0-alpha.3117 years ago2.14.1107 years ago3.0.0-alpha287 years ago3.0.0-alpha187 years ago2.14.01297 years ago2.13.01328 years ago2.12.12008 years ago2.12.088 years ago2.11.3558 years ago2.11.2108 years ago2.11.198 years ago2.11.088 years ago2.10.598 years ago2.10.4258 years ago2.10.3168 years ago2.10.288 years ago2.10.198 years ago2.10.098 years ago2.8.1078 years ago2.8.9118 years ago2.8.888 years ago2.8.788 years ago2.8.689 years ago2.8.579 years ago2.8.469 years ago2.8.379 years ago2.8.279 years ago2.8.169 years ago2.8.079 years ago2.7.269 years ago2.7.159 years ago2.7.079 years ago2.6.899 years ago2.6.7109 years ago2.6.659 years ago2.6.5169 years ago2.6.469 years ago2.6.3109 years ago2.6.279 years ago2.6.169 years ago2.6.089 years ago2.5.889 years ago2.5.799 years ago2.5.699 years ago2.5.579 years ago2.5.4-spawnglobal69 years ago2.5.43249 years ago2.5.3-spawnglobal79 years ago2.5.379 years ago2.5.279 years ago2.5.179 years ago2.5.079 years ago2.4.289 years ago2.4.169 years ago2.4.079 years ago2.3.4510 years ago2.3.3810 years ago2.3.2910 years ago2.3.1810 years ago2.3.0710 years ago2.2.4710 years ago2.2.3810 years ago2.2.2810 years ago2.2.1710 years ago2.2.0810 years ago2.1.3710 years ago2.1.2710 years ago2.1.1610 years ago2.1.0710 years ago2.0.4710 years ago2.0.3810 years ago2.0.2710 years ago2.0.1610 years ago2.0.0610 years ago2.0.0-alpha.17810 years ago2.0.0-alpha.16710 years ago2.0.0-alpha.15610 years ago2.0.0-alpha.14610 years ago2.0.0-alpha.13610 years ago2.0.0-alpha.12710 years ago2.0.0-alpha.11610 years ago2.0.0-alpha.10610 years ago2.0.0-alpha.91010 years ago2.0.0-alpha.8510 years ago2.0.0-alpha.7710 years ago2.0.0-alpha6710 years ago2.0.0-alpha5610 years ago2.0.0-alpha4610 years ago2.0.0-alpha3610 years ago2.0.0-alpha2610 years ago2.0.0-alpha1810 years ago1.5.14410 years ago1.5.0610 years ago1.3.0610 years ago1.2.0611 years ago1.1.1612 years ago1.1.0812 years ago1.0.1712 years ago1.0.0712 years agoPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag18.0.124,566latest17.1.4-05nextVersion HistoryVersionDownloads (Last 7 Days)Published18.0.124,5662 days ago18.0.046,6795 days ago17.1.1873,76917 days ago17.1.1730617 days ago17.1.1626,534a month ago17.1.1523,0042 months ago17.1.1422,1423 months ago17.1.135,2204 months ago17.1.121,3864 months ago17.1.118,0105 months ago17.1.103,1306 months ago17.1.91,2646 months ago17.1.81606 months ago17.1.786 months ago17.1.63046 months ago17.1.57196 months ago17.1.41,4386 months ago17.1.4-057 months ago17.1.33,1787 months ago17.1.28157 months ago17.1.12,3558 months ago17.1.09368 months ago17.0.61,2459 months ago17.0.5659 months ago17.0.469 months ago17.0.32,3399 months ago17.0.21279 months ago17.0.1579 months ago17.0.05379 months ago17.0.0-869 months ago17.0.0-759 months ago17.0.0-659 months ago16.14.2086,753a year ago16.14.20-06a year ago16.14.198a year ago17.0.0-57a year ago17.0.0-46a year ago17.0.0-35a year ago16.14.185,700a year ago17.0.0-25a year ago16.14.17704a year ago17.0.0-16a year ago16.14.16158a year ago17.0.0-06a year ago16.14.154,279a year ago16.14.141,641a year ago16.14.1326a year ago16.14.1211,998a year ago16.14.111,670a year ago16.14.107a year ago16.14.96a year ago16.14.86a year ago16.14.77a year ago16.14.66,0292 years ago16.14.51,2322 years ago16.14.41,3462 years ago16.14.3352 years ago16.14.21112 years ago16.14.1102 years ago16.14.0672 years ago16.13.472 years ago16.13.34172 years ago16.13.26522 years ago16.13.11372 years ago16.13.0102 years ago16.12.31172 years ago16.12.22792 years ago16.12.162 years ago16.12.0162 years ago16.11.2352 years ago16.11.12012 years ago16.11.0252 years ago16.10.19462 years ago16.10.186272 years ago16.10.173,3892 years ago16.10.164762 years ago16.10.152,7142 years ago16.10.1482 years ago16.10.134042 years ago16.10.123,0392 years ago16.10.11312 years ago16.10.10262 years ago16.10.97,8152 years ago16.10.84472 years ago16.10.71632 years ago16.10.662 years ago16.10.582 years ago16.10.462 years ago16.10.392 years ago16.10.2212 years ago16.10.11512 years ago16.10.0142 years ago16.9.02872 years ago16.8.2102 years ago16.8.1982 years ago16.8.01,0862 years ago16.7.131642 years ago16.7.122132 years ago16.7.1162 years ago16.7.102222 years ago16.7.91172 years ago16.7.862 years ago16.7.762 years ago16.7.682 years ago16.7.53332 years ago16.7.41,2432 years ago16.7.362 years ago16.7.272 years ago16.7.162 years ago16.7.062 years ago16.6.51172 years ago16.6.4382 years ago16.6.31952 years ago16.6.21,3362 years ago16.6.162 years ago16.6.02972 years ago16.5.6172 years ago16.5.5162 years ago16.5.462 years ago16.5.362 years ago16.5.272 years ago16.5.1322 years ago16.5.0102 years ago16.4.31132 years ago16.4.282 years ago16.4.13012 years ago16.4.082 years ago16.3.257972 years ago16.3.2462 years ago16.3.2362 years ago16.3.2272 years ago16.3.2162 years ago16.3.2072 years ago16.3.19222 years ago16.3.185,6262 years ago16.3.1762 years ago16.3.163322 years ago16.3.15493 years ago16.3.145813 years ago16.3.132193 years ago16.3.122323 years ago16.3.111463 years ago16.3.1073 years ago16.3.9103 years ago16.3.84993 years ago16.3.7113 years ago16.3.663 years ago16.3.563 years ago16.3.4133 years ago16.3.31343 years ago16.3.2593 years ago16.3.173 years ago16.3.0143 years ago16.2.11643 years ago16.2.073 years ago16.2.0-0113 years ago16.1.3603 years ago16.1.2303 years ago16.1.163 years ago16.1.06203 years ago16.0.65233 years ago16.0.51,1093 years ago16.0.4143 years ago16.0.3193 years ago16.0.263 years ago16.0.1333 years ago16.0.01333 years ago15.3.41,2983 years ago15.3.383 years ago15.3.253 years ago15.3.163 years ago15.3.0283 years ago15.2.6373 years ago15.2.563 years ago15.2.463 years ago15.2.373 years ago15.2.263 years ago15.2.1583 years ago15.2.063 years ago15.1.073 years ago15.0.5113 years ago15.0.463 years ago15.0.373 years ago15.0.2163 years ago15.0.173 years ago15.0.0173 years ago14.1.11,5353 years ago14.1.053 years ago14.0.2243 years ago14.0.11,2403 years ago14.0.063 years ago13.1.56203 years ago13.1.463 years ago13.1.393 years ago13.1.2123 years ago13.1.1193 years ago13.1.073 years ago13.0.4103 years ago13.0.3253 years ago13.0.293 years ago13.0.1103 years ago13.0.0103 years ago12.5.122,9883 years ago12.5.113003 years ago12.5.10103 years ago12.5.91783 years ago12.5.82253 years ago12.5.72853 years ago12.5.673 years ago12.5.5283 years ago12.5.43993 years ago12.5.33,0263 years ago12.5.21423 years ago12.5.173 years ago12.5.01563 years ago12.4.01043 years ago12.3.183 years ago12.3.0383 years ago12.2.2-153 years ago12.2.2-063 years ago12.2.1763 years ago12.2.083 years ago12.1.1-063 years ago12.1.01,2073 years ago12.1.0-163 years ago12.1.0-063 years ago12.0.51263 years ago12.0.5-173 years ago12.0.5-063 years ago12.0.4-063 years ago12.0.3723 years ago12.0.22953 years ago12.0.1113 years ago12.0.0413 years ago11.8.54,8574 years ago11.8.484 years ago11.8.39574 years ago11.8.22414 years ago11.8.1174 years ago11.8.074 years ago11.7.13774 years ago11.7.0204 years ago11.6.03814 years ago12.0.0-074 years ago11.5.132194 years ago11.5.12134 years ago11.5.11254 years ago11.5.101,7844 years ago11.5.994 years ago11.5.864 years ago11.5.7154 years ago11.5.674 years ago11.5.574 years ago11.5.484 years ago11.5.374 years ago11.5.274 years ago11.5.1234 years ago11.5.074 years ago11.4.1304 years ago11.4.064 years ago11.3.03184 years ago11.2.384 years ago11.2.2124 years ago11.2.164 years ago11.2.0174 years ago11.1.11214 years ago11.1.10404 years ago11.1.92,2374 years ago11.1.8744 years ago11.1.764 years ago11.1.674 years ago11.1.564 years ago11.1.46574 years ago11.1.3284 years ago11.1.264 years ago11.1.18344 years ago11.1.084 years ago11.0.21,8324 years ago11.0.174 years ago11.0.064 years ago10.3.16224 years ago10.3.064 years ago10.2.53244 years ago10.2.464 years ago10.2.3784 years ago10.2.26264 years ago10.2.1204 years ago10.2.064 years ago10.1.1104 years ago10.1.074 years ago10.0.0274 years ago9.2.41,7714 years ago9.2.3164 years ago9.2.3-alpha.065 years ago9.2.26125 years ago9.2.165 years ago9.2.075 years ago9.1.2375 years ago9.1.165 years ago9.1.0475 years ago9.0.4255 years ago9.0.3495 years ago9.0.2945 years ago9.0.1275 years ago9.0.0715 years ago8.1.14225 years ago8.1.065 years ago8.0.575 years ago8.0.465 years ago8.0.385 years ago8.0.2125 years ago8.0.1135 years ago8.0.085 years ago7.1.17205 years ago8.0.0-alpha.185 years ago7.1.0235 years ago7.0.5-alpha.185 years ago7.0.4345 years ago7.0.4-alpha.265 years ago7.0.4-alpha.165 years ago7.0.3445 years ago7.0.3-alpha.155 years ago7.0.2905 years ago7.0.12915 years ago7.0.065 years ago6.0.19285 years ago6.0.0905 years ago5.0.0555 years ago5.0.0-alpha.265 years ago5.0.0-alpha.175 years ago4.1.22,8215 years ago4.1.1255 years ago4.1.0585 years ago4.0.675 years ago4.0.5115 years ago4.0.4605 years ago4.0.33505 years ago4.0.2175 years ago4.0.2-alpha.165 years ago4.0.11,2375 years ago4.0.085 years ago3.2.29465 years ago3.2.1125 years ago3.2.0165 years ago3.1.263865 years ago3.1.252066 years ago3.1.24806 years ago3.1.231796 years ago3.1.2266 years ago3.1.211016 years ago3.1.202,8086 years ago3.1.1966 years ago3.1.18116 years ago3.1.1776 years ago3.1.1676 years ago3.1.1576 years ago3.1.1476 years ago3.1.13106 years ago3.1.12166 years ago3.1.11246 years ago3.1.10276 years ago3.1.9536 years ago3.1.896 years ago3.1.7426 years ago3.1.686 years ago3.1.556 years ago3.1.4116 years ago3.1.3136 years ago3.1.266 years ago3.1.1156 years ago3.1.0136 years ago3.0.1266 years ago3.0.1166 years ago3.0.1066 years ago3.0.966 years ago3.0.866 years ago3.0.756 years ago3.0.666 years ago3.0.576 years ago3.0.476 years ago3.0.376 years ago3.0.2116 years ago3.0.196 years ago3.0.0506 years ago2.15.03,9836 years ago2.14.3206 years ago2.14.21527 years ago3.0.0-alpha.3117 years ago2.14.1107 years ago3.0.0-alpha287 years ago3.0.0-alpha187 years ago2.14.01297 years ago2.13.01328 years ago2.12.12008 years ago2.12.088 years ago2.11.3558 years ago2.11.2108 years ago2.11.198 years ago2.11.088 years ago2.10.598 years ago2.10.4258 years ago2.10.3168 years ago2.10.288 years ago2.10.198 years ago2.10.098 years ago2.8.1078 years ago2.8.9118 years ago2.8.888 years ago2.8.788 years ago2.8.689 years ago2.8.579 years ago2.8.469 years ago2.8.379 years ago2.8.279 years ago2.8.169 years ago2.8.079 years ago2.7.269 years ago2.7.159 years ago2.7.079 years ago2.6.899 years ago2.6.7109 years ago2.6.659 years ago2.6.5169 years ago2.6.469 years ago2.6.3109 years ago2.6.279 years ago2.6.169 years ago2.6.089 years ago2.5.889 years ago2.5.799 years ago2.5.699 years ago2.5.579 years ago2.5.4-spawnglobal69 years ago2.5.43249 years ago2.5.3-spawnglobal79 years ago2.5.379 years ago2.5.279 years ago2.5.179 years ago2.5.079 years ago2.4.289 years ago2.4.169 years ago2.4.079 years ago2.3.4510 years ago2.3.3810 years ago2.3.2910 years ago2.3.1810 years ago2.3.0710 years ago2.2.4710 years ago2.2.3810 years ago2.2.2810 years ago2.2.1710 years ago2.2.0810 years ago2.1.3710 years ago2.1.2710 years ago2.1.1610 years ago2.1.0710 years ago2.0.4710 years ago2.0.3810 years ago2.0.2710 years ago2.0.1610 years ago2.0.0610 years ago2.0.0-alpha.17810 years ago2.0.0-alpha.16710 years ago2.0.0-alpha.15610 years ago2.0.0-alpha.14610 years ago2.0.0-alpha.13610 years ago2.0.0-alpha.12710 years ago2.0.0-alpha.11610 years ago2.0.0-alpha.10610 years ago2.0.0-alpha.91010 years ago2.0.0-alpha.8510 years ago2.0.0-alpha.7710 years ago2.0.0-alpha6710 years ago2.0.0-alpha5610 years ago2.0.0-alpha4610 years ago2.0.0-alpha3610 years ago2.0.0-alpha2610 years ago2.0.0-alpha1810 years ago1.5.14410 years ago1.5.0610 years ago1.3.0610 years ago1.2.0611 years ago1.1.1612 years ago1.1.0812 years ago1.0.1712 years ago1.0.0712 years agoPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\nnpm-check-updates18.0.1 • Public • Published 2 days ago ReadmeCode Beta0 Dependencies608 Dependents486 Versionsnpm-check-updates


npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.

maintains existing semantic versioning policies, i.e. "react": "^17.0.2" to "react": "^18.3.1".

only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
sensible defaults, but highly customizable
compatible with npm, yarn, pnpm, deno, and bun
CLI and module usage


$${\color{red}Red}$$ major upgrade (and all major version zero)
$${\color{cyan}Cyan}$$ minor upgrade
$${\color{green}Green}$$ patch upgrade
Installation
Install globally to use npm-check-updates or the shorter ncu:
npm install -g npm-check-updates
Or run with npx (only the long form is supported):
npx npm-check-updates
Usage
Check the latest versions of all project dependencies:
$ ncu
Checking package.json
[====================] 5/5 100%

 eslint             7.32.0  →    8.0.0
 prettier           ^2.7.1  →   ^3.0.0
 svelte            ^3.48.0  →  ^3.51.0
 typescript         >3.0.0  →   >4.0.0
 untildify          <4.0.0  →   ^4.0.0
 webpack               4.x  →      5.x

Run ncu -u to upgrade package.json
Upgrade a project's package file:

Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.

$ ncu -u
Upgrading package.json
[====================] 1/1 100%

 express           4.12.x  →   4.13.x

Run npm install to install new versions.

$ npm install      # update installed packages and package-lock.json
Check global packages:
ncu -g
Interactive Mode
Choose which packages to update in interactive mode:
ncu --interactive
ncu -i

Combine with --format group for a truly luxe experience:

Filter packages
Filter packages using the --filter option or adding additional cli arguments:
# upgrade only mocha
ncu mocha
ncu -f mocha
ncu --filter mocha

# upgrade only chalk, mocha, and react
ncu chalk mocha react
ncu chalk, mocha, react
ncu -f "chalk mocha react"
Filter with wildcards or regex:
# upgrade packages that start with "react-"
ncu react-*
ncu "/^react-.*$/"
Exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:
# upgrade everything except nodemon
ncu \!nodemon
ncu -x nodemon
ncu --reject nodemon

# upgrade packages that do not start with "react-".
ncu \!react-*
ncu '/^(?!react-).*$/' # mac/linux
ncu "/^(?!react-).*$/" # windows
Advanced filters: filter, filterResults, filterVersion
How dependency updates are determined

Direct dependencies are updated to the latest stable version:


2.0.1 → 2.2.0


1.2 → 1.3


0.1.0 → 1.0.1



Range operators are preserved and the version is updated:


^1.2.0 → ^2.0.0


1.x → 2.x


>0.2.0 → >0.3.0



"Less than" is replaced with a wildcard:


<2.0.0 → ^3.0.0


1.0.0 < 2.0.0 → ^3.0.0



"Any version" is preserved:


* → *



Prerelease versions are ignored by default.

Use --pre to include prerelease versions (e.g. alpha, beta, build1235)


Choose what level to upgrade to:

With --target semver, update according to your specified semver version ranges:


^1.1.0 → ^1.9.99



With --target minor, strictly update the patch and minor versions (including major version zero):


0.1.0 → 0.2.1



With --target patch, strictly update the patch version (including major version zero):


0.1.0 → 0.1.2



With --target @next, update to the version published on the next tag:


0.1.0 -> 0.1.1-next.1






Options
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

Options that take no arguments can be negated by prefixing them with --no-, e.g. --no-peer.



  
    --cache
    Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes.
  
  
    --cacheClear
    Clear the default cache, or the cache file specified by --cacheFile.
  
  
    --cacheExpiration <min>
    Cache expiration in minutes. Only works with --cache. (default: 10)
  
  
    --cacheFile <path>
    Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")
  
  
    --color
    Force color in terminal.
  
  
    --concurrency <n>
    Max number of concurrent HTTP requests to registry. (default: 8)
  
  
    --configFileName <s>
    Config file name. (default: .ncurc.{json,yml,js,cjs})
  
  
    --configFilePath <path>
    Directory of .ncurc config file. (default: directory of packageFile)
  
  
    --cwd <path>
    Working directory in which npm will be executed.
  
  
    --deep
    Run recursively in current working directory. Alias of (--packageFile '**/package.json').

  
  
    --dep <value>
    Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional","packageManager"])
  
  
    --deprecated
    Include deprecated packages. Use --no-deprecated to exclude deprecated packages (uses more bandwidth). (default: true)
  
  
    -d, --doctor
    Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute.
  
  
    --doctorInstall <command>
    Specifies the install script to use in doctor mode. (default: npm install or the equivalent for your package manager)
  
  
    --doctorTest <command>
    Specifies the test script to use in doctor mode. (default: npm test)
  
  
    --enginesNode
    Include only packages that satisfy engines.node as specified in the package file.
  
  
    -e, --errorLevel <n>
    Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)
  
  
    -f, --filter <p>
    Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    filterResults <fn>
    Filters results based on a user provided predicate function after fetching new versions.
  
  
    --filterVersion <p>
    Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --format <value>
    Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])
  
  
    -g, --global
    Check global packages instead of in the current project.
  
  
    groupFunction <fn>
    Customize how packages are divided into groups when using --format group.
  
  
    --install <value>
    Control the auto-install behavior: always, never, prompt. (default: "prompt")
  
  
    -i, --interactive
    Enable interactive prompts for each dependency; implies -u unless one of the json options are set.
  
  
    -j, --jsonAll
    Output new package file instead of human-readable message.
  
  
    --jsonDeps
    Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data.
  
  
    --jsonUpgraded
    Output upgraded dependencies in json.
  
  
    -l, --loglevel <n>
    Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")
  
  
    --mergeConfig
    Merges nested configs with the root config file for --deep or --packageFile options. (default: false)
  
  
    -m, --minimal
    Do not upgrade newer versions that are already satisfied by the version range according to semver.
  
  
    --packageData <value>
    Package file data (you can also use stdin).
  
  
    --packageFile <path|glob>
    Package file(s) location. (default: ./package.json)
  
  
    -p, --packageManager <s>
    npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).
  
  
    --peer
    Check peer dependencies of installed packages and filter updates to compatible versions.
  
  
    --pre <n>
    Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)
  
  
    --prefix <path>
    Current working directory of npm.
  
  
    -r, --registry <uri>
    Specify the registry to use when looking up package versions.
  
  
    --registryType <type>
    Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)
  
  
    -x, --reject <p>
    Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --rejectVersion <p>
    Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.
  
  
    --removeRange
    Remove version ranges from the final package version.
  
  
    --retry <n>
    Number of times to retry failed requests for package info. (default: 3)
  
  
    --root
    Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: true)
  
  
    -s, --silent
    Don't output anything. Alias for --loglevel silent.
  
  
    --stdin
    Read package.json from stdin.
  
  
    -t, --target <value>
    Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, @[tag], or [function]. (default: latest)

  
  
    --timeout <ms>
    Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)
  
  
    -u, --upgrade
    Overwrite package file with upgraded versions instead of just outputting to console.
  
  
    --verbose
    Log additional information for debugging. Alias for --loglevel verbose.
  
  
    -w, --workspace <s>
    Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])
  
  
    -ws, --workspaces
    Run on all workspaces. Add --root to also upgrade the root project.
  


Advanced Options
Some options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:


doctor
Usage:
ncu --doctor -u
ncu --no-doctor
ncu -du

Iteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Requires -u to execute (modifies your package file, lock file, and node_modules)
To be more precise:

Runs npm install and npm test to ensure tests are currently passing.
Runs ncu -u to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.

Additional options:

  
--doctorInstall
specify a custom install script (default: `npm install` or `yarn`)

  
--doctorTest
specify a custom test script (default: `npm test`)


Example:
$ ncu --doctor -u
Running tests before upgrading
npm install
npm run test
Upgrading all dependencies and re-running tests
ncu -u
npm install
npm run test
Tests failed
Identifying broken dependencies
npm install
npm install --no-save react@16.0.0
npm run test
  ✓ react 15.0.0 → 16.0.0
npm install --no-save react-redux@7.0.0
npm run test
  ✗ react-redux 6.0.0 → 7.0.0

/projects/myproject/test.js:13
  throw new Error('Test failed!')
  ^

npm install --no-save react-dnd@11.1.3
npm run test
  ✓ react-dnd 10.0.0 → 11.1.3
Saving partially upgraded package.json

filter
Usage:
ncu --filter [p]
ncu -f [p]

Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with --peer.
--filter runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filter: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return false
  }
  return true
}
filterResults
Filters results based on a user provided predicate function after fetching new versions.
filterResults runs after new versions are fetched, in contrast to filter, reject, filterVersion, and rejectVersion, which run before. This allows you to exclude upgrades with filterResults based on how the version has changed (e.g. a major version change).

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Exclude major version updates. Note this could also be achieved with --target semver.
  @param {string} packageName               The name of the dependency.
  @param {string} current                   Current version declaration (may be a range).
  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).
  @param {string} upgraded                  Upgraded version.
  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.
  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.
*/
filterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {
  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)
  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)
  if (currentMajor && upgradedMajor) {
    return currentMajor >= upgradedMajor
  }
  return true
}
For the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring
filterVersion
Usage:
ncu --filterVersion [p]

Include only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--filterVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the filter option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be included, false if it should be excluded.
*/
filterVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return false
  }
  return true
}
format
Usage:
ncu --format [value]

Modify the output formatting or show additional information. Specify one or more comma-delimited values.

  
group
Groups packages by major, minor, patch, and major version zero updates.

  
ownerChanged
Shows if the package owner has changed.

  
repo
Infers and displays links to the package's source code repository. Requires packages to be installed.

  
time
Shows the publish time of each upgrade.

  
lines
Prints name@version on separate lines. Useful for piping to npm install.

  
installedVersion
Prints the exact current version number instead of a range.


groupFunction
Customize how packages are divided into groups when using --format group.
Only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.
/**
  @param name             The name of the dependency.
  @param defaultGroup     The predefined group name which will be used by default.
  @param currentSpec      The current version range in your package.json.
  @param upgradedSpec     The upgraded version range that will be written to your package.json.
  @param upgradedVersion  The upgraded version number returned by the registry.
  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.
*/
groupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {
  if (name === 'typescript' && defaultGroup === 'minor') {
    return 'major'
  }
  if (name.startsWith('@myorg/')) {
    return 'My Org'
  }
  return defaultGroup
}
install
Usage:
ncu --install [value]

Default: prompt
Control the auto-install behavior.

  
always
Runs your package manager's install command automatically after upgrading.

  
never
Does not install and does not prompt.

  
prompt
Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)


packageManager
Usage:
ncu --packageManager [s]
ncu -p [s]

Specifies the package manager to use when looking up versions.

  
npm
System-installed npm. Default.

  
yarn
System-installed yarn. Automatically used if yarn.lock is present.

  
pnpm
System-installed pnpm. Automatically used if pnpm-lock.yaml is present.

  
bun
System-installed bun. Automatically used if bun.lock or bun.lockb is present.


peer
Usage:
ncu --peer
ncu --no-peer

Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:

1.0.0 has peer dependency "ncu-test-return-version": "1.0.x"

1.1.0 has peer dependency "ncu-test-return-version": "1.1.x"


Our test app has the following dependencies:
"ncu-test-peer-update": "1.0.0",
"ncu-test-return-version": "1.0.0"

The latest versions of these packages are:
"ncu-test-peer-update": "1.1.0",
"ncu-test-return-version": "2.0.0"

With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  1.1.0

Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
ncu-test-peer-update     1.0.0  →  1.1.0
ncu-test-return-version  1.0.0  →  2.0.0

registryType
Usage:
ncu --registryType [type]

Specify whether --registry refers to a full npm registry or a simple JSON file.

  
npm
Default npm registry

  
json
Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.
Example:
// local file
$ ncu --registryType json --registry ./registry.json

// url
$ ncu --registryType json --registry https://api.mydomain/registry.json

// you can omit --registryType when the registry ends in .json
$ ncu --registry ./registry.json
$ ncu --registry https://api.mydomain/registry.json

registry.json:
{
  "prettier": "2.7.1",
  "typescript": "4.7.4"
}




reject
Usage:
ncu --reject [p]
ncu -x [p]

The inverse of --filter. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the --peer check.
--reject runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
reject: (name, semver) => {
  if (name.startsWith('@myorg/')) {
    return true
  }
  return false
}
rejectVersion
Usage:
ncu --rejectVersion [p]

The inverse of --filterVersion. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.
--rejectVersion runs before new versions are fetched, in contrast to --filterResults which runs after.
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.

/**
  @param name     The name of the dependency.
  @param semver   A parsed Semver array of the current version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        True if the package should be excluded, false if it should be included.
*/
rejectVersion: (name, semver) => {
  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {
    return true
  }
  return false
}
target
Usage:
ncu --target [value]
ncu -t [value]

Determines the version to upgrade to. (default: "latest")

  
greatest
Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.

  
latest
Upgrade to whatever the package's "latest" git tag points to. Excludes prereleases unless --pre is specified.

  
minor
Upgrade to the highest minor version without bumping the major version.

  
newest
Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.

  
patch
Upgrade to the highest patch version without bumping the minor or major versions.

  
semver
Upgrade to the highest version within the semver range specified in your package.json.

  
@[tag]
Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.


e.g.
ncu --target semver

You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.

⚠️ The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.

/** Upgrade major version zero to the next minor version, and everything else to latest.
  @param name     The name of the dependency.
  @param semver   A parsed Semver object of the upgraded version.
    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)
  @returns        One of the valid target values (specified in the table above).
*/
target: (name, semver) => {
  if (parseInt(semver[0]?.major) === '0') return 'minor'
  return 'latest'
}

Config File
Add a .ncurc.{json,yml,js,cjs} file to your project directory to specify configuration information.
For example, .ncurc.json:
{
  "upgrade": true,
  "filter": "svelte",
  "reject": ["@types/estree", "ts-node"]
}
Options are merged with the following precedence:

Command line options
Local Config File (current working directory)
Project Config File (next to package.json)
User Config File ($HOME)

You can also specify a custom config file name or path using the --configFileName or --configFilePath command line options.
Config Functions
Some options offer more advanced configuration using a function definition. These include filter, filterVersion, filterResults, reject, rejectVersion, and groupFunction. To define an options function, convert the config file to a JS file by adding the .js extension and setting module.exports:
For example, .ncurc.js:
module.exports = {
  upgrade: true,
  filter: name => name.startsWith('@myorg/'),
}
JSON Schema
If you write .ncurc config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.
e.g. for VS Code:
  "json.schemas": [
    {
      "fileMatch": [
        ".ncurc",
        ".ncurc.json",
      ],
      "url": "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json"
    }
  ],
  "yaml.schemas": {
    "https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json": [
        ".ncurc.yml",
    ]
  },
Module/Programmatic Usage
npm-check-updates can be imported as a module:
import ncu from 'npm-check-updates'

const upgraded = await ncu.run({
  // Pass any cli option
  packageFile: '../package.json',
  upgrade: true,
  // Defaults:
  // jsonUpgraded: true,
  // silent: true,
})

console.log(upgraded) // { "mypackage": "^2.0.0", ... }
Contributing
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
Problems?
File an issue. Please search existing issues first.
ReadmeKeywordsdependenciesnpmpackage.jsonupdateupgradeversionsPackage SidebarInstallnpm i npm-check-updatesRepositorygithub.com/raineorshine/npm-check-updatesHomepagegithub.com/raineorshine/npm-check-updatesWeekly Downloads464,223Version18.0.1LicenseApache-2.0Unpacked Size5.55 MBTotal Files17Last publish2 days agoCollaboratorsTry on RunKitReport malware\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedis-core-moduleIs this specifier a node.js core module?coremodulesmodulenpmnodedependenciesljharb• 2.16.1 • 4 months ago •  2,199 dependents •  MITpublished version 2.16.1, 4 months ago2199 dependents licensed under $MIT282,346,032pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229is-bun-moduleIs this specifier a Bun core module or supported Node one?coremodulesmodulenodedependenciesbunsunset_techuila• 2.0.0 • a month ago •  3 dependents •  MITpublished version 2.0.0, a month ago3 dependents licensed under $MIT33,184,207toposortTopological sort of directed ascyclic graphs (like dependecy lists)topologicalsortsortinggraphsgraphdependencylistdependenciesacyclicmarcelklehr• 2.0.2 • 7 years ago •  557 dependents •  MITpublished version 2.0.2, 7 years ago557 dependents licensed under $MIT31,737,730lazy-cacheCache requires to be lazy-loaded when needed.cachecachingdependenciesdependencylazyrequirerequiresjonschlinkert• 2.0.2 • 8 years ago •  385 dependents •  MITpublished version 2.0.2, 8 years ago385 dependents licensed under $MIT22,799,771detective-stylusGet the dependencies of a Stylus filestylusaststaticanalysisdependenciesxhmikosr• 5.0.1 • 3 months ago •  22 dependents •  MITpublished version 5.0.1, 3 months ago22 dependents licensed under $MIT8,470,024knipFind and fix unused files, dependencies and exports in your TypeScript and JavaScript projectsanalysisanalyzeclassclidead codedependenciesdetectdevDependenciesduplicateentropyenumexportfilesfindView morewebpro• 5.50.5 • 9 days ago •  21 dependents •  ISCpublished version 5.50.5, 9 days ago21 dependents licensed under $ISC9,639,375precinctUnleash the detectivesmodulesamdcommonjses6sasslessdetectivedependenciesxhmikosr• 12.2.0 • 3 months ago •  91 dependents •  MITpublished version 12.2.0, 3 months ago91 dependents licensed under $MIT7,983,952toposort-classTopological sort of directed acyclic graphs (like dependecy lists)topologicalsortsortinggraphsgraphdependencylistdependenciesacyclicbrowsergustavohenke• 1.0.1 • 10 years ago •  206 dependents •  MITpublished version 1.0.1, 10 years ago206 dependents licensed under $MIT7,260,979detective-es6Get the dependencies of an ES6 moduledetectivees6es2015dependenciesmoduleastimportxhmikosr• 5.0.1 • 3 months ago •  36 dependents •  MITpublished version 5.0.1, 3 months ago36 dependents licensed under $MIT7,906,152detective-amdFind all dependencies within a JavaScript file using AMD module syntaxamddetectivedependenciesaststatic analysisrequirejsjsxmodulexhmikosr• 6.0.1 • 3 months ago •  24 dependents •  MITpublished version 6.0.1, 3 months ago24 dependents licensed under $MIT7,839,263detective-sassFind the dependencies of a sass filedetectivesassastdependenciesxhmikosr• 6.0.1 • 3 months ago •  18 dependents •  MITpublished version 6.0.1, 3 months ago18 dependents licensed under $MIT7,831,865detective-typescriptGet the dependencies of a TypeScript moduledetectivetypescriptdependenciesmoduleastimportxhmikosr• 14.0.0 • 3 months ago •  20 dependents •  MITpublished version 14.0.0, 3 months ago20 dependents licensed under $MIT8,042,135detective-scssFind the dependencies of an scss filedetectivescsssassastdependenciesxhmikosr• 5.0.1 • 3 months ago •  28 dependents •  MITpublished version 5.0.1, 3 months ago28 dependents licensed under $MIT7,832,062detective-cjsGet the dependencies of a CommonJS module by traversing its ASTdetectivecommonjsdependenciesaststatic analysiscjsjsxxhmikosr• 6.0.1 • 3 months ago •  29 dependents •  MITpublished version 6.0.1, 3 months ago29 dependents licensed under $MIT7,822,965@dependents/detective-lessFind the dependencies of a less filedetectivelessastdependenciesxhmikosr• 5.0.1 • 3 months ago •  2 dependents •  MITpublished version 5.0.1, 3 months ago2 dependents licensed under $MIT6,120,022matchdepUse micromatch to filter npm module dependencies by name.package.jsondependenciesdevDependenciespeerDependenciesphated• 2.0.0 • 8 years ago •  98 dependents •  MITpublished version 2.0.0, 8 years ago98 dependents licensed under $MIT4,258,926depcheckCheck dependencies in your node modulecheckunusedpackagepackagesdepcheckdependencydependenciesdevDependenciesrumpl• 1.4.7 • 2 years ago •  286 dependents •  MITpublished version 1.4.7, 2 years ago286 dependents licensed under $MIT5,010,215dependency-cruiserValidate and visualize dependencies. With your rules. JavaScript, TypeScript, CoffeeScript. ES6, CommonJS, AMD.static analysiscirculardependenciestypescriptjavascriptcoffeescriptES6ES2015AMDCommonJSvalidationspelunkingsverweij• 16.10.1 • 23 days ago •  97 dependents •  MITpublished version 16.10.1, 23 days ago97 dependents licensed under $MIT2,963,338dag-mapA topologically ordered map of key/value pairs with a simple API for adding constraints.dagmapdependencieskrisselden• 2.0.2 • 8 years ago •  41 dependents •  MITpublished version 2.0.2, 8 years ago41 dependents licensed under $MIT3,209,348123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedis-core-moduleIs this specifier a node.js core module?coremodulesmodulenpmnodedependenciesljharb• 2.16.1 • 4 months ago •  2,199 dependents •  MITpublished version 2.16.1, 4 months ago2199 dependents licensed under $MIT282,346,032pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229is-bun-moduleIs this specifier a Bun core module or supported Node one?coremodulesmodulenodedependenciesbunsunset_techuila• 2.0.0 • a month ago •  3 dependents •  MITpublished version 2.0.0, a month ago3 dependents licensed under $MIT33,184,207toposortTopological sort of directed ascyclic graphs (like dependecy lists)topologicalsortsortinggraphsgraphdependencylistdependenciesacyclicmarcelklehr• 2.0.2 • 7 years ago •  557 dependents •  MITpublished version 2.0.2, 7 years ago557 dependents licensed under $MIT31,737,730lazy-cacheCache requires to be lazy-loaded when needed.cachecachingdependenciesdependencylazyrequirerequiresjonschlinkert• 2.0.2 • 8 years ago •  385 dependents •  MITpublished version 2.0.2, 8 years ago385 dependents licensed under $MIT22,799,771detective-stylusGet the dependencies of a Stylus filestylusaststaticanalysisdependenciesxhmikosr• 5.0.1 • 3 months ago •  22 dependents •  MITpublished version 5.0.1, 3 months ago22 dependents licensed under $MIT8,470,024knipFind and fix unused files, dependencies and exports in your TypeScript and JavaScript projectsanalysisanalyzeclassclidead codedependenciesdetectdevDependenciesduplicateentropyenumexportfilesfindView morewebpro• 5.50.5 • 9 days ago •  21 dependents •  ISCpublished version 5.50.5, 9 days ago21 dependents licensed under $ISC9,639,375precinctUnleash the detectivesmodulesamdcommonjses6sasslessdetectivedependenciesxhmikosr• 12.2.0 • 3 months ago •  91 dependents •  MITpublished version 12.2.0, 3 months ago91 dependents licensed under $MIT7,983,952toposort-classTopological sort of directed acyclic graphs (like dependecy lists)topologicalsortsortinggraphsgraphdependencylistdependenciesacyclicbrowsergustavohenke• 1.0.1 • 10 years ago •  206 dependents •  MITpublished version 1.0.1, 10 years ago206 dependents licensed under $MIT7,260,979detective-es6Get the dependencies of an ES6 moduledetectivees6es2015dependenciesmoduleastimportxhmikosr• 5.0.1 • 3 months ago •  36 dependents •  MITpublished version 5.0.1, 3 months ago36 dependents licensed under $MIT7,906,152detective-amdFind all dependencies within a JavaScript file using AMD module syntaxamddetectivedependenciesaststatic analysisrequirejsjsxmodulexhmikosr• 6.0.1 • 3 months ago •  24 dependents •  MITpublished version 6.0.1, 3 months ago24 dependents licensed under $MIT7,839,263detective-sassFind the dependencies of a sass filedetectivesassastdependenciesxhmikosr• 6.0.1 • 3 months ago •  18 dependents •  MITpublished version 6.0.1, 3 months ago18 dependents licensed under $MIT7,831,865detective-typescriptGet the dependencies of a TypeScript moduledetectivetypescriptdependenciesmoduleastimportxhmikosr• 14.0.0 • 3 months ago •  20 dependents •  MITpublished version 14.0.0, 3 months ago20 dependents licensed under $MIT8,042,135detective-scssFind the dependencies of an scss filedetectivescsssassastdependenciesxhmikosr• 5.0.1 • 3 months ago •  28 dependents •  MITpublished version 5.0.1, 3 months ago28 dependents licensed under $MIT7,832,062detective-cjsGet the dependencies of a CommonJS module by traversing its ASTdetectivecommonjsdependenciesaststatic analysiscjsjsxxhmikosr• 6.0.1 • 3 months ago •  29 dependents •  MITpublished version 6.0.1, 3 months ago29 dependents licensed under $MIT7,822,965@dependents/detective-lessFind the dependencies of a less filedetectivelessastdependenciesxhmikosr• 5.0.1 • 3 months ago •  2 dependents •  MITpublished version 5.0.1, 3 months ago2 dependents licensed under $MIT6,120,022matchdepUse micromatch to filter npm module dependencies by name.package.jsondependenciesdevDependenciespeerDependenciesphated• 2.0.0 • 8 years ago •  98 dependents •  MITpublished version 2.0.0, 8 years ago98 dependents licensed under $MIT4,258,926depcheckCheck dependencies in your node modulecheckunusedpackagepackagesdepcheckdependencydependenciesdevDependenciesrumpl• 1.4.7 • 2 years ago •  286 dependents •  MITpublished version 1.4.7, 2 years ago286 dependents licensed under $MIT5,010,215dependency-cruiserValidate and visualize dependencies. With your rules. JavaScript, TypeScript, CoffeeScript. ES6, CommonJS, AMD.static analysiscirculardependenciestypescriptjavascriptcoffeescriptES6ES2015AMDCommonJSvalidationspelunkingsverweij• 16.10.1 • 23 days ago •  97 dependents •  MITpublished version 16.10.1, 23 days ago97 dependents licensed under $MIT2,963,338dag-mapA topologically ordered map of key/value pairs with a simple API for adding constraints.dagmapdependencieskrisselden• 2.0.2 • 8 years ago •  41 dependents •  MITpublished version 2.0.2, 8 years ago41 dependents licensed under $MIT3,209,348123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedexecaProcess execution for humansexecchildprocesssubprocessexecuteforkexecfilespawnfileshellbinbinarybinariesnpmView moreehmicky• 9.5.2 • 5 months ago •  14,806 dependents •  MITpublished version 9.5.2, 5 months ago14806 dependents licensed under $MIT389,807,075is-core-moduleIs this specifier a node.js core module?coremodulesmodulenpmnodedependenciesljharb• 2.16.1 • 4 months ago •  2,199 dependents •  MITpublished version 2.16.1, 4 months ago2199 dependents licensed under $MIT282,346,032pkg-dirFind the root directory of a Node.js project or npm packagepackagejsonrootnpmentryfindupfind-upfinduplook-uplookfilesearchmatchView moresindresorhus• 8.0.0 • a year ago •  3,290 dependents •  MITpublished version 8.0.0, a year ago3290 dependents licensed under $MIT277,602,825npm-run-pathGet your PATH prepended with locally installed binariesnpmrunpathpackagebinbinarybinariesscriptclicommand-lineexecuteexecutablesindresorhus• 6.0.0 • 8 months ago •  1,793 dependents •  MITpublished version 6.0.0, 8 months ago1793 dependents licensed under $MIT322,129,223validate-npm-package-licenseGive me a string and I'll tell you if it's a valid npm package license stringlicensenpmpackagevalidationkemitchell• 3.0.4 • 7 years ago •  1,154 dependents •  Apache-2.0published version 3.0.4, 7 years ago1154 dependents licensed under $Apache-2.0116,395,973pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229global-prefixGet the npm global path prefix.globalmodulemodulesnpmpathprefixresolvephated• 4.0.0 • 8 months ago •  549 dependents •  MITpublished version 4.0.0, 8 months ago549 dependents licensed under $MIT84,591,637postcss-importPostCSS plugin to import CSS filescsspostcsspostcss-pluginimportnode modulesnpmryanzim• 16.1.0 • a year ago •  3,042 dependents •  MITpublished version 16.1.0, a year ago3042 dependents licensed under $MIT77,835,758@npmcli/fsfilesystem utilities for the npm clinpmossnpm-cli-ops• 4.0.0 • 7 months ago •  19 dependents •  ISCpublished version 4.0.0, 7 months ago19 dependents licensed under $ISC92,673,361validate-npm-package-nameGive me a string and I'll tell you if it's a valid npm package namenpmpackagenamesvalidationnpm-cli-ops• 6.0.0 • 7 months ago •  2,980 dependents •  ISCpublished version 6.0.0, 7 months ago2980 dependents licensed under $ISC76,969,716registry-auth-tokenGet the auth token set for an npm registry (if any)npmconfconfignpmconfregistryauthtokenauthtokenrexxars• 5.1.0 • 3 months ago •  591 dependents •  MITpublished version 5.1.0, 3 months ago591 dependents licensed under $MIT54,409,278registry-urlGet the set npm registry URLnpmconfconfignpmconfregistryurluriscopesindresorhus• 7.2.0 • 11 days ago •  596 dependents •  MITpublished version 7.2.0, 11 days ago596 dependents licensed under $MIT45,903,558is-installed-globallyCheck if your package was installed globallyglobalpackagegloballymoduleinstallinstallednpmyarnischeckdetectlocallocallycliView moresindresorhus• 1.0.0 • a year ago •  585 dependents •  MITpublished version 1.0.0, a year ago585 dependents licensed under $MIT56,952,785module-details-from-pathExtract the Node.js module details like name and base path given an abosulte path to a file inside the modulenodenodejsnpmmoduleextractparsenamebasedirdirectorypathrelativewatson• 1.0.3 • 9 years ago •  54 dependents •  MITpublished version 1.0.3, 9 years ago54 dependents licensed under $MIT48,316,212@yarnpkg/lockfileThe parser/stringifier for Yarn lockfiles.yarnyarnpkglockfiledependencynpmarcanis• 1.1.0 • 7 years ago •  305 dependents •  BSD-2-Clausepublished version 1.1.0, 7 years ago305 dependents licensed under $BSD-2-Clause38,908,626resolve-dirResolve a directory that is either local, global or in the user's home directory.dirdirectoryexpansionfilefilepathfpglobalhomemodulesnpmpathresolvetildeuserView morephated• 1.0.1 • 8 years ago •  275 dependents •  MITpublished version 1.0.1, 8 years ago275 dependents licensed under $MIT39,930,672npm-registry-fetchFetch-based http client for use with npm registry APIsnpmregistryfetchnpm-cli-ops• 18.0.2 • 6 months ago •  251 dependents •  ISCpublished version 18.0.2, 6 months ago251 dependents licensed under $ISC36,746,698npm-pick-manifestResolves a matching manifest from a package metadata document according to standard npm semver resolution rules.npmsemverpackage managernpm-cli-ops• 10.0.0 • 7 months ago •  126 dependents •  ISCpublished version 10.0.0, 7 months ago126 dependents licensed under $ISC40,062,363@rollup/plugin-node-resolveLocate and bundle third-party dependencies in node_modulesrollupplugines2015npmmodulesshellscape• 16.0.1 • a month ago •  3,941 dependents •  MITpublished version 16.0.1, a month ago3941 dependents licensed under $MIT35,799,757package-jsonGet metadata of a package from the npm registrynpmregistrypackagepkgpackage.jsonjsonmodulescopescopedsindresorhus• 10.0.1 • 9 months ago •  975 dependents •  MITpublished version 10.0.1, 9 months ago975 dependents licensed under $MIT34,145,632123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedexecaProcess execution for humansexecchildprocesssubprocessexecuteforkexecfilespawnfileshellbinbinarybinariesnpmView moreehmicky• 9.5.2 • 5 months ago •  14,806 dependents •  MITpublished version 9.5.2, 5 months ago14806 dependents licensed under $MIT389,807,075is-core-moduleIs this specifier a node.js core module?coremodulesmodulenpmnodedependenciesljharb• 2.16.1 • 4 months ago •  2,199 dependents •  MITpublished version 2.16.1, 4 months ago2199 dependents licensed under $MIT282,346,032pkg-dirFind the root directory of a Node.js project or npm packagepackagejsonrootnpmentryfindupfind-upfinduplook-uplookfilesearchmatchView moresindresorhus• 8.0.0 • a year ago •  3,290 dependents •  MITpublished version 8.0.0, a year ago3290 dependents licensed under $MIT277,602,825npm-run-pathGet your PATH prepended with locally installed binariesnpmrunpathpackagebinbinarybinariesscriptclicommand-lineexecuteexecutablesindresorhus• 6.0.0 • 8 months ago •  1,793 dependents •  MITpublished version 6.0.0, 8 months ago1793 dependents licensed under $MIT322,129,223validate-npm-package-licenseGive me a string and I'll tell you if it's a valid npm package license stringlicensenpmpackagevalidationkemitchell• 3.0.4 • 7 years ago •  1,154 dependents •  Apache-2.0published version 3.0.4, 7 years ago1154 dependents licensed under $Apache-2.0116,395,973pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229global-prefixGet the npm global path prefix.globalmodulemodulesnpmpathprefixresolvephated• 4.0.0 • 8 months ago •  549 dependents •  MITpublished version 4.0.0, 8 months ago549 dependents licensed under $MIT84,591,637postcss-importPostCSS plugin to import CSS filescsspostcsspostcss-pluginimportnode modulesnpmryanzim• 16.1.0 • a year ago •  3,042 dependents •  MITpublished version 16.1.0, a year ago3042 dependents licensed under $MIT77,835,758@npmcli/fsfilesystem utilities for the npm clinpmossnpm-cli-ops• 4.0.0 • 7 months ago •  19 dependents •  ISCpublished version 4.0.0, 7 months ago19 dependents licensed under $ISC92,673,361validate-npm-package-nameGive me a string and I'll tell you if it's a valid npm package namenpmpackagenamesvalidationnpm-cli-ops• 6.0.0 • 7 months ago •  2,980 dependents •  ISCpublished version 6.0.0, 7 months ago2980 dependents licensed under $ISC76,969,716registry-auth-tokenGet the auth token set for an npm registry (if any)npmconfconfignpmconfregistryauthtokenauthtokenrexxars• 5.1.0 • 3 months ago •  591 dependents •  MITpublished version 5.1.0, 3 months ago591 dependents licensed under $MIT54,409,278registry-urlGet the set npm registry URLnpmconfconfignpmconfregistryurluriscopesindresorhus• 7.2.0 • 11 days ago •  596 dependents •  MITpublished version 7.2.0, 11 days ago596 dependents licensed under $MIT45,903,558is-installed-globallyCheck if your package was installed globallyglobalpackagegloballymoduleinstallinstallednpmyarnischeckdetectlocallocallycliView moresindresorhus• 1.0.0 • a year ago •  585 dependents •  MITpublished version 1.0.0, a year ago585 dependents licensed under $MIT56,952,785module-details-from-pathExtract the Node.js module details like name and base path given an abosulte path to a file inside the modulenodenodejsnpmmoduleextractparsenamebasedirdirectorypathrelativewatson• 1.0.3 • 9 years ago •  54 dependents •  MITpublished version 1.0.3, 9 years ago54 dependents licensed under $MIT48,316,212@yarnpkg/lockfileThe parser/stringifier for Yarn lockfiles.yarnyarnpkglockfiledependencynpmarcanis• 1.1.0 • 7 years ago •  305 dependents •  BSD-2-Clausepublished version 1.1.0, 7 years ago305 dependents licensed under $BSD-2-Clause38,908,626resolve-dirResolve a directory that is either local, global or in the user's home directory.dirdirectoryexpansionfilefilepathfpglobalhomemodulesnpmpathresolvetildeuserView morephated• 1.0.1 • 8 years ago •  275 dependents •  MITpublished version 1.0.1, 8 years ago275 dependents licensed under $MIT39,930,672npm-registry-fetchFetch-based http client for use with npm registry APIsnpmregistryfetchnpm-cli-ops• 18.0.2 • 6 months ago •  251 dependents •  ISCpublished version 18.0.2, 6 months ago251 dependents licensed under $ISC36,746,698npm-pick-manifestResolves a matching manifest from a package metadata document according to standard npm semver resolution rules.npmsemverpackage managernpm-cli-ops• 10.0.0 • 7 months ago •  126 dependents •  ISCpublished version 10.0.0, 7 months ago126 dependents licensed under $ISC40,062,363@rollup/plugin-node-resolveLocate and bundle third-party dependencies in node_modulesrollupplugines2015npmmodulesshellscape• 16.0.1 • a month ago •  3,941 dependents •  MITpublished version 16.0.1, a month ago3941 dependents licensed under $MIT35,799,757package-jsonGet metadata of a package from the npm registrynpmregistrypackagepkgpackage.jsonjsonmodulescopescopedsindresorhus• 10.0.1 • 9 months ago •  975 dependents •  MITpublished version 10.0.1, 9 months ago975 dependents licensed under $MIT34,145,632123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedspdx-expression-parseparse SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 4.0.0 • a year ago •  1,129 dependents •  MITpublished version 4.0.0, a year ago1129 dependents licensed under $MIT131,278,410pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229resolve-pkg-mapsResolve package.json exports & imports mapsnode.jspackage.jsonexportsimportshirokiosame• 1.0.0 • 2 years ago •  246 dependents •  MITpublished version 1.0.0, 2 years ago246 dependents licensed under $MIT71,549,669npma package manager for JavaScriptinstallmodulespackage managerpackage.jsonowlstronaut• 11.3.0 • 18 days ago •  12,305 dependents •  Artistic-2.0published version 11.3.0, 18 days ago12305 dependents licensed under $Artistic-2.028,567,375github-from-packagereturn the github url from a package.json filegithubpackage.jsonnpmrepositorysubstack• 0.0.0 • 12 years ago •  45 dependents •  MITpublished version 0.0.0, 12 years ago45 dependents licensed under $MIT31,313,951package-jsonGet metadata of a package from the npm registrynpmregistrypackagepkgpackage.jsonjsonmodulescopescopedsindresorhus• 10.0.1 • 9 months ago •  975 dependents •  MITpublished version 10.0.1, 9 months ago975 dependents licensed under $MIT34,145,632latest-versionGet the latest version of an npm packagelatestversionnpmpkgpackagepackage.jsoncurrentmodulesindresorhus• 9.0.0 • a year ago •  1,368 dependents •  MITpublished version 9.0.0, a year ago1368 dependents licensed under $MIT30,295,602init-package-jsonA node module to get your node module startedinitpackage.jsonpackagehelperwizardwizerdpromptstartnpm-cli-ops• 8.1.1 • 2 days ago •  210 dependents •  ISCpublished version 8.1.1, 2 days ago210 dependents licensed under $ISC9,247,707pkginfoAn easy way to expose properties on a module from a package.jsoninfotoolspackage.jsonindexzero• 0.4.1 • 8 years ago •  1,301 dependents •  MITpublished version 0.4.1, 8 years ago1301 dependents licensed under $MIT7,807,880find-package-jsonFind package.json files in parent directories, keep finding until you find the right one using iterators.packagepackage.jsonjsonfind-package-jsondirectoryparentpackage-jsonread-package-json3rdeden• 1.2.0 • 6 years ago •  294 dependents •  MITpublished version 1.2.0, 6 years ago294 dependents licensed under $MIT6,124,328matchdepUse micromatch to filter npm module dependencies by name.package.jsondependenciesdevDependenciespeerDependenciesphated• 2.0.0 • 8 years ago •  98 dependents •  MITpublished version 2.0.0, 8 years ago98 dependents licensed under $MIT4,258,926prettier-plugin-packagejsonPrettier package.json plugin to make the order of properties nice.package.jsonpluginprettiermatzkoh• 2.5.10 • 2 months ago •  356 dependents •  MITpublished version 2.5.10, 2 months ago356 dependents licensed under $MIT3,599,125spdx-satisfiestest whether SPDX expressions satisfy licensing criteriaSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 6.0.0 • 4 months ago •  45 dependents •  MITpublished version 6.0.0, 4 months ago45 dependents licensed under $MIT3,809,602spdx-comparecompare SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 1.0.0 • 7 years ago •  7 dependents •  MITpublished version 1.0.0, 7 years ago7 dependents licensed under $MIT3,905,957@microsoft/rushA professional solution for consolidating all your JavaScript projects in one Git repoinstallbuildpublishfastincrementalpackage managermonorepopackage.jsonodspnpm• 5.153.1 • a day ago •  1 dependents •  MITpublished version 5.153.1, a day ago1 dependents licensed under $MIT3,024,906new-find-package-jsonFind the an package.json in the path provided upwardspackage.jsonjsonfind-package-jsondirectorypackage-jsonread-package-jsonhasezoey• 2.0.0 • 3 years ago •  7 dependents •  MITpublished version 2.0.0, 3 years ago7 dependents licensed under $MIT2,639,499npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270is-file-esmDetermines whether a Node file is a Module (`import`) or a Script (`require`)esmcjspackage.jsonmoduleecmascript modulesnative modulesnative ecmascript modulesdavidmarkclements• 1.0.0 • 5 years ago •  19 dependents •  MITpublished version 1.0.0, 5 years ago19 dependents licensed under $MIT1,587,697spdx-expression-validatevalidate SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 2.0.0 • 6 years ago •  22 dependents •  (MIT AND CC-BY-3.0)published version 2.0.0, 6 years ago22 dependents licensed under $(MIT AND CC-BY-3.0)1,240,895npm-package-json-lintConfigurable linter for package.json files.lintlinterpackage.jsonauditauditornpm-package-json-linttclindner• 8.0.0 • a year ago •  30 dependents •  MITpublished version 8.0.0, a year ago30 dependents licensed under $MIT791,822123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedspdx-expression-parseparse SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 4.0.0 • a year ago •  1,129 dependents •  MITpublished version 4.0.0, a year ago1129 dependents licensed under $MIT131,278,410pnpmFast, disk space efficient package managerpnpmpnpm10dependenciesdependency managerefficientfasthardlinksinstallinstallerlinklockfilemodulesmonorepomulti-packageView morepnpmuser• 10.9.0 • 5 days ago •  270 dependents •  MITpublished version 10.9.0, 5 days ago270 dependents licensed under $MIT93,367,229resolve-pkg-mapsResolve package.json exports & imports mapsnode.jspackage.jsonexportsimportshirokiosame• 1.0.0 • 2 years ago •  246 dependents •  MITpublished version 1.0.0, 2 years ago246 dependents licensed under $MIT71,549,669npma package manager for JavaScriptinstallmodulespackage managerpackage.jsonowlstronaut• 11.3.0 • 18 days ago •  12,305 dependents •  Artistic-2.0published version 11.3.0, 18 days ago12305 dependents licensed under $Artistic-2.028,567,375github-from-packagereturn the github url from a package.json filegithubpackage.jsonnpmrepositorysubstack• 0.0.0 • 12 years ago •  45 dependents •  MITpublished version 0.0.0, 12 years ago45 dependents licensed under $MIT31,313,951package-jsonGet metadata of a package from the npm registrynpmregistrypackagepkgpackage.jsonjsonmodulescopescopedsindresorhus• 10.0.1 • 9 months ago •  975 dependents •  MITpublished version 10.0.1, 9 months ago975 dependents licensed under $MIT34,145,632latest-versionGet the latest version of an npm packagelatestversionnpmpkgpackagepackage.jsoncurrentmodulesindresorhus• 9.0.0 • a year ago •  1,368 dependents •  MITpublished version 9.0.0, a year ago1368 dependents licensed under $MIT30,295,602init-package-jsonA node module to get your node module startedinitpackage.jsonpackagehelperwizardwizerdpromptstartnpm-cli-ops• 8.1.1 • 2 days ago •  210 dependents •  ISCpublished version 8.1.1, 2 days ago210 dependents licensed under $ISC9,247,707pkginfoAn easy way to expose properties on a module from a package.jsoninfotoolspackage.jsonindexzero• 0.4.1 • 8 years ago •  1,301 dependents •  MITpublished version 0.4.1, 8 years ago1301 dependents licensed under $MIT7,807,880find-package-jsonFind package.json files in parent directories, keep finding until you find the right one using iterators.packagepackage.jsonjsonfind-package-jsondirectoryparentpackage-jsonread-package-json3rdeden• 1.2.0 • 6 years ago •  294 dependents •  MITpublished version 1.2.0, 6 years ago294 dependents licensed under $MIT6,124,328matchdepUse micromatch to filter npm module dependencies by name.package.jsondependenciesdevDependenciespeerDependenciesphated• 2.0.0 • 8 years ago •  98 dependents •  MITpublished version 2.0.0, 8 years ago98 dependents licensed under $MIT4,258,926prettier-plugin-packagejsonPrettier package.json plugin to make the order of properties nice.package.jsonpluginprettiermatzkoh• 2.5.10 • 2 months ago •  356 dependents •  MITpublished version 2.5.10, 2 months ago356 dependents licensed under $MIT3,599,125spdx-satisfiestest whether SPDX expressions satisfy licensing criteriaSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 6.0.0 • 4 months ago •  45 dependents •  MITpublished version 6.0.0, 4 months ago45 dependents licensed under $MIT3,809,602spdx-comparecompare SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 1.0.0 • 7 years ago •  7 dependents •  MITpublished version 1.0.0, 7 years ago7 dependents licensed under $MIT3,905,957@microsoft/rushA professional solution for consolidating all your JavaScript projects in one Git repoinstallbuildpublishfastincrementalpackage managermonorepopackage.jsonodspnpm• 5.153.1 • a day ago •  1 dependents •  MITpublished version 5.153.1, a day ago1 dependents licensed under $MIT3,024,906new-find-package-jsonFind the an package.json in the path provided upwardspackage.jsonjsonfind-package-jsondirectorypackage-jsonread-package-jsonhasezoey• 2.0.0 • 3 years ago •  7 dependents •  MITpublished version 2.0.0, 3 years ago7 dependents licensed under $MIT2,639,499npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270is-file-esmDetermines whether a Node file is a Module (`import`) or a Script (`require`)esmcjspackage.jsonmoduleecmascript modulesnative modulesnative ecmascript modulesdavidmarkclements• 1.0.0 • 5 years ago •  19 dependents •  MITpublished version 1.0.0, 5 years ago19 dependents licensed under $MIT1,587,697spdx-expression-validatevalidate SPDX license expressionsSPDXlawlegallicensemetadatapackagepackage.jsonstandardskemitchell• 2.0.0 • 6 years ago •  22 dependents •  (MIT AND CC-BY-3.0)published version 2.0.0, 6 years ago22 dependents licensed under $(MIT AND CC-BY-3.0)1,240,895npm-package-json-lintConfigurable linter for package.json files.lintlinterpackage.jsonauditauditornpm-package-json-linttclindner• 8.0.0 • a year ago •  30 dependents •  MITpublished version 8.0.0, a year ago30 dependents licensed under $MIT791,822123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedlog-updateLog by overwriting the previous output in the terminal. Useful for rendering progress bars, animations, etc.logloggerloggingcliterminaltermconsoleshellupdaterefreshoverwriteoutputstdoutprogressView moresindresorhus• 6.1.0 • 9 months ago •  1,368 dependents •  MITpublished version 6.1.0, 9 months ago1368 dependents licensed under $MIT94,839,435update-notifierUpdate notifications for your CLI appnpmupdateupdaternotifynotifiercheckcheckerclimodulepackageversionsindresorhus• 7.3.1 • 8 months ago •  5,356 dependents •  BSD-2-Clausepublished version 7.3.1, 8 months ago5356 dependents licensed under $BSD-2-Clause27,714,291@tufjs/modelsTUF metadata modelstufsecurityupdateeugenethehub• 3.0.1 • 6 months ago •  2 dependents •  MITpublished version 3.0.1, 6 months ago2 dependents licensed under $MIT24,535,088tuf-jsJavaScript implementation of The Update Framework (TUF)tufsecurityupdateeugenethehub• 3.0.1 • 6 months ago •  24 dependents •  MITpublished version 3.0.1, 6 months ago24 dependents licensed under $MIT24,592,662update-checkMinimalistic update notifications for command line interfacesupdatenotificationscheckernotifierleo• 1.5.4 • 5 years ago •  293 dependents •  MITpublished version 1.5.4, 5 years ago293 dependents licensed under $MIT10,504,501listr-update-rendererListr update rendererlistrupdaterendereroralogupdaterenderingsamverschueren• 0.5.0 • 6 years ago •  95 dependents •  MITpublished version 0.5.0, 6 years ago95 dependents licensed under $MIT7,516,044simple-bin-helpSimple help and sanity checks for Node CLI bin scriptsnpmclibinutilityhelphelperupdatestartbahmutov• 1.8.0 • 2 years ago •  20 dependents •  MITpublished version 1.8.0, 2 years ago20 dependents licensed under $MIT4,159,374update-notifier-cjsUpdate notifications for your CLI app, maintained in CommonJS (CJS)npmupdateupdaternotifynotifiercheckcheckerclimodulepackageversionryanblock• 5.1.7 • 3 months ago •  29 dependents •  BSD-2-Clausepublished version 5.1.7, 3 months ago29 dependents licensed under $BSD-2-Clause2,764,265@welldone-software/why-did-you-renderMonkey patches React to notify you about avoidable re-renders.reactcomponentpureperformancerenderupdatetoolvzaidman• 10.0.1 • 3 months ago •  113 dependents •  MITpublished version 10.0.1, 3 months ago113 dependents licensed under $MIT2,559,778npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270log-update-async-hooklog-update fork that uses async-exit-hook internallylogloggerloggingcliterminaltermconsoleshellupdaterefreshoverwriteoutputstdoutprogressView morebelym.a.2105• 2.0.7 • 3 years ago •  20 dependents •  MITpublished version 2.0.7, 3 years ago20 dependents licensed under $MIT951,995update-diffUpdate object by mapping diff propertiesupdate-diffmapmap-objobject-filtermap-objectupdatediffdifferencepatchobjectcomparechangedfcreative• 1.1.0 • 8 years ago •  2 dependents •  MITpublished version 1.1.0, 8 years ago2 dependents licensed under $MIT896,640mingoMongoDB query language for in-memory objectsutilmongonosqlqueryaggregatefiltergroupprojectsearchtransformupdatemodifykofrasa• 6.6.0 • 9 days ago •  236 dependents •  MITpublished version 6.6.0, 9 days ago236 dependents licensed under $MIT801,494renovateAutomated dependency updates. Flexible so you don't need to be.automatedazurebazelbitbucketbuildkitedependenciesdependencydockergiteagithubgitlabmanagementmeteornodeView morepublish-bot• 39.258.2 • 9 minutes ago •  12 dependents •  AGPL-3.0-onlypublished version 39.258.2, 9 minutes ago12 dependents licensed under $AGPL-3.0-only813,530update-sectionUpdates a section inside a file with newer content while removing the old content.updatereplacesectionregexreadmetextthlorenz• 0.3.3 • 11 years ago •  16 dependents •  MITpublished version 0.3.3, 11 years ago16 dependents licensed under $MIT720,269updatable-logpretty logger with the ability to update lines in placelogupdateloggernoahsug• 0.2.0 • 6 years ago •  15 dependents •  ISCpublished version 0.2.0, 6 years ago15 dependents licensed under $ISC252,442mongo-dot-notationTransform objects to MongoDB update instructionsmongodotdot-notationtransformconvertoperatorsinstructionsjsonobjectsparsingdataflattenupdatedimadeveatii• 3.1.1 • a year ago •  13 dependents •  MITpublished version 3.1.1, a year ago13 dependents licensed under $MIT270,999json5-writerComment-preserving JSON / JSON5 parserjson5preservecommentsparseparserconfigupdateastnoahsug• 0.2.0 • 5 years ago •  28 dependents •  ISCpublished version 0.2.0, 5 years ago28 dependents licensed under $ISC256,491simple-update-inA lightweight `updateIn` for immutable objects.asynchronousimmutablepredicateupdateupdaterupdate-incompulim• 2.2.0 • 5 years ago •  33 dependents •  MITpublished version 2.2.0, 5 years ago33 dependents licensed under $MIT246,400accesscontrolRole and Attribute based Access Control for Node.jsaccessaccess-controlaclroleattributegrantdenyallowrejectpermissionactionpossessionrbacabacView moreonury• 2.2.1 • 7 years ago •  105 dependents •  MITpublished version 2.2.1, 7 years ago105 dependents licensed under $MIT161,888123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedlog-updateLog by overwriting the previous output in the terminal. Useful for rendering progress bars, animations, etc.logloggerloggingcliterminaltermconsoleshellupdaterefreshoverwriteoutputstdoutprogressView moresindresorhus• 6.1.0 • 9 months ago •  1,368 dependents •  MITpublished version 6.1.0, 9 months ago1368 dependents licensed under $MIT94,839,435update-notifierUpdate notifications for your CLI appnpmupdateupdaternotifynotifiercheckcheckerclimodulepackageversionsindresorhus• 7.3.1 • 8 months ago •  5,356 dependents •  BSD-2-Clausepublished version 7.3.1, 8 months ago5356 dependents licensed under $BSD-2-Clause27,714,291@tufjs/modelsTUF metadata modelstufsecurityupdateeugenethehub• 3.0.1 • 6 months ago •  2 dependents •  MITpublished version 3.0.1, 6 months ago2 dependents licensed under $MIT24,535,088tuf-jsJavaScript implementation of The Update Framework (TUF)tufsecurityupdateeugenethehub• 3.0.1 • 6 months ago •  24 dependents •  MITpublished version 3.0.1, 6 months ago24 dependents licensed under $MIT24,592,662update-checkMinimalistic update notifications for command line interfacesupdatenotificationscheckernotifierleo• 1.5.4 • 5 years ago •  293 dependents •  MITpublished version 1.5.4, 5 years ago293 dependents licensed under $MIT10,504,501listr-update-rendererListr update rendererlistrupdaterendereroralogupdaterenderingsamverschueren• 0.5.0 • 6 years ago •  95 dependents •  MITpublished version 0.5.0, 6 years ago95 dependents licensed under $MIT7,516,044simple-bin-helpSimple help and sanity checks for Node CLI bin scriptsnpmclibinutilityhelphelperupdatestartbahmutov• 1.8.0 • 2 years ago •  20 dependents •  MITpublished version 1.8.0, 2 years ago20 dependents licensed under $MIT4,159,374update-notifier-cjsUpdate notifications for your CLI app, maintained in CommonJS (CJS)npmupdateupdaternotifynotifiercheckcheckerclimodulepackageversionryanblock• 5.1.7 • 3 months ago •  29 dependents •  BSD-2-Clausepublished version 5.1.7, 3 months ago29 dependents licensed under $BSD-2-Clause2,764,265@welldone-software/why-did-you-renderMonkey patches React to notify you about avoidable re-renders.reactcomponentpureperformancerenderupdatetoolvzaidman• 10.0.1 • 3 months ago •  113 dependents •  MITpublished version 10.0.1, 3 months ago113 dependents licensed under $MIT2,559,778npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270log-update-async-hooklog-update fork that uses async-exit-hook internallylogloggerloggingcliterminaltermconsoleshellupdaterefreshoverwriteoutputstdoutprogressView morebelym.a.2105• 2.0.7 • 3 years ago •  20 dependents •  MITpublished version 2.0.7, 3 years ago20 dependents licensed under $MIT951,995update-diffUpdate object by mapping diff propertiesupdate-diffmapmap-objobject-filtermap-objectupdatediffdifferencepatchobjectcomparechangedfcreative• 1.1.0 • 8 years ago •  2 dependents •  MITpublished version 1.1.0, 8 years ago2 dependents licensed under $MIT896,640mingoMongoDB query language for in-memory objectsutilmongonosqlqueryaggregatefiltergroupprojectsearchtransformupdatemodifykofrasa• 6.6.0 • 9 days ago •  236 dependents •  MITpublished version 6.6.0, 9 days ago236 dependents licensed under $MIT801,494renovateAutomated dependency updates. Flexible so you don't need to be.automatedazurebazelbitbucketbuildkitedependenciesdependencydockergiteagithubgitlabmanagementmeteornodeView morepublish-bot• 39.258.2 • 9 minutes ago •  12 dependents •  AGPL-3.0-onlypublished version 39.258.2, 9 minutes ago12 dependents licensed under $AGPL-3.0-only813,530update-sectionUpdates a section inside a file with newer content while removing the old content.updatereplacesectionregexreadmetextthlorenz• 0.3.3 • 11 years ago •  16 dependents •  MITpublished version 0.3.3, 11 years ago16 dependents licensed under $MIT720,269updatable-logpretty logger with the ability to update lines in placelogupdateloggernoahsug• 0.2.0 • 6 years ago •  15 dependents •  ISCpublished version 0.2.0, 6 years ago15 dependents licensed under $ISC252,442mongo-dot-notationTransform objects to MongoDB update instructionsmongodotdot-notationtransformconvertoperatorsinstructionsjsonobjectsparsingdataflattenupdatedimadeveatii• 3.1.1 • a year ago •  13 dependents •  MITpublished version 3.1.1, a year ago13 dependents licensed under $MIT270,999json5-writerComment-preserving JSON / JSON5 parserjson5preservecommentsparseparserconfigupdateastnoahsug• 0.2.0 • 5 years ago •  28 dependents •  ISCpublished version 0.2.0, 5 years ago28 dependents licensed under $ISC256,491simple-update-inA lightweight `updateIn` for immutable objects.asynchronousimmutablepredicateupdateupdaterupdate-incompulim• 2.2.0 • 5 years ago •  33 dependents •  MITpublished version 2.2.0, 5 years ago33 dependents licensed under $MIT246,400accesscontrolRole and Attribute based Access Control for Node.jsaccessaccess-controlaclroleattributegrantdenyallowrejectpermissionactionpossessionrbacabacView moreonury• 2.2.1 • 7 years ago •  105 dependents •  MITpublished version 2.2.1, 7 years ago105 dependents licensed under $MIT161,888123…50»\n\n\n\nSearch results234 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedstorybookStorybook's CLI - install, dev, build, upgrade, and morecligeneratordevbuildupgradestorybook-bot• 8.6.12 • 24 days ago •  809 dependents •  MITpublished version 8.6.12, 24 days ago809 dependents licensed under $MIT26,669,907please-upgrade-nodeDisplays a beginner-friendly message telling your user to upgrade their version of Nodenodeenginesversioncheckverifyupgradetypicode• 3.2.0 • 6 years ago •  357 dependents •  MITpublished version 3.2.0, 6 years ago357 dependents licensed under $MIT19,807,253npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270@asyncapi/converterConvert AsyncAPI documents from older to newer versions.asyncapiupgradeversionconvertasyncapi-bot• 1.6.2 • 7 months ago •  5 dependents •  Apache-2.0published version 1.6.2, 7 months ago5 dependents licensed under $Apache-2.0142,509upgradeA simple Node websocket library to handle http upgrades.websockethttpupgradenativesimplecobbdb• 1.1.0 • 11 years ago •  45 dependents •  MITpublished version 1.1.0, 11 years ago45 dependents licensed under $MIT93,002rush-upgrade-self-pluginRush plugin for upgrade rush.js in monoreporushpluginupgradetiktok-service• 1.1.2 • 6 months ago •  0 dependents •  MITpublished version 1.1.2, 6 months ago0 dependents licensed under $MIT138,383gradle-upgrade-interactiveInteractive CLI to upgrade Gradle dependencies and Gradle wrapper.gradleupgradedependenciesdependency managementinteractivekevcodez• 0.8.4 • a year ago •  0 dependents •  MITpublished version 0.8.4, a year ago0 dependents licensed under $MIT33,278redirect-httpsRedirect from HTTP to HTTPS using meta redirectshttpshttpredirectforceupgradelocationmetacoolaj86• 1.3.1 • 5 years ago •  42 dependents •  (MIT OR Apache-2.0)published version 1.3.1, 5 years ago42 dependents licensed under $(MIT OR Apache-2.0)33,168jest-codemodsCodemods for migrating test files to Jestcodemodjestavatapemochachaiproxyquiremigratemigrationsupgradetransformjscodeshiftcodemodsskovhus• 0.34.2 • 4 months ago •  9 dependents •  MITpublished version 0.34.2, 4 months ago9 dependents licensed under $MIT19,834starttlsUpgrade a regular `net.Stream` connection to a secure `tls` connection.tlsstreamnetupgradesslmcg• 1.0.1 • 10 years ago •  4 dependentspublished version 1.0.1, 10 years ago4 dependents 17,030outdated-browser-reworkDetects outdated browsers and asks users to upgrade to a new version. Handles mobile devices!outdatedoutdated-browserupgradeoldbrowserinternet-explorermikemaccana• 3.0.1 • 5 years ago •  12 dependents •  MITpublished version 3.0.1, 5 years ago12 dependents licensed under $MIT16,273refitA CLI tool for easily managing dependency updates 📦npmpnpmyarnrefitnodedependenciesmodulesupdateupdatesupgradeupgradesupdaterpackage.jsonversionView morerickbrenn• 1.0.3 • 4 months ago •  0 dependents •  MITpublished version 1.0.3, 4 months ago0 dependents licensed under $MIT10,918@strapi/upgradeCLI to upgrade Strapi applications effortlessstrapipackagetoolupgrademigrateversionalexandrebodin• 5.12.6 • 3 days ago •  0 dependents •  SEE LICENSE IN LICENSEpublished version 5.12.6, 3 days ago0 dependents licensed under $SEE LICENSE IN LICENSE7,470upgradepsAudit and upgrade all dependencies in package.json.auditdependenciesmodulespackagessemverupdateupgradelropero• 2.0.7 • 5 months ago •  0 dependents •  ISCpublished version 2.0.7, 5 months ago0 dependents licensed under $ISC3,698svelte-migrateA CLI for migrating Svelte(Kit) codebasesmigrationupgradesveltesveltekittoolsvelte-admin• 1.10.1 • a month ago •  0 dependents •  MITpublished version 1.10.1, a month ago0 dependents licensed under $MIT3,481version-rocketTools to check version monitoring (updates) for web application. web 应用版本监测(更新)工具webversionupdateversioningcheck versionupdate versionversion checkupgradehakuna_matata• 1.7.4 • 6 months ago •  0 dependents •  ISCpublished version 1.7.4, 6 months ago0 dependents licensed under $ISC2,975loopback4-migrationLoopBack 4 Migration Componentloopback-4loopback-extensionmigrationdatabaseupgradedowngradenflaig• 1.3.0 • 3 years ago •  2 dependents •  MITpublished version 1.3.0, 3 years ago2 dependents licensed under $MIT2,429upgrade-node-modulesLock down your module versions and upgrade to the latest stable versions when you want toupgradeupdatedbcooper• 1.5.1 • 4 months ago •  1 dependents •  ISCpublished version 1.5.1, 4 months ago1 dependents licensed under $ISC1,655upgrade-remixCommand line utility to upgrade all Remix/React Router dependencies togetherremixupgradenpmbrophdawg11• 0.7.1 • 2 months ago •  0 dependents •  ISCpublished version 0.7.1, 2 months ago0 dependents licensed under $ISC1,073@sentry/migr8Run migrations for the Sentry JavaScript SDKs.sentrysdkupgrademigratecodemodsentry-bot• 0.2.4 • 9 months ago •  0 dependents •  MITpublished version 0.2.4, 9 months ago0 dependents licensed under $MIT1,090123…12»\n\nSearch results234 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedstorybookStorybook's CLI - install, dev, build, upgrade, and morecligeneratordevbuildupgradestorybook-bot• 8.6.12 • 24 days ago •  809 dependents •  MITpublished version 8.6.12, 24 days ago809 dependents licensed under $MIT26,669,907please-upgrade-nodeDisplays a beginner-friendly message telling your user to upgrade their version of Nodenodeenginesversioncheckverifyupgradetypicode• 3.2.0 • 6 years ago •  357 dependents •  MITpublished version 3.2.0, 6 years ago357 dependents licensed under $MIT19,807,253npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270@asyncapi/converterConvert AsyncAPI documents from older to newer versions.asyncapiupgradeversionconvertasyncapi-bot• 1.6.2 • 7 months ago •  5 dependents •  Apache-2.0published version 1.6.2, 7 months ago5 dependents licensed under $Apache-2.0142,509upgradeA simple Node websocket library to handle http upgrades.websockethttpupgradenativesimplecobbdb• 1.1.0 • 11 years ago •  45 dependents •  MITpublished version 1.1.0, 11 years ago45 dependents licensed under $MIT93,002rush-upgrade-self-pluginRush plugin for upgrade rush.js in monoreporushpluginupgradetiktok-service• 1.1.2 • 6 months ago •  0 dependents •  MITpublished version 1.1.2, 6 months ago0 dependents licensed under $MIT138,383gradle-upgrade-interactiveInteractive CLI to upgrade Gradle dependencies and Gradle wrapper.gradleupgradedependenciesdependency managementinteractivekevcodez• 0.8.4 • a year ago •  0 dependents •  MITpublished version 0.8.4, a year ago0 dependents licensed under $MIT33,278redirect-httpsRedirect from HTTP to HTTPS using meta redirectshttpshttpredirectforceupgradelocationmetacoolaj86• 1.3.1 • 5 years ago •  42 dependents •  (MIT OR Apache-2.0)published version 1.3.1, 5 years ago42 dependents licensed under $(MIT OR Apache-2.0)33,168jest-codemodsCodemods for migrating test files to Jestcodemodjestavatapemochachaiproxyquiremigratemigrationsupgradetransformjscodeshiftcodemodsskovhus• 0.34.2 • 4 months ago •  9 dependents •  MITpublished version 0.34.2, 4 months ago9 dependents licensed under $MIT19,834starttlsUpgrade a regular `net.Stream` connection to a secure `tls` connection.tlsstreamnetupgradesslmcg• 1.0.1 • 10 years ago •  4 dependentspublished version 1.0.1, 10 years ago4 dependents 17,030outdated-browser-reworkDetects outdated browsers and asks users to upgrade to a new version. Handles mobile devices!outdatedoutdated-browserupgradeoldbrowserinternet-explorermikemaccana• 3.0.1 • 5 years ago •  12 dependents •  MITpublished version 3.0.1, 5 years ago12 dependents licensed under $MIT16,273refitA CLI tool for easily managing dependency updates 📦npmpnpmyarnrefitnodedependenciesmodulesupdateupdatesupgradeupgradesupdaterpackage.jsonversionView morerickbrenn• 1.0.3 • 4 months ago •  0 dependents •  MITpublished version 1.0.3, 4 months ago0 dependents licensed under $MIT10,918@strapi/upgradeCLI to upgrade Strapi applications effortlessstrapipackagetoolupgrademigrateversionalexandrebodin• 5.12.6 • 3 days ago •  0 dependents •  SEE LICENSE IN LICENSEpublished version 5.12.6, 3 days ago0 dependents licensed under $SEE LICENSE IN LICENSE7,470upgradepsAudit and upgrade all dependencies in package.json.auditdependenciesmodulespackagessemverupdateupgradelropero• 2.0.7 • 5 months ago •  0 dependents •  ISCpublished version 2.0.7, 5 months ago0 dependents licensed under $ISC3,698svelte-migrateA CLI for migrating Svelte(Kit) codebasesmigrationupgradesveltesveltekittoolsvelte-admin• 1.10.1 • a month ago •  0 dependents •  MITpublished version 1.10.1, a month ago0 dependents licensed under $MIT3,481version-rocketTools to check version monitoring (updates) for web application. web 应用版本监测(更新)工具webversionupdateversioningcheck versionupdate versionversion checkupgradehakuna_matata• 1.7.4 • 6 months ago •  0 dependents •  ISCpublished version 1.7.4, 6 months ago0 dependents licensed under $ISC2,975loopback4-migrationLoopBack 4 Migration Componentloopback-4loopback-extensionmigrationdatabaseupgradedowngradenflaig• 1.3.0 • 3 years ago •  2 dependents •  MITpublished version 1.3.0, 3 years ago2 dependents licensed under $MIT2,429upgrade-node-modulesLock down your module versions and upgrade to the latest stable versions when you want toupgradeupdatedbcooper• 1.5.1 • 4 months ago •  1 dependents •  ISCpublished version 1.5.1, 4 months ago1 dependents licensed under $ISC1,655upgrade-remixCommand line utility to upgrade all Remix/React Router dependencies togetherremixupgradenpmbrophdawg11• 0.7.1 • 2 months ago •  0 dependents •  ISCpublished version 0.7.1, 2 months ago0 dependents licensed under $ISC1,073@sentry/migr8Run migrations for the Sentry JavaScript SDKs.sentrysdkupgrademigratecodemodsentry-bot• 0.2.4 • 9 months ago •  0 dependents •  MITpublished version 0.2.4, 9 months ago0 dependents licensed under $MIT1,090123…12»\n\n\n\nSearch results258 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedsemver-regexRegular expression for matching semver versionssemverversionversionsregexregexpmatchmatchingsemanticsindresorhus• 4.0.5 • 3 years ago •  289 dependents •  MITpublished version 4.0.5, 3 years ago289 dependents licensed under $MIT23,206,991find-versionsFind semver versions in a string: `unicorn v1.2.3` → `1.2.3`semverversionversionsregexregexpmatchmatchingsemanticfindextractgetsindresorhus• 6.0.0 • a year ago •  257 dependents •  MITpublished version 6.0.0, a year ago257 dependents licensed under $MIT22,999,135editionsPublish multiple editions for your JavaScript packages consistently and easily (e.g. source edition, esnext edition, es2015 edition)allow-envallow-readdenodeno-editiondeno-entrydenolandeditioneditionses2022es5es6es6+jsnextnodeView morebevryme• 6.21.0 • a year ago •  99 dependents •  Artistic-2.0published version 6.21.0, a year ago99 dependents licensed under $Artistic-2.05,712,636syncpackConsistent dependency versions in large JavaScript Monoreposdependenciesexact-versionslernalernajsmonoreponpmnxpackage-jsonpackagespnpmsemversort-package-jsonturboturborepoView morefold_left• 13.0.3 • 2 months ago •  16 dependents •  MITpublished version 13.0.3, 2 months ago16 dependents licensed under $MIT3,132,258npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270fetch-node-websiteFetch releases on nodejs.orgnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 9.0.1 • a month ago •  4 dependents •  Apache-2.0published version 9.0.1, a month ago4 dependents licensed under $Apache-2.0385,815version-rangeCheck version ranges like `>=N` and `X || Y || Z` with support for Node.js, Web Browsers, Deno, and TypeScript.browsercompareconditionaldenodeno-editiondeno-entrydenolandes2022es5export-defaultgtemodulenodenode.jsView morebevryme• 4.14.0 • a year ago •  9 dependents •  Artistic-2.0published version 4.14.0, a year ago9 dependents licensed under $Artistic-2.0551,299@google-cloud/appengine-adminAppengine client for Node.jsgoogle apis clientgoogle api clientgoogle apisgoogle apigooglegoogle cloud platformgoogle cloudcloudgoogle appengineappengineapplicationsauthorized certificatesauthorized domainsdomain mappingsView moregoogle-wombot• 4.1.0 • a month ago •  0 dependents •  Apache-2.0published version 4.1.0, a month ago0 dependents licensed under $Apache-2.0256,747normalize-node-versionNormalize and validate Node.js versionsnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 14.0.1 • a month ago •  1 dependents •  Apache-2.0published version 14.0.1, a month ago1 dependents licensed under $Apache-2.0380,122all-node-versionsList all available Node.js versionsnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 13.0.1 • a month ago •  4 dependents •  Apache-2.0published version 13.0.1, a month ago4 dependents licensed under $Apache-2.0386,188node-version-aliasResolve Node.js version aliases like 'latest', 'lts' or 'erbium'nodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 5.0.1 • a month ago •  16 dependents •  Apache-2.0published version 5.0.1, a month ago16 dependents licensed under $Apache-2.0380,165android-versionsGet the name, API level, version level, or version code from any version of Android.androidversionversionsnougatmarshmallowapileveldvoiss• 2.1.0 • 2 months ago •  13 dependents •  MITpublished version 2.1.0, 2 months ago13 dependents licensed under $MIT190,803@pkgjs/nvA tool for resolving node versions from common aliasesaliasnodenode versionsversionsltsactivemaintenancewesleytodd• 0.2.2 • 2 years ago •  8 dependents •  MITpublished version 0.2.2, 2 years ago8 dependents licensed under $MIT192,380serverless-prune-versionsServerless plugin to delete old versions of deployed functions from AWSserverlessserverless-pluginawsaws-lambdalambdapruneversionsphilmanwaring• 1.0.4 • 4 years ago •  0 dependents •  MITpublished version 1.0.4, 4 years ago0 dependents licensed under $MIT58,060preferred-node-versionGet the preferred Node.js version of a project or usernodenodejsnvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 5.0.1 • a month ago •  4 dependents •  Apache-2.0published version 5.0.1, a month ago4 dependents licensed under $Apache-2.055,357@google-cloud/dialogflow-cxCx client for Node.jsgoogle apis clientgoogle api clientgoogle apisgoogle apigooglegoogle cloud platformgoogle cloudcloudgoogle dialogflow-cxdialogflow-cxdialogflowagentsentity typesenvironmentsView moregoogle-wombot• 5.0.1 • a month ago •  13 dependents •  Apache-2.0published version 5.0.1, a month ago13 dependents licensed under $Apache-2.041,329get-nodeDownload a specific version of Node.jsnodejsnodedownloadnvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6View moreehmicky• 15.0.3 • a month ago •  4 dependents •  Apache-2.0published version 15.0.3, a month ago4 dependents licensed under $Apache-2.054,461tagged-versionsGet tagged semver-compatible project versionstagsversionssemvergithashikhemissi• 1.3.0 • 8 years ago •  13 dependents •  MITpublished version 1.3.0, 8 years ago13 dependents licensed under $MIT25,209@apiture/openapi-down-convertTool to down convert OpenAPI 3.1 to OpenAPI 3.0OpenAPIversionsapiture.dev• 0.14.1 • a month ago •  3 dependents •  ISCpublished version 0.14.1, a month ago3 dependents licensed under $ISC23,675version-compareComparator to determine if a version is less than, equivalent to, or greater than another versionbrowsercomparedenodeno-editiondeno-entrydenolandendes2022es5export-defaultgreatergtgtelessView morebevryme• 3.11.0 • a year ago •  15 dependents •  Artistic-2.0published version 3.11.0, a year ago15 dependents licensed under $Artistic-2.018,991123…13»\n\nSearch results258 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedsemver-regexRegular expression for matching semver versionssemverversionversionsregexregexpmatchmatchingsemanticsindresorhus• 4.0.5 • 3 years ago •  289 dependents •  MITpublished version 4.0.5, 3 years ago289 dependents licensed under $MIT23,206,991find-versionsFind semver versions in a string: `unicorn v1.2.3` → `1.2.3`semverversionversionsregexregexpmatchmatchingsemanticfindextractgetsindresorhus• 6.0.0 • a year ago •  257 dependents •  MITpublished version 6.0.0, a year ago257 dependents licensed under $MIT22,999,135editionsPublish multiple editions for your JavaScript packages consistently and easily (e.g. source edition, esnext edition, es2015 edition)allow-envallow-readdenodeno-editiondeno-entrydenolandeditioneditionses2022es5es6es6+jsnextnodeView morebevryme• 6.21.0 • a year ago •  99 dependents •  Artistic-2.0published version 6.21.0, a year ago99 dependents licensed under $Artistic-2.05,712,636syncpackConsistent dependency versions in large JavaScript Monoreposdependenciesexact-versionslernalernajsmonoreponpmnxpackage-jsonpackagespnpmsemversort-package-jsonturboturborepoView morefold_left• 13.0.3 • 2 months ago •  16 dependents •  MITpublished version 13.0.3, 2 months ago16 dependents licensed under $MIT3,132,258npm-check-updatesFind newer versions of dependencies than what your package.json allowsdependenciesnpmpackage.jsonupdateupgradeversionsraine• 18.0.1 • 2 days ago •  608 dependents •  Apache-2.0published version 18.0.1, 2 days ago608 dependents licensed under $Apache-2.02,001,270fetch-node-websiteFetch releases on nodejs.orgnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 9.0.1 • a month ago •  4 dependents •  Apache-2.0published version 9.0.1, a month ago4 dependents licensed under $Apache-2.0385,815version-rangeCheck version ranges like `>=N` and `X || Y || Z` with support for Node.js, Web Browsers, Deno, and TypeScript.browsercompareconditionaldenodeno-editiondeno-entrydenolandes2022es5export-defaultgtemodulenodenode.jsView morebevryme• 4.14.0 • a year ago •  9 dependents •  Artistic-2.0published version 4.14.0, a year ago9 dependents licensed under $Artistic-2.0551,299@google-cloud/appengine-adminAppengine client for Node.jsgoogle apis clientgoogle api clientgoogle apisgoogle apigooglegoogle cloud platformgoogle cloudcloudgoogle appengineappengineapplicationsauthorized certificatesauthorized domainsdomain mappingsView moregoogle-wombot• 4.1.0 • a month ago •  0 dependents •  Apache-2.0published version 4.1.0, a month ago0 dependents licensed under $Apache-2.0256,747normalize-node-versionNormalize and validate Node.js versionsnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 14.0.1 • a month ago •  1 dependents •  Apache-2.0published version 14.0.1, a month ago1 dependents licensed under $Apache-2.0380,122all-node-versionsList all available Node.js versionsnodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 13.0.1 • a month ago •  4 dependents •  Apache-2.0published version 13.0.1, a month ago4 dependents licensed under $Apache-2.0386,188node-version-aliasResolve Node.js version aliases like 'latest', 'lts' or 'erbium'nodejsnodenvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 5.0.1 • a month ago •  16 dependents •  Apache-2.0published version 5.0.1, a month ago16 dependents licensed under $Apache-2.0380,165android-versionsGet the name, API level, version level, or version code from any version of Android.androidversionversionsnougatmarshmallowapileveldvoiss• 2.1.0 • 2 months ago •  13 dependents •  MITpublished version 2.1.0, 2 months ago13 dependents licensed under $MIT190,803@pkgjs/nvA tool for resolving node versions from common aliasesaliasnodenode versionsversionsltsactivemaintenancewesleytodd• 0.2.2 • 2 years ago •  8 dependents •  MITpublished version 0.2.2, 2 years ago8 dependents licensed under $MIT192,380serverless-prune-versionsServerless plugin to delete old versions of deployed functions from AWSserverlessserverless-pluginawsaws-lambdalambdapruneversionsphilmanwaring• 1.0.4 • 4 years ago •  0 dependents •  MITpublished version 1.0.4, 4 years ago0 dependents licensed under $MIT58,060preferred-node-versionGet the preferred Node.js version of a project or usernodenodejsnvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6javascriptView moreehmicky• 5.0.1 • a month ago •  4 dependents •  Apache-2.0published version 5.0.1, a month ago4 dependents licensed under $Apache-2.055,357@google-cloud/dialogflow-cxCx client for Node.jsgoogle apis clientgoogle api clientgoogle apisgoogle apigooglegoogle cloud platformgoogle cloudcloudgoogle dialogflow-cxdialogflow-cxdialogflowagentsentity typesenvironmentsView moregoogle-wombot• 5.0.1 • a month ago •  13 dependents •  Apache-2.0published version 5.0.1, a month ago13 dependents licensed under $Apache-2.041,329get-nodeDownload a specific version of Node.jsnodejsnodedownloadnvmnpxversionsversioningexecshellterminalcommand-lineclidependency-managementes6View moreehmicky• 15.0.3 • a month ago •  4 dependents •  Apache-2.0published version 15.0.3, a month ago4 dependents licensed under $Apache-2.054,461tagged-versionsGet tagged semver-compatible project versionstagsversionssemvergithashikhemissi• 1.3.0 • 8 years ago •  13 dependents •  MITpublished version 1.3.0, 8 years ago13 dependents licensed under $MIT25,209@apiture/openapi-down-convertTool to down convert OpenAPI 3.1 to OpenAPI 3.0OpenAPIversionsapiture.dev• 0.14.1 • a month ago •  3 dependents •  ISCpublished version 0.14.1, a month ago3 dependents licensed under $ISC23,675version-compareComparator to determine if a version is less than, equivalent to, or greater than another versionbrowsercomparedenodeno-editiondeno-entrydenolandendes2022es5export-defaultgreatergtgtelessView morebevryme• 3.11.0 • a year ago •  15 dependents •  Artistic-2.0published version 3.11.0, a year ago15 dependents licensed under $Artistic-2.018,991123…13»\n\n\n\nraineRaine Revere83 Packages0 OrganizationsPackages 83creatableElegant HTML generation. No templating. Just Javascript.rainepublished 3.0.3 • 12 years agopublished version 3.0.3, 12 years agogenerator-nodestrapYeoman generator for a Heroku-ready, coffee-fueled web stack.rainepublished 1.0.2 • 12 years agopublished version 1.0.2, 12 years agorjsA library of Javascript utility functions with an emphasis on Functional Programming.rainepublished 4.0.2 • 11 years agopublished version 4.0.2, 11 years agosymexAdd symbolic links to all local, executable node modules.rainepublished 0.0.2 • 11 years agopublished version 0.0.2, 11 years agonativitySafely install functions on object prototypes.rainepublished 1.3.0 • 11 years agopublished version 1.3.0, 11 years agonativity-fomattonativity plugin to install fomatto onto native String prototype.rainepublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agogenerator-refactoru-express-mvcYeoman generator for an Express app using Model-View-Controller architecture.rainepublished 0.0.0 • 11 years agopublished version 0.0.0, 11 years agobinpathReturns the executable path of a local npm module.rainepublished 0.2.2 • 11 years agopublished version 0.2.2, 11 years agonativity-cintnativity plugin to safely install cint methods onto native object prototypesrainepublished 6.2.0 • 11 years agopublished version 6.2.0, 11 years agoroute-mirrorAuto generate redirects for similar urls in express.rainepublished 0.1.2 • 11 years agopublished version 0.1.2, 11 years agogenerator-refactoru-expressYeoman generator for a basic Express app.rainepublished 0.3.1 • 11 years agopublished version 0.3.1, 11 years agogenerator-refactoru-htmlYeoman generator for a simple HTML5 boilerplate.irrationalisticpublished 0.5.0 • 11 years agopublished version 0.5.0, 11 years agoget-stdin-promiseReturn stdin as a promiserainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agowordsoap-regexRegular expressions for cleaning up dirty HTML output from Microsoft Word.rainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agowordsoapClean up dirty HTML output from Microsoft Wordrainepublished 0.2.0 • 10 years agopublished version 0.2.0, 10 years agoupdatehammerForcefully update all dependencies to latest versions and save to package.jsonrainepublished 0.3.4 • 10 years agopublished version 0.3.4, 10 years agoshacklesMinimal chaining library with tapping and loggingrainepublished 0.2.0 • 10 years agopublished version 0.2.0, 10 years agogifencoderStreaming server-side animated (and non-animated) gif generation for node.jseugenewarepublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agocintA library of Javascript utility functions with an emphasis on Functional Programming.rainepublished 9.1.0 • 4 years agopublished version 9.1.0, 4 years agonpm-check-updatesFind newer versions of dependencies than what your package.json allowsrainepublished 18.0.1 • 2 days agopublished version 18.0.1, 2 days agosweet-composeSweet js macro for function compositionrainepublished 2.0.1 • 10 years agopublished version 2.0.1, 10 years agopromise-guardResolve a collection of Promises while guarding against certain rejectionsrainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agoreduce-argumentsConvert a function that takes two arguments into one that reduces all of its arguments.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agoport-configLook for a configured port from a few typical locations.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agofreebusyDetermine free blocks from a list of events and free/busy rules.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agoshow more packages\n\nraineRaine Revere83 Packages0 OrganizationsPackages 83creatableElegant HTML generation. No templating. Just Javascript.rainepublished 3.0.3 • 12 years agopublished version 3.0.3, 12 years agogenerator-nodestrapYeoman generator for a Heroku-ready, coffee-fueled web stack.rainepublished 1.0.2 • 12 years agopublished version 1.0.2, 12 years agorjsA library of Javascript utility functions with an emphasis on Functional Programming.rainepublished 4.0.2 • 11 years agopublished version 4.0.2, 11 years agosymexAdd symbolic links to all local, executable node modules.rainepublished 0.0.2 • 11 years agopublished version 0.0.2, 11 years agonativitySafely install functions on object prototypes.rainepublished 1.3.0 • 11 years agopublished version 1.3.0, 11 years agonativity-fomattonativity plugin to install fomatto onto native String prototype.rainepublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agogenerator-refactoru-express-mvcYeoman generator for an Express app using Model-View-Controller architecture.rainepublished 0.0.0 • 11 years agopublished version 0.0.0, 11 years agobinpathReturns the executable path of a local npm module.rainepublished 0.2.2 • 11 years agopublished version 0.2.2, 11 years agonativity-cintnativity plugin to safely install cint methods onto native object prototypesrainepublished 6.2.0 • 11 years agopublished version 6.2.0, 11 years agoroute-mirrorAuto generate redirects for similar urls in express.rainepublished 0.1.2 • 11 years agopublished version 0.1.2, 11 years agogenerator-refactoru-expressYeoman generator for a basic Express app.rainepublished 0.3.1 • 11 years agopublished version 0.3.1, 11 years agogenerator-refactoru-htmlYeoman generator for a simple HTML5 boilerplate.irrationalisticpublished 0.5.0 • 11 years agopublished version 0.5.0, 11 years agoget-stdin-promiseReturn stdin as a promiserainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agowordsoap-regexRegular expressions for cleaning up dirty HTML output from Microsoft Word.rainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agowordsoapClean up dirty HTML output from Microsoft Wordrainepublished 0.2.0 • 10 years agopublished version 0.2.0, 10 years agoupdatehammerForcefully update all dependencies to latest versions and save to package.jsonrainepublished 0.3.4 • 10 years agopublished version 0.3.4, 10 years agoshacklesMinimal chaining library with tapping and loggingrainepublished 0.2.0 • 10 years agopublished version 0.2.0, 10 years agogifencoderStreaming server-side animated (and non-animated) gif generation for node.jseugenewarepublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agocintA library of Javascript utility functions with an emphasis on Functional Programming.rainepublished 9.1.0 • 4 years agopublished version 9.1.0, 4 years agonpm-check-updatesFind newer versions of dependencies than what your package.json allowsrainepublished 18.0.1 • 2 days agopublished version 18.0.1, 2 days agosweet-composeSweet js macro for function compositionrainepublished 2.0.1 • 10 years agopublished version 2.0.1, 10 years agopromise-guardResolve a collection of Promises while guarding against certain rejectionsrainepublished 0.1.1 • 10 years agopublished version 0.1.1, 10 years agoreduce-argumentsConvert a function that takes two arguments into one that reduces all of its arguments.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agoport-configLook for a configured port from a few typical locations.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agofreebusyDetermine free blocks from a list of events and free/busy rules.rainepublished 0.1.0 • 10 years agopublished version 0.1.0, 10 years agoshow more packages\n\n\n\ntjunnoneTomas Junnonen@tjunnone1 Package0 OrganizationsPackage 1npm-check-updatesFind newer versions of dependencies than what your package.json allowsrainepublished 18.0.1 • 2 days agopublished version 18.0.1, 2 days ago\n\ntjunnoneTomas Junnonen@tjunnone1 Package0 OrganizationsPackage 1npm-check-updatesFind newer versions of dependencies than what your package.json allowsrainepublished 18.0.1 • 2 days agopublished version 18.0.1, 2 days ago\n\n\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\n\n\nAbout
      Press
  



    
    
    
    

    Press

    


  
    
  
    

    
        Founded in February, 2008
    
  

  
    

    
      HQ in San Francisco
    
  

  
    

    
      Product updates
    
  

  
    

    
      GitHub glossary
    
  

  
    

    
      Media resources
    
  

  
    

    
       press@github.com
     
  


  

  
      
  
    
      ZDNet Korea
      [현장] 깃허브 "코파일럿, 개발 패러다임 바꿔…ROI 달성 가능"
    
    Mar 26, 2025


      
  
    
      Practical AI Podcast
      AI-assisted coding with GitHub's COO
    
    Mar 21, 2025


      
  
    
      No Priors 
      Episode 106: GitHub CEO Thomas Dohmke
    
    Mar 13, 2025


      
  
    
      The Guardian
      How ‘AI agents’ will change the internet 
    
    Mar 9, 2025


      
  
    
      WirtschaftsWoche
      Ein Büro? Gibt’s bei uns nicht
    
    Mar 4, 2025


      
  
    
      Wall Street Journal
      How AI Tools Are Reshaping the Coding Workforce
    
    Mar 4, 2025


      
  
    
      TI Inside
      Exposição total: uma abordagem prática para lidar com vazamentos de dados sensíveis
    
    Mar 3, 2025


      
  
    
      The New York Times 
      A.I. is Prompting an Evolution, Not Extinction, for Coders 
    
    Feb 20, 2025


      
  
    
      itforum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      IT Forum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      Infosecurity Magazine
      Full Exposure: A Practical Approach to Handling Sensitive Data Leaks
    
    Feb 7, 2025


      
  
    
      TechCrunch
      GitHub Copilot brings mockups to life by generating code from images
    
    Feb 6, 2025


      
  
    
      Forbes
      GitHub code now has ‘data residency’ in Australia
    
    Feb 5, 2025


      
  
    
      Accessibility and GenAI 
      Ep 5 - Ed Summers - Head of Accessibility, GitHub
    
    Feb 4, 2025


      
  
    
      FAZ
      DLD: Technologien und Talente prägen den Arbeitsmarkt im KI-Zeitalter
    
    Jan 22, 2025


      
  
    
      Financial Express
      ‘Where developers reside, innovation blooms’
    
    Jan 20, 2025


      
  
    
      Inforchannel
      GitHub anuncia três tendências de desenvolvimento de software para 2025
    
    Jan 17, 2025


      
  
    
      Help Net Security 
      GitHub CISO on security strategy and collaborating with the open source community
    
    Jan 13, 2025


  

    
      
        Previous 1 2 3 4 5 … 58 59 Next\n\n\n\nPoliciesThese are the legal policies of npm, Inc.
Terms of UseOpen Source TermsPrivate TermsCode of ConductPackage Name Disputesnpm LicensePrivacy PolicyUnpublish PolicyCopyright and DMCA PolicyLogos and UsageSecurityReplication and web crawler policy
These are updated from time to time. Their sources are stored in a git repository at https://github.com/npm/documentation/tree/main/content/policies.\n\n\n\n